<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法基础课-基础算法</title>
    <url>/2023/01/29/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>写在前面：这是一份<strong>还不完善</strong>的笔记，<strong>参考了acwing中yxc大大算法思想</strong>，日后还会提供更加详细的图片解释<em>（小白hexo摸索中）</em>以及更加清晰的代码解释，蒟蒻一枚~</p>
<span id="more"></span>

<h2 id="快排模板"><a href="#快排模板" class="headerlink" title="快排模板"></a>快排模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//虽然实际应用直接使用&quot;#include&lt;algorithm&gt; + sort(a,a+n,cmp)&quot;</span></span><br><span class="line"><span class="comment">//但是快排中所用的“递归分治思想”应用广泛</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">( <span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r)</span><span class="comment">//注意参数的选取</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;<span class="comment">//结束递归</span></span><br><span class="line">	<span class="type">int</span> i= l<span class="number">-1</span>,j= r+<span class="number">1</span>,x=a[ (l+r) /<span class="number">2</span>]; <span class="comment">//每次选取中间点为基准数（可更改）但注意边界问题</span></span><br><span class="line">    <span class="comment">//并且以下使用的是do-while循环，故先让i，j往两边各自移动一格</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">&#123;   <span class="keyword">do</span> i++;  <span class="keyword">while</span> (a[i]&lt;x) ;<span class="comment">//让i停在左侧第一个大于x的数上</span></span><br><span class="line">	<span class="keyword">do</span> j--;  <span class="keyword">while</span> (a[j]&gt;x) ;<span class="comment">//让j停在右侧第一个小于x的数上</span></span><br><span class="line">	<span class="keyword">if</span>(i&lt;j)  <span class="built_in">swap</span>(a[i],a[j])<span class="comment">//交换left与right</span></span><br><span class="line">&#125;<span class="comment">//当i与j相遇时，所对应的数不一定为x，但left&lt;=x，right&gt;=x</span></span><br><span class="line">    <span class="built_in">quicksort</span>(a, l, j) ;</span><br><span class="line">	<span class="built_in">quicksort</span>(a, j+<span class="number">1</span>, r) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">quicksort</span>( a, <span class="number">0</span>, n<span class="number">-1</span>);<span class="comment">//递归处理0到n-1的数</span></span><br><span class="line">	<span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第k个数（快排例题）"><a href="#第k个数（快排例题）" class="headerlink" title="第k个数（快排例题）"></a>第k个数（快排例题）</h3><p>​	<strong>给定一个长度为 n的整数数列，以及一个整数 k，请用快速选择算法求出数列从小到大排序后的第 k 个数。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">krd</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span><span class="comment">//注意参数k的变化即可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> a[l];</span><br><span class="line">	<span class="type">int</span> x = a[ (l + r)/<span class="number">2</span>], i = l<span class="number">-1</span> ,j = r+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i&lt;j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> i++; <span class="keyword">while</span> (a[i]&lt;x);</span><br><span class="line">		<span class="keyword">do</span> j--; <span class="keyword">while</span> (a[j]&gt;x);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;j) <span class="built_in">swap</span> (a[i],a[j]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sl= j - l +<span class="number">1</span>;<span class="comment">//sl为相遇点到头的距离</span></span><br><span class="line">	<span class="keyword">if</span>(k&lt;=sl) <span class="keyword">return</span> <span class="built_in">krd</span>(l,j,k);</span><br><span class="line">    <span class="comment">//若k&lt;=sl,左侧点每一个数都小于右侧点，则k必在相遇点左侧，并且为第k-0个数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">krd</span>(j+<span class="number">1</span>,r,k-sl) ;</span><br><span class="line">    <span class="comment">//若k&gt;=sl,右侧点每一个都要大于左侧，则k必在相遇点右侧，并且为第k-sl个数</span></span><br><span class="line">    <span class="comment">//思想：每次舍弃一边进行递归</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) cin&gt;&gt;a[i];</span><br><span class="line">	cout&lt;&lt; <span class="built_in">krd</span>(<span class="number">0</span>,n<span class="number">-1</span>,k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同样的，归并排序最出色的也是它巧妙的递归分治思想</span></span><br><span class="line"><span class="comment">//不同的，快排是先排再分，归并是先分再合</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],temp[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;<span class="comment">//不能再分</span></span><br><span class="line">	<span class="type">int</span> mid =(l+r)/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">mergesort</span>(a,l,mid),<span class="built_in">mergesort</span>(a,mid+<span class="number">1</span>,r);<span class="comment">//核心：拆</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">//双指针算法分别将两端最小值导入temp临时数组</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>,i = l,j = mid+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span>( a[i] &lt; a[j] ) temp [k++] = a [i++] ;</span><br><span class="line">    	<span class="keyword">else</span> temp [k++] = a [j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理剩余的长度</span></span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid) temp [k++]=a [i++];</span><br><span class="line">	<span class="keyword">while</span>(j&lt;=r) temp [k++]=a [j++];</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//将临时数组赋值到原数组</span></span><br><span class="line">	<span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++) a[i]=temp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//个人理解由于temp数组会重复赋值，则不用初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">mergesort</span>(a,<span class="number">0</span>,n<span class="number">-1</span>);<span class="comment">//递归处理</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="逆序对的数量（归并排序例题）"><a href="#逆序对的数量（归并排序例题）" class="headerlink" title="逆序对的数量（归并排序例题）"></a>逆序对的数量（归并排序例题）</h3><p>给定一个长度为 n的整数数列，请你计算数列中的逆序对的数量。</p>
<p>逆序对的定义如下：对于数列的第 i 个和第 j个元素，如果满足 i&lt;j 且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以理解排序就是消除逆序对的算法</span></span><br><span class="line"><span class="comment">//当数组倒序时逆序对最多，即若原数组为n，n-1，n-2...1；</span></span><br><span class="line"><span class="comment">//则逆序对数量为（n-1+n-1+...+1+0)=(n*(n-1))/2大概就是5e9的样子，所以res要开long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;<span class="comment">//long long重命名 </span></span><br><span class="line"><span class="type">int</span> a [N] ,n,temp[N];</span><br><span class="line"><span class="function">LL <span class="title">mergesort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>( l&gt;=r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid=( l+r )/<span class="number">2</span>;</span><br><span class="line">	LL res=<span class="built_in">mergesort</span>( l,mid )+<span class="built_in">mergesort</span>( mid+<span class="number">1</span>,r );<span class="comment">//将左侧的逆序对加上右侧的逆序对</span></span><br><span class="line">	<span class="type">int</span> k=<span class="number">0</span>, i=l, j=mid+<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>( i&lt;=mid &amp;&amp; j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[ i ]&lt;=a[ j ]) temp[ k++]=a[ i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			temp[ k++]=a[ j++];</span><br><span class="line">			res+=mid -i+<span class="number">1</span>;<span class="comment">//若a[i]&gt;a[j],则(i~mid)的数都可以与此时的j构成逆序对</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">while</span>( i&lt;=mid ) temp [ k++]=a [ i++];</span><br><span class="line">	<span class="keyword">while</span>( j&lt;=r ) temp[k++]=a[j++];</span><br><span class="line">	<span class="keyword">for</span>( i=l, j=<span class="number">0</span> ; i&lt;=r ;i++, j++) a [ i ]= temp [ j ] ;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	cout&lt;&lt;<span class="built_in">mergesort</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数的范围（二分例题"><a href="#数的范围（二分例题" class="headerlink" title="数的范围（二分例题)"></a>数的范围（二分例题)</h2><p>给定一个<strong>按照升序排列的长度为 n</strong>的整数数组，以及 q 个查询。</p>
<p>对于每个查询，返回一个元素 k的起始位置和终止位置（位置从 <code>0 0</code> 开始计数）。</p>
<p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此算法为整数二分查找</span></span><br><span class="line"><span class="comment">//注意！！！！要升序！！！</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,mid;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">while</span>(k--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,x=<span class="number">0</span>;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r)<span class="comment">//查找靠左的x</span></span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)/<span class="number">2</span>;<span class="comment">//每次会偏向l</span></span><br><span class="line">			<span class="keyword">if</span>(x&lt;=a[mid]) r=mid;</span><br><span class="line">			<span class="keyword">else</span> l=mid+<span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//若x不存在，则l为第一个大于等于x的数的下标值</span></span><br><span class="line"><span class="comment">//对此我的理解是：先假设x为5，若最后锁定在4 6之间（最后一定会锁定在一个小于x的数和一个大于x的数之间，边界另外讨论），由于mid偏向l的原因，a[mid]&lt;x,则l=1，最后指向6;</span></span><br><span class="line"><span class="comment">//更加简便的方式理解：当x！=a[mid]时，l=mid+1，从而指向&gt;x的第一个整数</span></span><br><span class="line">	<span class="keyword">if</span>(a[l]!=x) cout&lt;&lt;<span class="string">&quot;-1 -1&quot;</span>&lt;&lt;endl;<span class="comment">//若第一次查找都没有，则该数不存在于该数组</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r)<span class="comment">//查找靠右的x</span></span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r+<span class="number">1</span>)/<span class="number">2</span>;<span class="comment">//每次偏向时会偏向r</span></span><br><span class="line">			<span class="keyword">if</span>(x&gt;=a[mid]) l=mid;</span><br><span class="line">			<span class="keyword">else</span> r=mid<span class="number">-1</span>; <span class="comment">//不减1会死循环</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//同上可得，若此处绕过“-1 -1”输出，则l为第一个小于等于x的数的下标值</span></span><br><span class="line"><span class="comment">//当x！=a[mid]时，r=mid-1，从而指向&lt;x的第一个整数</span></span><br><span class="line">        </span><br><span class="line">		cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数的3次方根-二分例题"><a href="#数的3次方根-二分例题" class="headerlink" title="数的3次方根(二分例题)"></a>数的3次方根(二分例题)</h3><p>给定一个浮点数 n，求它的三次方根。（保留6位小数）</p>
<p>−10000≤n≤10000</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处为浮点数的二分</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;n);</span><br><span class="line">	<span class="type">double</span> l=<span class="number">-10000</span>,r=<span class="number">10000</span>;<span class="comment">//题中所给范围即为查找范围</span></span><br><span class="line">	<span class="keyword">while</span>(r-l&gt;<span class="number">1e-8</span>)<span class="comment">//一般为比精确值高两位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(mid*mid*mid&gt;=n) r=mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,l);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A,B,C;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>()||i&lt;B.<span class="built_in">size</span>();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;A.<span class="built_in">size</span>()) t+=A[i];</span><br><span class="line">		<span class="keyword">if</span>(i&lt;B.<span class="built_in">size</span>()) t+=B[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">		t/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);<span class="comment">//因为是加法，所以最多进1</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//将a，b以字符串的形式读入后再转化到vector容器中倒序存储</span></span><br><span class="line">    <span class="comment">//倒序是为了方便进位</span></span><br><span class="line">	string a,b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=b.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) B.<span class="built_in">push_back</span>(b[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	C=<span class="built_in">add</span>(A,B);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cmp函数用于判断A,B大小，若A&gt;B,输出(A-B),若A&lt;B,输出-(B-A)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(A.<span class="built_in">size</span>()!=B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>()&gt;B.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i=A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(A[i]!=B[i]) <span class="keyword">return</span> A[i]&gt;B[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//t可以看作中间变量</span></span><br><span class="line">        t=A[i]-t;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;B.<span class="built_in">size</span>()) t-=B[i];</span><br><span class="line">        <span class="comment">//若t&lt;0,则要退位</span></span><br><span class="line">        <span class="comment">//（t+10）%10为一种巧妙做法，若t&gt;0,则值为t，若t&lt;0,则为(10-t)</span></span><br><span class="line">		C.<span class="built_in">push_back</span>((t+<span class="number">10</span>)%<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(t&lt;<span class="number">0</span>) t=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> t=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">	<span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A,B,C;</span><br><span class="line">	string a,b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=b.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) B.<span class="built_in">push_back</span>(b[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">cmp</span>(A,B)) </span><br><span class="line">	&#123;</span><br><span class="line">		C=<span class="built_in">sub</span>(A,B);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		C=<span class="built_in">sub</span>(B,A);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度乘法（高精度乘以单精度）"><a href="#高精度乘法（高精度乘以单精度）" class="headerlink" title="高精度乘法（高精度乘以单精度）"></a>高精度乘法（高精度乘以单精度）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>()||t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;A.<span class="built_in">size</span>()) t+=A[i]*b;</span><br><span class="line">		C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">		t/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A,C;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	 <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//乘法一般不会有前导0，除非其中一个数为0</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	C=<span class="built_in">mul</span>(A,b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度乘法（高精度乘以高精度）"><a href="#高精度乘法（高精度乘以高精度）" class="headerlink" title="高精度乘法（高精度乘以高精度）"></a>高精度乘法（高精度乘以高精度）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; A,B,C;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="comment">//先计算再进位，较为稳妥</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A,vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;B.size;j++)</span><br><span class="line">            c[i+j+<span class="number">1</span>]+=A[i]*B[j];<span class="comment">//错位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=A.size+B.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]&gt;<span class="number">9</span>) c[i+<span class="number">1</span>]+=c[i]/<span class="number">10</span>;</span><br><span class="line">        C.<span class="built_in">push_back</span>(c[i]%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,<span class="type">int</span> b,<span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">//为从高位开始算</span></span><br><span class="line">	&#123;</span><br><span class="line">		r=r*<span class="number">10</span>+A[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>(r/b);</span><br><span class="line">		r%=b;<span class="comment">//r为余数</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//注意除法得到的结果为正序，需要reverse</span></span><br><span class="line">	<span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(),C.<span class="built_in">end</span>());<span class="comment">//</span></span><br><span class="line">	<span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A,C;</span><br><span class="line">	<span class="type">int</span> b,r=<span class="number">0</span>;</span><br><span class="line">	string a;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	C=<span class="built_in">div</span>(A,b,r);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) cout&lt;&lt;C[i];</span><br><span class="line">	cout&lt;&lt;endl&lt;&lt;r;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前缀与差分"><a href="#前缀与差分" class="headerlink" title="前缀与差分"></a>前缀与差分</h2><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="comment">//构造前缀和数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">//输出l，r一段区间的和</span></span><br><span class="line">		<span class="type">int</span> l,r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[r]-s[l<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],s[N][N];</span><br><span class="line"><span class="type">int</span> m,n,q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="comment">//前缀和从1开始读入</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) </span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="comment">//构造前缀和数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) </span><br><span class="line">			s[i][j]=s[i<span class="number">-1</span>][j]+s[i][j<span class="number">-1</span>]-s[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">	<span class="comment">//利用前缀和数组o(1)计算在矩阵(x1,y1,x2,y2)中的和</span></span><br><span class="line">	<span class="keyword">while</span>(q--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">		cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[x2][y2]-s[x1<span class="number">-1</span>][y2]-s[x2][y1<span class="number">-1</span>]+s[x1<span class="number">-1</span>][y1<span class="number">-1</span>]);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,n,l,r,c;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	b[l]+=c;</span><br><span class="line">	b[r+<span class="number">1</span>]-=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="comment">//插入操作（初始化）</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">insert</span>(i,i,a[i]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class="line">		<span class="built_in">insert</span>(l,r,c);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//求差分数组的前缀和即得到原数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="矩阵差分"><a href="#矩阵差分" class="headerlink" title="矩阵差分"></a>矩阵差分</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],b[N][N];</span><br><span class="line"><span class="type">int</span> x1,y1,x2,y2,c;</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	b[x1][y1]+=c;</span><br><span class="line">	b[x2+<span class="number">1</span>][y1]-=c;</span><br><span class="line">	b[x1][y2+<span class="number">1</span>]-=c;</span><br><span class="line">	b[x2+<span class="number">1</span>][y2+<span class="number">1</span>]+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">	  		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="comment">//同理插入操作</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">	 		<span class="built_in">insert</span>(i,j,i,j,a[i][j]);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">while</span>(q--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</span><br><span class="line">		<span class="built_in">insert</span>(x1,y1,x2,y2,c);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//求二维前缀和</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            b[i][j]+=b[i<span class="number">-1</span>][j]+b[i][j<span class="number">-1</span>]-b[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h2><h3 id="分隔字符串"><a href="#分隔字符串" class="headerlink" title="分隔字符串"></a>分隔字符串</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">1000</span>];</span><br><span class="line">	<span class="built_in">gets</span>(str);</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">strlen</span>(str);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j=i;</span><br><span class="line">		<span class="keyword">while</span>(j&lt;n&amp;&amp;str[j]!=<span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++) cout&lt;&lt;str[k];</span><br><span class="line">		cout&lt;&lt;endl ;</span><br><span class="line">		i=j;<span class="comment">//更新区间</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h3><p>给定一个长度为 n的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="type">int</span> res,j;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="comment">//桶排序思想</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">	&#123;</span><br><span class="line">		s[a[i]]++;</span><br><span class="line">		<span class="keyword">while</span>(j&lt;=i&amp;&amp;s[a[i]]&gt;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			s[a[j]]--;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		res=<span class="built_in">max</span>(res,i-j+<span class="number">1</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组元素的目标和"><a href="#数组元素的目标和" class="headerlink" title="数组元素的目标和"></a>数组元素的目标和</h3><p>给定两个升序排序的<strong>有序数组</strong> A 和 B，以及一个目标值 x。</p>
<p>数组下标从 <code>0 0</code> 开始。</p>
<p>请你求出满足 A[i]+B[j]&#x3D;x的数对 (i,j)。</p>
<p>数据保证有唯一解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x,j;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=m<span class="number">-1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;a[i]+b[j]&gt;x) j--;</span><br><span class="line">        <span class="comment">//整个过程中j单调递减</span></span><br><span class="line">		<span class="keyword">if</span>(a[i]+b[j]==x) 	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断子序列"><a href="#判断子序列" class="headerlink" title="判断子序列"></a>判断子序列</h3><p>给定一个长度为 n 的整数序列 a1,a2,…,an1,an2,…, 以及一个长度为 m 的整数序列 b1,b2,…,bm1,2,…,。</p>
<p>请你判断 a 序列是否为 b序列的子序列。</p>
<p>子序列指序列的一部分项按<strong>原有次序排列</strong>而得的序列，例如序列 {a1,a3,a5}{1,3,5} 是序列 {a1,a2,a3,a4,a5}{1,2,3,4,5} 的一个子序列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> n,m,j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class="line">	j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) </span><br><span class="line">        <span class="keyword">if</span>(b[i]==a[j]) </span><br><span class="line">		&#123;</span><br><span class="line">			j++;</span><br><span class="line">			<span class="keyword">if</span>(j==n) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(j==n) <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  关于lowbit原理</span></span><br><span class="line"><span class="comment">//  x&amp;（-x）=x&amp;（~x+1）</span></span><br><span class="line"><span class="comment">//        x=10100</span></span><br><span class="line"><span class="comment">//       ~x=01011</span></span><br><span class="line"><span class="comment">//     ~x+1=01100</span></span><br><span class="line"><span class="comment">// x&amp;(~x+1)=00100</span></span><br><span class="line">即寻找到了最后一位<span class="number">1</span>；</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(x) x-=<span class="built_in">lowbit</span>(x),res++;</span><br><span class="line">		cout&lt;&lt;res&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="离散化-区间和"><a href="#离散化-区间和" class="headerlink" title="离散化(区间和)"></a>离散化(区间和)</h2><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 <code>0 0</code>。</p>
<p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。</p>
<p>接下来，进行 m 次询问，每个询问包含两个整数 l和 r，你需要求出在区间<code> [l r]</code> 之间的所有数的和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有一种说法是离散化是有序的哈希表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> x,c,l,r;</span><br><span class="line"><span class="comment">//alls存储所有要用到的下标，x/l/r</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"><span class="comment">// nums类型存储(l,r)数对 adds类型存储(x,c)数对</span></span><br><span class="line">vector&lt;PII&gt; nums,adds;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,r=alls.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(alls[mid]&gt;=x) r=mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;c;</span><br><span class="line">		alls.<span class="built_in">push_back</span>(x);</span><br><span class="line">		adds.<span class="built_in">push_back</span>(&#123;x,c&#125;);		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">		alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">		nums.<span class="built_in">push_back</span>(&#123;l,r&#125;);	</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//去重</span></span><br><span class="line">    alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item:adds)</span><br><span class="line">	&#123;</span><br><span class="line">		a[<span class="built_in">find</span>(item.first)]+=item.second;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//构造前缀和数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=alls.<span class="built_in">size</span>();i++) s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	<span class="comment">//输出对应区间的值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item:nums)</span><br><span class="line">	&#123;</span><br><span class="line">		l=<span class="built_in">find</span>(item.first);</span><br><span class="line">		r=<span class="built_in">find</span>(item.second);</span><br><span class="line">		cout&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><p>给定 n个区间 <code>li ri</code>，要求合并所有有交集的区间。</p>
<p>注意如果在端点处相交，也算有交集。</p>
<p>输出合并完成后的区间个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line">vector&lt;PII&gt; a;<span class="comment">//nums类型存储(l,r)数对</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt;&amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;PII&gt; res;</span><br><span class="line">    <span class="comment">//默认按照l的大小排序</span></span><br><span class="line">	<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> st=<span class="number">-2e9</span>,ed=<span class="number">-2e9</span>;</span><br><span class="line">    <span class="comment">//共三种情况（见图片）</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> item:a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ed&lt;item.first)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(item.first!=<span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st,ed&#125;);</span><br><span class="line">			st=item.first,ed=item.second;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> ed=<span class="built_in">max</span>(item.second,ed);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(st!=<span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st,ed&#125;);</span><br><span class="line">	a=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l,r;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		a.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">		<span class="built_in">merge</span>(a);	</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;a.<span class="built_in">size</span>()<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>算法基础课-数据结构</title>
    <url>/2023/01/28/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>写在前面：这是一份<strong>还不完善</strong>的笔记，<strong>参考了acwing中yxc大大算法思想</strong>，日后还会提供更加详细的图片解释<em>（小白hexo摸索中）</em>以及更加清晰的代码解释，蒟蒻一枚~</p>
<span id="more"></span>

<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> head,idx;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> e[N],ne[N];<span class="comment">//e数组存值，ne数组存下一个指向的下标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head=<span class="number">-1</span>;</span><br><span class="line">	idx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//增加头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=head;</span><br><span class="line">	head=idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span><span class="comment">//在第k个数后插入一个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=ne[k];</span><br><span class="line">	ne[k]=idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span>删掉第k个数</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k]=ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add_to_head</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			<span class="keyword">if</span>(k==<span class="number">0</span>) head=ne[head];<span class="comment">//k从1开始，当k=0时代表删除头结点</span></span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">remove</span>(k<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(k<span class="number">-1</span>,x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head;i!=<span class="number">-1</span>;i=ne[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//按照指向顺序依次输出</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> e[N],l[N],r[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//head为0，tail为1；</span></span><br><span class="line">	<span class="comment">//初始时head的右边指向1，tail的左边指向0；</span></span><br><span class="line">	r[<span class="number">0</span>]=<span class="number">1</span>,l[<span class="number">1</span>]=<span class="number">0</span>; </span><br><span class="line">	idx=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span><span class="comment">//在第k个数的右边插入一个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	r[idx]=r[k];</span><br><span class="line">	l[idx]=k;</span><br><span class="line">	l[r[k]]=idx;</span><br><span class="line">	r[k]=idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span><span class="comment">//删除第k个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[l[k]]=r[k];</span><br><span class="line">	l[r[k]]=l[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		string op;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;L&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(<span class="number">0</span>,x);</span><br><span class="line">		&#125;<span class="comment">//头部插入</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;R&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(l[<span class="number">1</span>],x);</span><br><span class="line">		&#125;<span class="comment">//尾部插入</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;D&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			<span class="built_in">remove</span>(k+<span class="number">1</span>);</span><br><span class="line">		&#125;<span class="comment">//k从1开始，idx从2开始，故为（k-1）+2=k+1</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;IL&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(l[k+<span class="number">1</span>],x);</span><br><span class="line">		&#125;<span class="comment">//在第k个数左侧插入即指向第k个数的右侧插入</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;IR&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(k+<span class="number">1</span>,x);</span><br><span class="line">		&#125;<span class="comment">//在第k个数右侧插入</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r[<span class="number">0</span>];i!=<span class="number">1</span>;i=r[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈（先进后出）"><a href="#栈（先进后出）" class="headerlink" title="栈（先进后出）"></a>栈（先进后出）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt=<span class="number">-1</span>,m;<span class="comment">//栈的下标从‘-1’开始</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		string a;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;push&quot;</span>)<span class="comment">//插入元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			stk[++tt]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;pop&quot;</span>)<span class="comment">//弹出栈顶元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			tt--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;empty&quot;</span>)<span class="comment">//判断栈是否为空</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tt==<span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;query&quot;</span>)<span class="comment">//查询栈顶元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;stk[tt]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="中缀表达式求值-栈例题）"><a href="#中缀表达式求值-栈例题）" class="headerlink" title="中缀表达式求值(栈例题）"></a>中缀表达式求值(栈例题）</h3><p><img src="C:\Users\35226\Pictures\表达式.png" alt="表达式"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span><span class="comment">//哈希表</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; num;<span class="comment">//数字栈</span></span><br><span class="line">stack&lt;<span class="type">char</span>&gt; op;<span class="comment">//符号栈</span></span><br><span class="line">unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; h=&#123;&#123;<span class="string">&#x27;+&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;-&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;*&#x27;</span>,<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;/&#x27;</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">()</span><span class="comment">//求值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a=num.<span class="built_in">top</span>();num.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="type">int</span> b=num.<span class="built_in">top</span>();num.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="type">char</span> p=op.<span class="built_in">top</span>();op.<span class="built_in">pop</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;+&#x27;</span>) r=b+a;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;-&#x27;</span>) r=b-a;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;*&#x27;</span>) r=b*a;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;/&#x27;</span>) r=b/a;</span><br><span class="line">	</span><br><span class="line">	num.<span class="built_in">push</span>(r);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a;</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">isdigit</span>(a[i]))<span class="comment">//如果是数字的话则判断位数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x=<span class="number">0</span>,j=i;</span><br><span class="line">			<span class="keyword">while</span>(j&lt;a.<span class="built_in">size</span>()&amp;&amp;<span class="built_in">isdigit</span>(a[j])) x=x*<span class="number">10</span>+a[j]-<span class="string">&#x27;0&#x27;</span>,j++;</span><br><span class="line">			num.<span class="built_in">push</span>(x);</span><br><span class="line">			i=j<span class="number">-1</span>;<span class="comment">//更新i</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			op.<span class="built_in">push</span>(a[i]);</span><br><span class="line">		&#125;<span class="comment">//左括号直接存起来</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(op.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>) <span class="built_in">eval</span>();</span><br><span class="line">			op.<span class="built_in">pop</span>();<span class="comment">//记得把左括号弹出来</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(op.<span class="built_in">size</span>()&amp;&amp;h[op.<span class="built_in">top</span>()]&gt;=h[a[i]]) <span class="built_in">eval</span>();<span class="comment">//新来的优先级小于等于之前的则计算之前的</span></span><br><span class="line">			op.<span class="built_in">push</span>(a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(op.<span class="built_in">size</span>()) <span class="built_in">eval</span>();<span class="comment">//num.top一定有值，通过判断符号栈来知晓是否结束</span></span><br><span class="line">	cout&lt;&lt;num.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列（先入先出）"><a href="#队列（先入先出）" class="headerlink" title="队列（先入先出）"></a>队列（先入先出）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q[N],hh,tt=<span class="number">-1</span>;<span class="comment">//队列初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		string a;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;push&quot;</span>)<span class="comment">//在队尾加入</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			q[++tt]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;pop&quot;</span>)<span class="comment">//队头前移</span></span><br><span class="line">		&#123;</span><br><span class="line">			hh++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;empty&quot;</span>)<span class="comment">//查询是否为空</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tt&gt;=hh) cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;query&quot;</span>)<span class="comment">//查询队头</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;q[hh]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调数据结构"><a href="#单调数据结构" class="headerlink" title="单调数据结构"></a>单调数据结构</h2><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/nmq91e7g.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,x;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="keyword">while</span>(tt&amp;&amp;stk[tt]&gt;=x) tt--;<span class="comment">//若右边出现了更小的数，则较大数不可能为答案，则出栈，注意等于号</span></span><br><span class="line">		<span class="keyword">if</span>(tt) cout&lt;&lt;stk[tt]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		stk[++tt]=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zuqla3ih.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],q[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];<span class="comment">//a数组存的是值，q数组是一个队列，存的是下标</span></span><br><span class="line">	<span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//求每个窗口中的最小值</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(hh&lt;=tt&amp;&amp;q[hh]&lt;i-k+<span class="number">1</span>) hh++;<span class="comment">//hh是队头，q[hh]是下标，当i增大时，q[hh]不在范围内，则出列，队头前移</span></span><br><span class="line">		<span class="keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&gt;a[i]) tt--;<span class="comment">//单调队列核心，同理当新来的小于之前的，则之前的就会被删掉</span></span><br><span class="line">		q[++tt]=i;<span class="comment">//存下标</span></span><br><span class="line">		<span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout&lt;&lt;a[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//除了一开始，其他每次都要输出</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	hh=<span class="number">0</span>,tt=<span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//对称求每个窗口的最大值</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(hh&lt;=tt&amp;&amp;q[hh]&lt;i-k+<span class="number">1</span>) hh++;</span><br><span class="line">		<span class="keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&lt;a[i]) tt--;<span class="comment">//单调队列核心，同理当新来的大于之前的，则之前的就会被删掉</span></span><br><span class="line">		q[++tt]=i;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout&lt;&lt;a[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="KMP字符串"><a href="#KMP字符串" class="headerlink" title="KMP字符串"></a>KMP字符串</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> p[N],s[M];<span class="comment">//p字符串为模板串，s字符串为原串</span></span><br><span class="line"><span class="type">int</span> ne[N];<span class="comment">//next数组存的是从开头匹配的最大数量</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p+<span class="number">1</span>&gt;&gt;m&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//双指针构造next数组 </span></span><br><span class="line">    <span class="comment">//思想：利用双指针将p数组同时看成模板链和原链</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="number">1</span>]) j=ne[j];<span class="comment">//应用kmp思想节省步数的一直后退，直到匹配</span></span><br><span class="line">        <span class="keyword">if</span>(p[i]==p[j+<span class="number">1</span>]) j++;<span class="comment">//一一对应</span></span><br><span class="line">        ne[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始kmp</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==p[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j==n) </span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i-n&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//已完全匹配，输出起始下标</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>],str[N];</span><br><span class="line"><span class="type">int</span> cnt[N],son[N][<span class="number">26</span>],idx=<span class="number">0</span>;<span class="comment">//26个字母,26个分支，cnt为标记结尾数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;<span class="comment">//初始化根节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=str[i]-<span class="string">&#x27;a&#x27;</span>;<span class="comment">//26个字母对应0到25这26个数字</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) son[p][u]=++idx;<span class="comment">//如果没有这个节点，则新建</span></span><br><span class="line">        p=son[p][u];<span class="comment">//跳到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++;<span class="comment">//标记结尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qur</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> p=son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];<span class="comment">//返回以这个节点已打上的标记数量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)<span class="comment">//插入一个字符串</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;str;</span><br><span class="line">            <span class="built_in">insert</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)<span class="comment">//查询一个字符串是否其中</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;str;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">qur</span>(str)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大异或对（二进制Trie树）"><a href="#最大异或对（二进制Trie树）" class="headerlink" title="最大异或对（二进制Trie树）"></a>最大异或对（二进制Trie树）</h3><p>&#x2F;&#x2F;异或：即二进制数1^0&#x3D;1，1^1&#x3D;0，0^0&#x3D;0</p>
<p><strong>在给定的 N个整数 A1，A2……AN中选出两个进行 xor（异或）运算，得到的结果最大是多少？</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">3e6</span>+<span class="number">10</span>;<span class="comment">//题目数据保证数字大小不会超过2的31次方</span></span><br><span class="line"><span class="type">int</span> son[M][<span class="number">2</span>];<span class="comment">//两个节点，不是0就是1</span></span><br><span class="line"><span class="type">int</span> a[N],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;~i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=x&gt;&gt;i&amp;<span class="number">1</span>;<span class="comment">//取出x的第i位数字</span></span><br><span class="line">		<span class="keyword">if</span>(!son[p][u]) son[p][u]=++idx;</span><br><span class="line">		p=son[p][u];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> u=<span class="number">0</span>,p=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;~i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		u=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(son[p][!u])<span class="comment">//如果不一样，则异或值为1</span></span><br><span class="line">		&#123;</span><br><span class="line">			res=(res&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;<span class="comment">//每次都要左移i位</span></span><br><span class="line">			p=son[p][!u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			res=(res&lt;&lt;<span class="number">1</span>)+<span class="number">0</span>;<span class="comment">//每次都要左移i位</span></span><br><span class="line">			p=son[p][u];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">		<span class="built_in">insert</span>(a[i]);<span class="comment">//构建数</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		res=<span class="built_in">max</span>(res,<span class="built_in">search</span>(a[i]));<span class="comment">//最大异或值</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;res;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并查集-合并集合）"><a href="#并查集-合并集合）" class="headerlink" title="并查集(合并集合）"></a>并查集(合并集合）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//返回x的祖宗节点+路径压缩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p[x]!=x) p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">	<span class="keyword">return</span> p[x];<span class="comment">//p[x]实际上还是父节点，只不过在经过路径压缩后，父节点就是祖宗节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">	<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)<span class="comment">//合并集合</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			p[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);<span class="comment">//让a祖宗节点的父节点等于b的祖宗节点</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)<span class="comment">//查询是否在同一集合</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="连通块中点的数量-并查集例题）"><a href="#连通块中点的数量-并查集例题）" class="headerlink" title="连通块中点的数量(并查集例题）"></a>连通块中点的数量(并查集例题）</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5zqu7qjc.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p[x]!=x) p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i]=i;</span><br><span class="line">		s[i]=<span class="number">1</span>;<span class="comment">//初始化distance为1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> op[<span class="number">3</span>];</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) <span class="keyword">continue</span>;</span><br><span class="line">			s[<span class="built_in">find</span>(b)]+=s[<span class="built_in">find</span>(a)];<span class="comment">//b(假设b为最后的祖宗节点)的数量为a与b之和</span></span><br><span class="line">			p[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);<span class="comment">//让a祖宗节点的父节点等于b的祖宗节点</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">				<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cin&gt;&gt;a;</span><br><span class="line">				cout&lt;&lt;s[<span class="built_in">find</span>(a)]&lt;&lt;endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="食物链-并查集例题"><a href="#食物链-并查集例题" class="headerlink" title="食物链(并查集例题)"></a>食物链(并查集例题)</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/kufv6iwu.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  n,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N],d[N];<span class="comment">//d[x]指到父节点的距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p[x]!=x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">find</span>(p[x]);</span><br><span class="line">		d[x]+=d[p[x]];<span class="comment">//递归求总长度然后路径压缩，一路相加</span></span><br><span class="line">		p[x]=u;</span><br><span class="line">      &#125;</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(k--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> t,x,y;</span><br><span class="line">		cin&gt;&gt;t&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;n||y&gt;n) res++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> px=<span class="built_in">find</span>(x);</span><br><span class="line">		<span class="type">int</span> py=<span class="built_in">find</span>(y);</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(px==py&amp;&amp;(d[x]-d[y])%<span class="number">3</span>) res++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(px!=py)</span><br><span class="line">			&#123;</span><br><span class="line">				p[px]=py;</span><br><span class="line">				d[px]=d[y]-d[x];<span class="comment">//x与y是同类，恒有d[x]+d[px]=d[y]</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(px==py&amp;&amp;(d[x]-d[y]<span class="number">-1</span>)%<span class="number">3</span>) res++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(px!=py)</span><br><span class="line">			&#123;</span><br><span class="line">				p[px]=py;</span><br><span class="line">				d[px]=d[y]-d[x]+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆排序（完全二叉树实现排序）"><a href="#堆排序（完全二叉树实现排序）" class="headerlink" title="堆排序（完全二叉树实现排序）"></a>堆排序（完全二叉树实现排序）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> u=x;</span><br><span class="line">	<span class="keyword">if</span>(x*<span class="number">2</span>&lt;=s&amp;&amp;a[x*<span class="number">2</span>]&lt;a[u]) u=<span class="number">2</span>*x;</span><br><span class="line">	<span class="keyword">if</span>(x*<span class="number">2</span>+<span class="number">1</span>&lt;=s&amp;&amp;a[x*<span class="number">2</span>+<span class="number">1</span>]&lt;a[u]) u=x*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x!=u)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(a[x],a[u]);</span><br><span class="line">		<span class="built_in">down</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="comment">//o(n)的时间复杂度 </span></span><br><span class="line">	s=n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>;i;i--) <span class="built_in">down</span>(i);<span class="comment">//要满足左右节点都为堆的性质才可以用</span></span><br><span class="line"><span class="comment">//因为n是最大子节点，n/2为它的父节点，即倒数第二排的最后一个</span></span><br><span class="line"><span class="comment">//构建堆</span></span><br><span class="line">	<span class="keyword">while</span>(m--)<span class="comment">//每次删除头结点并输出</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[<span class="number">1</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		a[<span class="number">1</span>]=a[s];</span><br><span class="line">		s--;</span><br><span class="line">		<span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模拟堆（小根堆）"><a href="#模拟堆（小根堆）" class="headerlink" title="模拟堆（小根堆）"></a>模拟堆（小根堆）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N],ph[N],hp[N];</span><br><span class="line"><span class="type">int</span> n,s,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">head_swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">	<span class="built_in">swap</span>(hp[a],hp[b]);</span><br><span class="line">	<span class="built_in">swap</span>(h[a],h[b]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(u/<span class="number">2</span>&amp;&amp;h[u]&lt;h[u/<span class="number">2</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">head_swap</span>(u,u/<span class="number">2</span>);</span><br><span class="line">		u&gt;&gt;=<span class="number">1</span>;<span class="comment">//记得上移一层</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=u;</span><br><span class="line">	<span class="keyword">if</span>(u*<span class="number">2</span>&lt;=s&amp;&amp;h[t]&gt;h[u*<span class="number">2</span>]) t=u*<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(u*<span class="number">2</span>+<span class="number">1</span>&lt;=s&amp;&amp;h[t]&gt;h[u*<span class="number">2</span>+<span class="number">1</span>]) t=u*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(t!=u)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">head_swap</span>(t,u);</span><br><span class="line">		<span class="built_in">down</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//巧妙</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;I&quot;</span>)<span class="comment">//插入一个数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			h[++s]=k;</span><br><span class="line">			hp[s]=++m;</span><br><span class="line">			ph[m]=s;</span><br><span class="line">			<span class="built_in">up</span>(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;PM&quot;</span>)<span class="comment">//输出最小值</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;h[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;DM&quot;</span>)<span class="comment">// 删除根节点</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">head_swap</span>(<span class="number">1</span>,s);</span><br><span class="line">			s--;</span><br><span class="line">			<span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;D&quot;</span>)<span class="comment">//删除第k个数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			k=ph[k];</span><br><span class="line">			<span class="built_in">head_swap</span>(k,s);</span><br><span class="line">			s--;</span><br><span class="line">			<span class="built_in">up</span>(k);</span><br><span class="line">                  <span class="built_in">down</span>(k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;C&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			k=ph[k];</span><br><span class="line">			h[k]=x;</span><br><span class="line">			<span class="built_in">up</span>(k);</span><br><span class="line">			<span class="built_in">down</span>(k);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模拟散列表（hash哈希）"><a href="#模拟散列表（hash哈希）" class="headerlink" title="模拟散列表（hash哈希）"></a>模拟散列表（hash哈希）</h2><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200003</span>,null=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k=(x%N+N)%N;</span><br><span class="line">	<span class="keyword">while</span>(h[k]!=null&amp;&amp;h[k]!=x)</span><br><span class="line">	&#123;</span><br><span class="line">		k++;</span><br><span class="line">		<span class="keyword">if</span>(k==N) k=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(h,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class="line">		<span class="type">int</span> t=<span class="built_in">find</span>(x);</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			h[t]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(h[t]==x) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100003</span>;</span><br><span class="line"><span class="type">int</span> a[N],e[N],ne[N],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k=(x%N+N)%N;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=a[k];</span><br><span class="line">	a[k]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k=(x%N+N)%N;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a[k];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==e[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin&gt;&gt;op&gt;&gt;x;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">insert</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">find</span>(x)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P=<span class="number">131</span>,N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ULL p[N],h[N];</span><br><span class="line"><span class="type">int</span> m,n,l1,r1,l2,r2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;str+<span class="number">1</span>;</span><br><span class="line">	p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		h[i]=h[i<span class="number">-1</span>]*P+str[i];</span><br><span class="line">		p[i]=p[i<span class="number">-1</span>]*P;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;l1&gt;&gt;r1&gt;&gt;l2&gt;&gt;r2;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">get</span>(l1,r1)==<span class="built_in">get</span>(l2,r2)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy知识点总结</title>
    <url>/2023/06/08/Numpy%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>写在前面：课业要求，存一份到个人博客中~</p>
<span id="more"></span>
<h1 id="Numpy知识点总结"><a href="#Numpy知识点总结" class="headerlink" title="Numpy知识点总结"></a>Numpy知识点总结</h1><h2 id="1-关于导入库"><a href="#1-关于导入库" class="headerlink" title="1.关于导入库"></a>1.关于导入库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#最常用</span></span><br><span class="line">n1=np.array(a)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4 5]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span>*</span><br><span class="line">n2=array(a)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4 5]
</code></pre><h2 id="2-使用Numpy创建数组的方法"><a href="#2-使用Numpy创建数组的方法" class="headerlink" title="2.使用Numpy创建数组的方法"></a>2.使用Numpy创建数组的方法</h2><h3 id="array函数-np-array"><a href="#array函数-np-array" class="headerlink" title="array函数(np.array())"></a>array函数(np.array())</h3><p> $numpy.array( object ,dtype ,copy ,order ,subok ,ndmin )$</p>
<p> 参数列表:</p>
<p> $dtype$:数据类型</p>
<p> $copy$:复制的深浅问题</p>
<p> $order$:创建数组的样式$(K,A,C,F)$$C$为行方向,$F$为列方向,$A$为任意方向<br> (默认)</p>
<p> $subok$:如果为$True$,则将传递子类,否则,返回的数组将被强制为基类数组</p>
<p> $namin$:生成数组的最小维数,不足就在外面套方括号</p>
<p><img src="./3D-Banner.jpg" alt="jupyter"></p>
<p>  <em>引申关于轴的概念($axis$)</em></p>
<p>  一维数组 $axis$=0 (列)</p>
<p>  二维数组 $axis$=0,1 (行,列)</p>
<p>  三维数组 $axis$=0,1,2 $(z,y,x)$</p>
<p>  使用$ndim$获取轴数！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dtype示例</span></span><br><span class="line">n2=array(n1,dtype=<span class="built_in">complex</span>)<span class="comment">#将数据类型设置为复数</span></span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[1.+0.j 2.+0.j 3.+0.j 4.+0.j 5.+0.j]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#copy示例</span></span><br><span class="line">n3=np.array(n1,copy=<span class="literal">True</span>)</span><br><span class="line">n4=np.array(n1,copy=<span class="literal">False</span>)<span class="comment">#注意这里是对array对象的复制</span></span><br><span class="line"><span class="comment"># copy的意思是副本，可以理解为&quot;是否创建副本&quot;</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line">n1[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n3) <span class="comment">#copy=True,不会随着改变</span></span><br><span class="line"><span class="built_in">print</span>(n4) <span class="comment">#copy=False,会随着改变</span></span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4 5]
[1 2 3 4 5]
[1 2 3 4 5]
[9 2 3 4 5]
[1 2 3 4 5]
[9 2 3 4 5]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#namin举例</span></span><br><span class="line">n1=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n2=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],ndmin=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4]
[1 2 3 4]
[[1 2 3 4]]
</code></pre><h3 id="特殊类型数组"><a href="#特殊类型数组" class="headerlink" title="特殊类型数组"></a>特殊类型数组</h3><p>1.随机数数组($np.empty()$)(可用$dtype$指定生成类型)</p>
<p>2.全零数组($np.zeros()$)(默认浮点型)</p>
<p>3.全一数组($np.ones()$)(默认浮点型)</p>
<p>4.以指定值填充的数组($np.full()$)</p>
<p>5.创建对角矩阵($np.diag()$)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随机数数组 np.empty()</span></span><br><span class="line"><span class="comment">#维数以列表形式输入！</span></span><br><span class="line">n=np.empty([<span class="number">2</span>,<span class="number">3</span>])<span class="comment">#行数+列数</span></span><br><span class="line"><span class="comment"># 默认为浮点数类型</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.empty([<span class="number">4</span>,<span class="number">3</span>],dtype=<span class="built_in">int</span>)<span class="comment">#可通过dtype类型限制</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[0. 0. 0.]
 [0. 0. 0.]]
[[0 0 0]
 [0 0 0]
 [0 0 0]
 [0 0 0]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全零数组 np.zeros()</span></span><br><span class="line"><span class="comment">#维数以列表形式输入！</span></span><br><span class="line">n=np.zeros([<span class="number">4</span>,<span class="number">4</span>])<span class="comment">#行数+列数</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.zeros(<span class="number">4</span>)<span class="comment">#列数</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
[0. 0. 0. 0.]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全一数组 np.ones()</span></span><br><span class="line">n=np.ones([<span class="number">4</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.ones(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
[1. 1. 1. 1.]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#full数组 np.full()</span></span><br><span class="line"><span class="comment">#维数以元组表示</span></span><br><span class="line">n = np.full((<span class="number">3</span>,<span class="number">3</span>), <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment">#若创建相同行元素的矩阵</span></span><br><span class="line">n = np.full((<span class="number">4</span>,<span class="number">5</span>),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[8 8 8]
 [8 8 8]
 [8 8 8]]
[[1 2 3 4 5]
 [1 2 3 4 5]
 [1 2 3 4 5]
 [1 2 3 4 5]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对角矩阵 np.diag([])</span></span><br><span class="line">n=np.diag([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 0 0 0]
 [0 2 0 0]
 [0 0 3 0]
 [0 0 0 4]]
</code></pre><h3 id="由数值范围创建数组"><a href="#由数值范围创建数组" class="headerlink" title="由数值范围创建数组"></a>由数值范围创建数组</h3><p>1.由范围($np.arange()$)</p>
<p>2.等差数列的创建($np.linspace()$)</p>
<p>3.等比数列的创建($np.logspace()$)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由范围 np.arange()</span></span><br><span class="line"><span class="comment"># (起始，终止，步长)</span></span><br><span class="line">n=np.arange(<span class="number">1</span>,<span class="number">12</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[ 1  3  5  7  9 11]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等差数列的创建(np.linspace(起点，终点，步长))</span></span><br><span class="line">n1 = np.linspace(<span class="number">7500</span>,<span class="number">10000</span>,<span class="number">6</span>)</span><br><span class="line">n2 = np.linspace(<span class="number">7500</span>,<span class="number">10000</span>,<span class="number">6</span>,endpoint=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[ 7500.  8000.  8500.  9000.  9500. 10000.]
[7500.         7916.66666667 8333.33333333 8750.         9166.66666667
 9583.33333333]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等比数列的创建 np.logspace()</span></span><br><span class="line">n = np.logspace(<span class="number">0</span>,<span class="number">63</span>,<span class="number">64</span>,base=<span class="number">2</span>,dtype=<span class="string">&#x27;uint64&#x27;</span>)<span class="comment"># 不然会爆int</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(n.reshape(<span class="number">8</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<pre><code>[                  1                   2                   4
                   8                  16                  32
                  64                 128                 256
                 512                1024                2048
                4096                8192               16384
               32768               65536              131072
              262144              524288             1048576
             2097152             4194304             8388608
            16777216            33554432            67108864
           134217728           268435456           536870912
          1073741824          2147483648          4294967296
          8589934592         17179869184         34359738368
         68719476736        137438953472        274877906944
        549755813888       1099511627776       2199023255552
       4398046511104       8796093022208      17592186044416
      35184372088832      70368744177664     140737488355328
     281474976710656     562949953421312    1125899906842624
    2251799813685248    4503599627370496    9007199254740992
   18014398509481984   36028797018963968   72057594037927936
  144115188075855872  288230376151711744  576460752303423488
 1152921504606846976 2305843009213693952 4611686018427387904
 9223372036854775808]
[[                  1                   2                   4
                    8                  16                  32
                   64                 128]
 [                256                 512                1024
                 2048                4096                8192
                16384               32768]
 [              65536              131072              262144
               524288             1048576             2097152
              4194304             8388608]
 [           16777216            33554432            67108864
            134217728           268435456           536870912
           1073741824          2147483648]
 [         4294967296          8589934592         17179869184
          34359738368         68719476736        137438953472
         274877906944        549755813888]
 [      1099511627776       2199023255552       4398046511104
        8796093022208      17592186044416      35184372088832
       70368744177664     140737488355328]
 [    281474976710656     562949953421312    1125899906842624
     2251799813685248    4503599627370496    9007199254740992
    18014398509481984   36028797018963968]
 [  72057594037927936  144115188075855872  288230376151711744
   576460752303423488 1152921504606846976 2305843009213693952
  4611686018427387904 9223372036854775808]]
</code></pre><h3 id="随机数组的创建-random模块"><a href="#随机数组的创建-random模块" class="headerlink" title="随机数组的创建(random模块)"></a>随机数组的创建(random模块)</h3><p>1.创建$0-1$之间的随机数($np.random.rand()$)</p>
<p>2.从正态分布中返回随机生成的数组($np.random.randn()$)</p>
<p>3.生成一定范围内的随机数组($np.random.randint()$)</p>
<p>4.生成正态分布的随机数($np.random.normal()$)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建0-1之间的随机数</span></span><br><span class="line">n=np.random.rand(<span class="number">5</span>)<span class="comment">#维数</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.random.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[0.96516288 0.24682269 0.66936546 0.85283307 0.47118698]
[[0.59920682 0.40625209 0.18340696 0.90613633]
 [0.10098238 0.0781746  0.02856576 0.85747123]
 [0.47102612 0.38726455 0.4349197  0.63686956]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从正态分布中返回随机生成的数组</span></span><br><span class="line">n=np.random.randn(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.random.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[ 0.74211452 -0.29730306 -1.16421314  1.81939644 -0.68400508]
[[-2.17052662  0.25479841  0.91881829  0.96251497]
 [-0.28614674 -1.8932509   2.58457647 -1.28645721]
 [-0.02763578 -0.15577567 -0.74777201  1.12820765]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一定范围内的随机数组</span></span><br><span class="line"><span class="comment"># 产生的数是正整数！！！</span></span><br><span class="line"><span class="comment"># low: int</span></span><br><span class="line"><span class="comment">#（high = None时，生成的数值要在[0, low)区间内）</span></span><br><span class="line"><span class="comment"># high: int (可选)</span></span><br><span class="line"><span class="comment"># size: int or tuple of ints(可选)</span></span><br><span class="line"><span class="comment"># dtype: dtype(可选)</span></span><br><span class="line">n=np.random.randint(<span class="number">1</span>,<span class="number">5</span>,(<span class="number">2</span>,<span class="number">4</span>))<span class="comment">#1-5左闭右开</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.random.randint(<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">4</span>))<span class="comment"># 0-5左闭右开</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 1 1 4]
 [3 2 2 3]]
[[0 2 4 1]
 [3 4 3 4]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成正态分布的随机数</span></span><br><span class="line"><span class="comment">#可指定均值，标准差，维数！！</span></span><br><span class="line">n = np.random.normal(<span class="number">0</span>, <span class="number">0.1</span>, (<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#(均值，标准差，维数)</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[-0.10621183 -0.05465658  0.00068895  0.01082762]
 [-0.09779584  0.1248368  -0.09974623  0.04407646]
 [ 0.03004638 -0.03053372  0.02065726 -0.25012571]]
</code></pre><h3 id="根据已有数组创建"><a href="#根据已有数组创建" class="headerlink" title="根据已有数组创建"></a>根据已有数组创建</h3><p>1.由已有列表创建 $asarray()$</p>
<p>2.由已有列表形状创建 $zeros$<em>_$like$()/$ones$ </em> $like()$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#asarray与array的区别</span></span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>]]</span><br><span class="line">temp = np.array(a)              <span class="comment">#通过列表创建数组</span></span><br><span class="line">n1= np.asarray(temp)</span><br><span class="line">n2= np.array(temp)</span><br><span class="line">n3= np.zeros_like(a)</span><br><span class="line">n4= np.ones_like(a)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line">temp[<span class="number">0</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 2 3]
 [2 4 3]
 [2 8 7]]
[[1 2 3]
 [2 4 3]
 [2 8 7]]
[[0 0 0]
 [0 0 0]
 [0 0 0]]
[[1 1 1]
 [1 1 1]
 [1 1 1]]
[[2 2 2]
 [2 4 3]
 [2 8 7]]
[[1 2 3]
 [2 4 3]
 [2 8 7]]
</code></pre><h2 id="3-数组属性"><a href="#3-数组属性" class="headerlink" title="3.数组属性"></a>3.数组属性</h2><p>1.$ndarry.shape$  元组形式输出</p>
<p>2.$ndarry.dtype$  数据类型</p>
<p>3.$ndarry.size$  数据总个数</p>
<p>4.$ndarry.ndim$  轴数</p>
<p>5.$ndarry.T$    转置</p>
<p>6.$ndarry.flat$  压平(并且支持切片压平)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(n.shape)</span><br><span class="line"><span class="built_in">print</span>(n.dtype)</span><br><span class="line"><span class="built_in">print</span>(n.size)</span><br><span class="line"><span class="built_in">print</span>(n.ndim)</span><br><span class="line"><span class="built_in">print</span>(n.T)</span><br><span class="line"><span class="built_in">print</span>(n.flat[<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[-0.10621183 -0.05465658  0.00068895  0.01082762]
 [-0.09779584  0.1248368  -0.09974623  0.04407646]
 [ 0.03004638 -0.03053372  0.02065726 -0.25012571]]
(3, 4)
float64
12
2
[[-0.10621183 -0.09779584  0.03004638]
 [-0.05465658  0.1248368  -0.03053372]
 [ 0.00068895 -0.09974623  0.02065726]
 [ 0.01082762  0.04407646 -0.25012571]]
[-0.05465658  0.00068895]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n5=array(a)</span><br><span class="line"><span class="built_in">print</span>(n5)</span><br><span class="line"><span class="built_in">print</span>(n5.size)</span><br><span class="line"><span class="built_in">print</span>(n5.itemsize)</span><br><span class="line"><span class="built_in">print</span>(n5.nbytes)</span><br><span class="line"><span class="comment">##nbytes=size*itemsize</span></span><br></pre></td></tr></table></figure>
<pre><code>[[1 2 3]
 [2 4 3]
 [2 8 7]]
9
4
36
</code></pre><h2 id="4-切片与索引"><a href="#4-切片与索引" class="headerlink" title="4.切片与索引"></a>4.切片与索引</h2><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>$ndarray$ 数组可以基于 $0$ 到 $len( ndarray ) - 1$的下标进行索引</p>
<p>切片后,生成一个新的数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array01=np.arange(<span class="number">1</span>,<span class="number">8</span>)</span><br><span class="line">array02=array01[<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array01))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array02))</span><br></pre></td></tr></table></figure>
<pre><code>2416398960272
2416398970640
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二维数组的切片</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(array02[<span class="number">0</span>:<span class="number">2</span>])<span class="comment">#只有一个数字默认为行数进行切片</span></span><br><span class="line"><span class="built_in">print</span>(array02[<span class="number">0</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#索引对象是数字！</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
[[1 2 3 4]
 [5 6 7 8]]
[[2 3]
 [6 7]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多维数组的切片</span></span><br><span class="line"><span class="comment">#数组对象</span></span><br><span class="line"><span class="comment">#[ 页号 , 行号 , 列号 ]</span></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">28</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, :, :])</span><br><span class="line"><span class="comment"># 切出0页</span></span><br><span class="line"><span class="built_in">print</span>(a[:, <span class="number">1</span>, :])</span><br><span class="line"><span class="comment"># 切出所有页的1行，并存到一个列表当中</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, :, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># 切出0页的1列</span></span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br></pre></td></tr></table></figure>
<pre><code>[[[ 1  2  3]
  [ 4  5  6]
  [ 7  8  9]]

 [[10 11 12]
  [13 14 15]
  [16 17 18]]

 [[19 20 21]
  [22 23 24]
  [25 26 27]]]
[[1 2 3]
 [4 5 6]
 [7 8 9]]
[[ 4  5  6]
 [13 14 15]
 [22 23 24]]
[2 5 8]
(3, 3, 3)
</code></pre><h3 id="高级索引"><a href="#高级索引" class="headerlink" title="高级索引"></a>高级索引</h3><h4 id="整数数组索引"><a href="#整数数组索引" class="headerlink" title="整数数组索引"></a>整数数组索引</h4><p>元素下标一一对应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一种整数索引</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]<span class="comment">#索引对象是列表</span></span><br><span class="line"><span class="comment"># (0,0)(1,1)(2,0)</span></span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3]
 [ 5  6  7]
 [ 9 10 11]
 [12 13 14]
 [15 16 17]]
[1 6 9]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第二种整数索引</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">rows=np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]])</span><br><span class="line">cols=np.array([[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line"><span class="comment"># (0,0)(0,2)(1,1)</span></span><br><span class="line"><span class="comment">#(1,1)(2,0)(2,2)</span></span><br><span class="line">b=array02[rows,cols]</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3]
 [ 5  6  7]
 [ 9 10 11]]
[[ 1  3  6]
 [ 6  9 11]]
</code></pre><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><p>把所有符合条件的数生成一维数组(类似于筛选，即列表生成式)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[array02&gt;<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[ 3  5  6  7  9 10 11]
</code></pre><h4 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h4><p>利用整数数组进行索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一维数组</span></span><br><span class="line">list02=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[ 6  3  2 10]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二维数组</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3]
 [ 9 10 11]
 [ 5  6  7]
 [12 13 14]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[ 2  9  7 13]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多个索引数组</span></span><br><span class="line"><span class="comment">#按照笛卡尔积顺序</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[np.ix_([<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>])]</span><br><span class="line"><span class="comment">#(0,1)(0,0)(0,2)(0,1)</span></span><br><span class="line"><span class="comment">#(2,1)(2,0)(2,2)(2,1)</span></span><br><span class="line"><span class="comment">#(1,1)(1,0)(1,2)(1,1)</span></span><br><span class="line"><span class="comment">#(3,1)(3,0)(3,2)(3,1)</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 2  1  3  2]
 [10  9 11 10]
 [ 6  5  7  6]
 [13 12 14 13]]
</code></pre><h2 id="5-数组操作"><a href="#5-数组操作" class="headerlink" title="5.数组操作"></a>5.数组操作</h2><p>1.数组形状修改 $np.shape()/np.resize()/naddary.flatten()/ndarray.reshape()/np.ravel$</p>
<p>2.数组数值修改 (索引切片方式)</p>
<p>3.添加/删除/裁剪 $np.append()/np.insert()//np.delete()/np.clip()$</p>
<p>4.数组去重 $numpy.unique()/$</p>
<p>5.裁剪数组元素 $np.clip()$</p>
<p>6.行列交换操作 $t[[x,y],:]=t[[y,x],:]$</p>
<p>7.数组转置 $ndarray.T$</p>
<p>8.迭代数组 $for$</p>
<p>9.连接数组 $np.concatenate()/np.stack()$</p>
<p>10.数组分割 $np.split()$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组形状修改之就地变维 np.shape=()/np.resize()</span></span><br><span class="line">n1=np.arange(<span class="number">0</span>,<span class="number">20</span>).reshape(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1.shape=(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n1.resize(<span class="number">2</span>,<span class="number">10</span>))<span class="comment">#更改n1后返回值为None</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
None
[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组形状修改之复制变维 naddary.flatten()</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n2=n1.flatten()</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="comment">#此外，还有类似的操作</span></span><br><span class="line"><span class="built_in">print</span>(n1.flat)</span><br><span class="line"><span class="built_in">print</span>(n1.flat[<span class="number">2</span>:<span class="number">6</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]
&lt;numpy.flatiter object at 0x000002329C09E390&gt;
[2 3 4 5]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组形状修改之视图变维 naddary.reshape()/np.ravel</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n1.reshape(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(np.ravel(n1,order=<span class="string">&quot;C&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(np.ravel(n1,order=<span class="string">&quot;F&quot;</span>))<span class="comment">#返回副本并不对n1进行改变</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]
[ 0 10  1 11  2 12  3 13  4 14  5 15  6 16  7 17  8 18  9 19]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组数值修改(通过索引切片)</span></span><br><span class="line">n1=np.arange(<span class="number">24</span>).reshape(<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[<span class="number">0</span>,:]=<span class="number">0</span> <span class="comment">#把第0行改成0</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[:,<span class="number">1</span>]=<span class="number">0</span> <span class="comment">#修改第0列为0</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[<span class="number">1</span>:<span class="number">3</span>,:]=<span class="number">0</span><span class="comment">#修改多行</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[:,<span class="number">2</span>:<span class="number">5</span>]=<span class="number">0</span> <span class="comment">#修改多列</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[[<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">0</span>]]=<span class="number">0</span> <span class="comment">#修改点</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 6  0  8  9 10 11]
 [12  0 14 15 16 17]
 [18  0 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [18  0 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [18  0  0  0  0 23]]
[[0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组的添加 np.append()</span></span><br><span class="line"><span class="comment">#一维添加</span></span><br><span class="line">array01 = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="comment"># 加单个数字就展开</span></span><br><span class="line">array02=np.append(array01,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="comment"># 若不同维，则必须相同shape,此时即可指定维数(axis=?)</span></span><br><span class="line">array02=np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">array03=np.append(array01,array02,axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line">array03=np.append(array01,array02,axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3]
 [4 5 6 7]]
[ 0  1  2  3  4  5  6  7 20]
[[0 1 2 3]
 [4 5 6 7]
 [0 1 2 3]
 [4 5 6 7]]
[[0 1 2 3 0 1 2 3]
 [4 5 6 7 4 5 6 7]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加数组元素 insert()</span></span><br><span class="line"><span class="comment">#相比append条件更加宽松</span></span><br><span class="line">array01 = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">array02=np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">array03=np.insert(array01,<span class="number">1</span>,array02,axis=<span class="number">0</span>)<span class="comment">#axis=0时为按行插入，要求行数相同</span></span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line">array02=np.arange(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">array03=np.insert(array01,<span class="number">2</span>,array02,axis=<span class="number">1</span>)<span class="comment">#axis=1时为按列插入，要求列数相同</span></span><br><span class="line"><span class="built_in">print</span>(array03)</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3]
 [4 5 6 7]]
[[0 1 2 3]
 [0 1 2 3]
 [4 5 6 7]]
[[0 1 2 3]
 [4 5 6 7]]
[[0 1 0 2 3]
 [4 5 1 6 7]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1=np.arange(<span class="number">0</span>,<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">arr=np.delete(n1,[<span class="number">2</span>,<span class="number">4</span>])<span class="comment">#展开后删除对应下标元素</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">arr=np.delete(n1,<span class="number">1</span>,axis=<span class="number">0</span>)<span class="comment">#删除一行</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="comment"># 注意！二维数组删完以后仍然是二维数组！</span></span><br><span class="line">arr=np.delete(n1,<span class="number">2</span>,axis=<span class="number">1</span>)<span class="comment">#删除一列</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3 4]
 [5 6 7 8 9]]
[0 1 3 5 6 7 8 9]
[[0 1 2 3 4]]
[[0 1 3 4]
 [5 6 8 9]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组元素去重</span></span><br><span class="line"><span class="comment"># numpy.unique(arr, return_index=False, return_inverse=False,return_counts=False, axis=None)</span></span><br><span class="line"><span class="comment"># return_index：   如果为True，返回新列表元素在旧列表中的位置（下标），并以列表形式储</span></span><br><span class="line"><span class="comment"># return_inverse：如果为True，返回旧列表元素在新列表中的位置（下标），并以列表形式储</span></span><br><span class="line"><span class="comment"># return_counts：如果为True，返回去重数组中的元素在原数组中的出现次数</span></span><br><span class="line"><span class="comment"># axis：     轴,如果为None，则arr将被展平</span></span><br><span class="line">array01 = np.array([[<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">10</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]])<span class="comment">#不是一维将会展开</span></span><br><span class="line">n=np.unique(array01)</span><br><span class="line">n1=np.unique(array01,return_counts=<span class="literal">True</span>,axis=<span class="number">0</span>)<span class="comment">#axis=0去除相同行</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">array01[:,<span class="number">1</span>]=[<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">n1=np.unique(array01,return_counts=<span class="literal">True</span>,axis=<span class="number">1</span>)<span class="comment">#axis=1去除相同列</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[ 0  2  4  5  6  7  8  9 10 11]
(array([[ 0, 11,  2, 10],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]]), array([1, 2, 1], dtype=int64))
[[ 0  0  2 10]
 [ 4  4  6  7]
 [ 8  8 10 11]
 [ 4  4  6  7]]
(array([[ 0,  2, 10],
       [ 4,  6,  7],
       [ 8, 10, 11],
       [ 4,  6,  7]]), array([2, 1, 1], dtype=int64))
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#裁剪数组元素(以数值大小为基础)</span></span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="built_in">print</span>(np.clip(array01,<span class="number">4</span>,<span class="number">10</span>))<span class="comment">#把小于4变成4，大于10的变成10</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  0  2 10]
 [ 4  4  6  7]
 [ 8  8 10 11]
 [ 4  4  6  7]]
[[ 4  4  4 10]
 [ 4  4  6  7]
 [ 8  8 10 10]
 [ 4  4  6  7]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#行列交换</span></span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">t=array01.copy()</span><br><span class="line">t[[<span class="number">0</span>,<span class="number">1</span>],:]=t[[<span class="number">1</span>,<span class="number">0</span>],:]<span class="comment">#交换两行</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">t[:,[<span class="number">0</span>,<span class="number">2</span>]]=t[:,[<span class="number">2</span>,<span class="number">0</span>]]<span class="comment">#交换两列</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  0  2 10]
 [ 4  4  6  7]
 [ 8  8 10 11]
 [ 4  4  6  7]]
[[ 4  4  6  7]
 [ 0  0  2 10]
 [ 8  8 10 11]
 [ 4  4  6  7]]
[[ 6  4  4  7]
 [ 2  0  0 10]
 [10  8  8 11]
 [ 6  4  4  7]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#迭代数组</span></span><br><span class="line"><span class="comment">#一维数组迭代-&gt;直接遍历</span></span><br><span class="line">array01=np.arange(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array01:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#二维数组迭代-&gt;1.使用flat属性2.使用numpy.nditer()3.双层for循环</span></span><br><span class="line">array01=array01.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="comment">#思路一:转化为一维</span></span><br><span class="line"><span class="comment"># narray.flat</span></span><br><span class="line">array02=array01.flat</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array02:</span><br><span class="line">    <span class="built_in">print</span>(i+<span class="number">3</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#np.nditer(ndarray)</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> np.nditer(array01):</span><br><span class="line">    <span class="built_in">print</span>(item+<span class="number">3</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#思路二：两重循环</span></span><br><span class="line"><span class="keyword">for</span> items <span class="keyword">in</span> array01:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>0 1 2 3 4 5 6 7 8 9 10 11 
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
3 4 5 6 7 8 9 10 11 12 13 14 
3 4 5 6 7 8 9 10 11 12 13 14 
0 1 2 3 4 5 6 7 8 9 10 11 
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组转置(ndarray.T)</span></span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="built_in">print</span>(array01.T)</span><br><span class="line"><span class="built_in">print</span>(np.transpose(array01))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接数组(不增加新维)</span></span><br><span class="line"><span class="comment"># np.concatenate((a1,a2,...),axis) #axis默认为0</span></span><br><span class="line">array01=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array02=np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">array03=np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((array01,array02),axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((array02,array03),axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># np.column_stack(()) 按列连接</span></span><br><span class="line"><span class="comment"># np.row_stack(()) 按行列连接</span></span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2]
 [3 4 5]
 [0 1 2]
 [3 4 5]
 [6 7 8]]
[[0 1 2 0 1]
 [3 4 5 2 3]
 [6 7 8 4 5]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接数组(增加新维)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.stack()</span></span><br><span class="line"></span><br><span class="line">array01=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array02=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array03=np.stack((array01,array02),axis=<span class="number">0</span>)<span class="comment">#此处01和02一定是相同形状的</span></span><br><span class="line"><span class="built_in">print</span>(array01.ndim)</span><br><span class="line"><span class="built_in">print</span>(array03.ndim)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line"><span class="comment"># 水平堆叠 np.hstack()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直堆叠 np.vstack()</span></span><br></pre></td></tr></table></figure>
<pre><code>2
3
[[[0 1 2]
  [3 4 5]]

 [[0 1 2]
  [3 4 5]]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分割数组 np.split()</span></span><br><span class="line">n1=np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n3=np.split(n1,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="comment"># 水平切割 np.hsplit()</span></span><br><span class="line"><span class="comment"># 竖直切割 np.vsplit()</span></span><br><span class="line"><span class="comment"># 三维以上 np.dsplit()</span></span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3]
 [4 5 6 7]]
[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]])]
</code></pre><h2 id="6-数组运算"><a href="#6-数组运算" class="headerlink" title="6.数组运算"></a>6.数组运算</h2><p>• 广播机制(boardcast)</p>
<p>• 数组的算术运算</p>
<p>• 矩阵运算</p>
<p>• 数学函数</p>
<p>• 统计函数</p>
<p>• 字符串函数</p>
<p>• 排序函数</p>
<p>• 条件筛选函数</p>
<h3 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h3><p> 1.数组+数字</p>
<p> 2.一维数组+二维数组(列数相同，行数不同) </p>
<p> 3.二维数组+二维数组(行数相同，列数不同)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">n1=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">n2=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(n1+n2)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">n3=np.arange(<span class="number">4</span>)</span><br><span class="line">n4=np.arange(<span class="number">3</span>).reshape(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line"><span class="built_in">print</span>(n1+n3)</span><br><span class="line"><span class="built_in">print</span>(n1+n4)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[ 0  2  4  6]
 [ 8 10 12 14]
 [16 18 20 22]]
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[0 1 2 3]
[[0]
 [1]
 [2]]
[[ 0  2  4  6]
 [ 4  6  8 10]
 [ 8 10 12 14]]
[[ 0  1  2  3]
 [ 5  6  7  8]
 [10 11 12 13]]
</code></pre><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><p> 1.$a*b$ 数组的乘积(对应位置相乘)</p>
<p> 2.$a@b$ 矩阵乘积</p>
<p> 3.$a.dot(b)$ 矩阵的乘法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="built_in">print</span>(a*b)<span class="comment">#数组对应元素相乘</span></span><br><span class="line"><span class="built_in">print</span>(a@b)<span class="comment">#矩阵相乘</span></span><br><span class="line"><span class="built_in">print</span>(a.dot(b))<span class="comment">#矩阵相乘</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 5 12]
 [21 32]]
[[19 22]
 [43 50]]
[[19 22]
 [43 50]]
</code></pre><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p> 1.三角函数 $sin()/cos()$</p>
<p> 2.四舍五入函数 $np.around(decimals=(int))$/向下取整$np.floor()$/向上取整 $np.ceil()$</p>
<p> 3.算术运算(数组的加减乘除)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(cos(<span class="number">0</span>))<span class="comment">#返回浮点数类型</span></span><br><span class="line"><span class="built_in">print</span>(sin(np.pi/<span class="number">2</span>))</span><br><span class="line">n = np.arange(<span class="number">6</span>,dtype=np.float_).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">a = np.array([<span class="number">1.0</span>,<span class="number">5.55</span>,<span class="number">12.9</span>,<span class="number">0.567</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.around(a))            <span class="comment">#以小数点为基准</span></span><br><span class="line"><span class="built_in">print</span>(np.around(a,decimals=<span class="number">1</span>)) <span class="comment">#对小数点右一位</span></span><br><span class="line"><span class="built_in">print</span>(np.around(a,decimals=-<span class="number">1</span>))<span class="comment">#对小数点左一位</span></span><br></pre></td></tr></table></figure>
<pre><code>1.0
1.0
[[0. 1. 2.]
 [3. 4. 5.]]
[ 1.     5.55  12.9    0.567]
[ 1.  6. 13.  1.]
[ 1.   5.6 12.9  0.6]
[ 0. 10. 10.  0.]
</code></pre><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><p>• 最大值/最小值：$np.max()/np.min()$</p>
<p>• 极值：$np.ptp()$</p>
<p>• 中位数：$np.median()$</p>
<p>• 求和：$np. sum()$</p>
<p>• 算术平均数：$np.mean()$</p>
<p>• 加权平均数：$np.average()$</p>
<p>• 标准差：$np.std()$</p>
<p>• 方差：$np.var()$</p>
<p>• 协方差：$np.cov()$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最大值/最小值/极值/中位数/std/sverage均可指定轴</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">min</span>(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">max</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(np.ptp(a))<span class="comment">#最大值-最小值</span></span><br><span class="line"><span class="built_in">print</span>(np.median(a))</span><br><span class="line"><span class="built_in">print</span>(np.std(a))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a=np.delete(a,<span class="number">1</span>,axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">weights=np.array([<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.8</span>])</span><br><span class="line">a=a.flat</span><br><span class="line"><span class="built_in">print</span>(np.average(a,weights=weights))</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2]
 [3 4 5]]
[0 1 2]
[2 5]
5
2.5
1.707825127659933
[[0 1 2]
 [3 4 5]]
[[0 1 2]]
1.4615384615384617
</code></pre><h3 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.sort()</span></span><br><span class="line"><span class="comment"># 特点:沿最后的轴排序</span></span><br><span class="line">a=np.array([[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.sort(a))</span><br><span class="line"><span class="built_in">print</span>(np.sort(a,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(np.sort(a,<span class="number">0</span>))</span><br><span class="line"><span class="comment"># numpy.argsort()</span></span><br><span class="line"><span class="comment"># 返回将对数组进行排序的索引</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b=np.argsort(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a[b])</span><br></pre></td></tr></table></figure>
<pre><code>[[3 7]
 [9 1]]
[[3 7]
 [1 9]]
[[3 7]
 [1 9]]
[[3 1]
 [9 7]]
[[3 7]
 [9 1]]
[[0 1]
 [1 0]]
[[[3 7]
  [9 1]]

 [[9 1]
  [3 7]]]
</code></pre><h3 id="条件筛选函数"><a href="#条件筛选函数" class="headerlink" title="条件筛选函数"></a>条件筛选函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.argmax(a,axis=<span class="number">1</span>))<span class="comment">#按列方向</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(a,axis=<span class="number">0</span>))<span class="comment">#按行方向</span></span><br><span class="line"><span class="comment"># 返回满足指定条件的元素下标</span></span><br><span class="line"><span class="comment"># print(np.where(a&gt;2),x,y) #若指定条件，满足则返回x，不满足则返回y</span></span><br><span class="line"><span class="built_in">print</span>(np.where(a&gt;<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<pre><code>[[3 7]
 [9 1]]
[1 0]
[1 0]
(array([0, 0, 1], dtype=int64), array([0, 1, 0], dtype=int64))
</code></pre><h2 id="7-视图与副本"><a href="#7-视图与副本" class="headerlink" title="7.视图与副本"></a>7.视图与副本</h2><p>即关于复制的深浅问题</p>
<p>1.深复制(直接赋值)</p>
<p>2.浅复制($ndarray.copy()$/$ndarray.view()$)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array01=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array02=array01 <span class="comment">#相当于c++当中创建了一个引用</span></span><br><span class="line">array03=array01.view()</span><br><span class="line">array04=array01.copy()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array01))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array02))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array03))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array04))</span><br><span class="line">array03.shape=(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array04.shape=(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line"><span class="built_in">print</span>(array04)</span><br><span class="line"><span class="built_in">print</span>(array01)<span class="comment">#不改变原有</span></span><br><span class="line">array02.shape=(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(array01)<span class="comment">#改变原有</span></span><br></pre></td></tr></table></figure>
<pre><code>2416398891312
2416398891312
2416398920624
2416398920720
[[0 1]
 [2 3]
 [4 5]]
[[0 1]
 [2 3]
 [4 5]]
[[0 1 2]
 [3 4 5]]
[[0 1]
 [2 3]
 [4 5]]
[[0 1]
 [2 3]
 [4 5]]
</code></pre>]]></content>
      <tags>
        <tag>Data science</tag>
      </tags>
  </entry>
</search>
