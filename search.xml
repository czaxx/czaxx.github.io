<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML CSS JavaScript</title>
    <url>/2023/07/08/HTML%20CSS%20JavaScript/</url>
    <content><![CDATA[<p>想了一下把三个整合到了一起，顺便调整了一下顺序，一些最最最最基础的东西了把(总结为了以后可以<code>ctrl+F</code>)！！！！！！浅浅凑个字数</p>
<span id="more"></span>
<h1 id="html"><a class="markdownIt-Anchor" href="#html"></a> HTML</h1>
<h2 id="结构"><a class="markdownIt-Anchor" href="#结构"></a> 结构</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>f</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>&lt;!DOCTYPE html&gt;</code>声明为<code>HTML5</code>文档</p>
<h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2>
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--我是一行注释--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="头部"><a class="markdownIt-Anchor" href="#头部"></a> 头部</h3>
<p>可以添加在头部区域的元素标签为: <code>&lt;title&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;link&gt;, &lt;script&gt;, &lt;noscript&gt;</code> 和 <code>&lt;base&gt;</code>。是所有头部元素的容器。</p>
<h4 id="title"><a class="markdownIt-Anchor" href="#title"></a> title</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我是必须的<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>定义了浏览器工具栏的标题</li>
<li>当网页添加到收藏夹时，显示在收藏夹中的标题</li>
<li>显示在搜索引擎结果页面的标题</li>
</ol>
<h4 id="base"><a class="markdownIt-Anchor" href="#base"></a> base</h4>
<p>该标签作为HTML文档中所有的链接标签的默认链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;未指定时网站默认跳转的链接&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="link"><a class="markdownIt-Anchor" href="#link"></a> link</h4>
<p>用于链接到<code>css</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="style"><a class="markdownIt-Anchor" href="#style"></a> style</h4>
<p>内联<code>css</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="meta"><a class="markdownIt-Anchor" href="#meta"></a> meta</h4>
<p>声明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">为搜索引擎定义关键词:</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML, CSS, XML, XHTML, JavaScript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">响应式设计:</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">为网页定义描述内容:</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;免费 Web &amp; 编程 教程&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">定义网页作者:</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Runoob&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">每30秒钟刷新当前页面:</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> <span class="comment">&lt;!--用于创造水平线--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="段落"><a class="markdownIt-Anchor" href="#段落"></a> 段落</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    br用于<span class="tag">&lt;<span class="name">br</span>&gt;</span>不产生新段落<span class="tag">&lt;<span class="name">br</span>&gt;</span>的情况下换行</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;在这里填入url&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--target=&quot;_blank&quot;表示会在新窗口打开链接--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="图像"><a class="markdownIt-Anchor" href="#图像"></a> 图像</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/相对路径/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败显示的字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;258&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="文本格式化"><a class="markdownIt-Anchor" href="#文本格式化"></a> 文本格式化</h3>
<p><strong>加粗/斜体/下标/上标</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">这是 <span class="tag">&lt;<span class="name">sub</span>&gt;</span> 下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">sup</span>&gt;</span> 上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h3>
<p>觉得没啥用，一个示例过了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>两行三列:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3>
<h4 id="无序列表"><a class="markdownIt-Anchor" href="#无序列表"></a> 无序列表</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>qaq<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>qwq<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="有序列表"><a class="markdownIt-Anchor" href="#有序列表"></a> 有序列表</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>qaq<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>qwq<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="输入文本框"><a class="markdownIt-Anchor" href="#输入文本框"></a> 输入文本框</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注意：<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 密码字段中的字符是隐藏的(显示为星号或圆圈)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="区块"><a class="markdownIt-Anchor" href="#区块"></a> 区块</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是一个无意义区块</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是一个有意义区块(一般文本)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表单验证"><a class="markdownIt-Anchor" href="#表单验证"></a> 表单验证</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>action</code> : 表单要提交到的位置</li>
<li><code>method</code> :表单数据可以通过 <code>GET</code> 请求作为 URL 参数发送（<code>method=&quot;get&quot;</code>）或通过 <code>POST</code> 请求作为请求正文中的数据发送（<code>method=&quot;post&quot;</code>）。</li>
</ul>
<h2 id="html5新特性"><a class="markdownIt-Anchor" href="#html5新特性"></a> HTML5新特性</h2>
<h3 id="块元素追加"><a class="markdownIt-Anchor" href="#块元素追加"></a> 块元素追加</h3>
<p>作用类似于<code>&lt;div&gt;</code>元素，但是具有语义化的作用，帮助搜索引擎和屏幕阅读器等工具更好地理解文档内容。</p>
<ul>
<li><code>&lt;section&gt;</code>：表示文档中的一个区域或节，通常包含一个标题。</li>
<li><code>&lt;article&gt;</code>：表示文档中的一篇文章或独立的内容块。</li>
<li><code>&lt;nav&gt;</code>：表示文档中的导航链接。例如，一个网站的主菜单可以使用<code>&lt;nav&gt;</code>元素来表示。</li>
<li><code>&lt;header&gt;</code>：表示文档或区域的标题。</li>
<li><code>&lt;footer&gt;</code>：表示文档或区域的页脚。例如，一个网站的页脚可以使用<code>&lt;footer&gt;</code>元素来表示。</li>
<li><code>&lt;aside&gt;</code>：表示与文档内容相关但不是主要内容的部分。例如，一个博客文章中的侧边栏可以使用<code>&lt;aside&gt;</code>元素来表示。</li>
<li><code>&lt;hgroup&gt;</code>：用于将多个标题元素组合在一起。例如，一个页面可能包含多个级别的标题，<code>&lt;hgroup&gt;</code>元素可以将它们组合在一起。</li>
</ul>
<h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="音频"><a class="markdownIt-Anchor" href="#音频"></a> 音频</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;xxx.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="canvas"><a class="markdownIt-Anchor" href="#canvas"></a> Canvas</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span>用于图形的绘制，通过脚本 (通常是JavaScript)<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="学习-html5-canvas-这一篇文章就够了-菜鸟教程-runoobcom"><a class="markdownIt-Anchor" href="#学习-html5-canvas-这一篇文章就够了-菜鸟教程-runoobcom"></a> <a href="https://www.runoob.com/w3cnote/html5-canvas-intro.html">学习 HTML5 Canvas 这一篇文章就够了 | 菜鸟教程 (runoob.com)</a></h4>
<p>懒得写了，好麻烦好大佬的感觉，以后在实例里面慢慢遇见吧</p>
<h3 id="表单-input属性"><a class="markdownIt-Anchor" href="#表单-input属性"></a> 表单 input属性</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;color-picker&quot;</span>&gt;</span>选择颜色：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;color-picker&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color-picker&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;date-picker&quot;</span>&gt;</span>选择日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;date-picker&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date-picker&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>类似还有</p>
<ul>
<li><code>color</code>：用于选择颜色的控件。</li>
<li><code>date</code>：用于选择日期的控件。</li>
<li><code>datetime-local</code>：用于选择日期和时间的控件。</li>
<li><code>email</code>：用于输入电子邮件地址的控件。</li>
<li><code>month</code>：用于选择月份的控件。</li>
<li><code>number</code>：用于输入数字的控件。</li>
<li><code>range</code>：用于选择范围的控件，例如音量或亮度。</li>
<li><code>search</code>：用于输入搜索查询的控件。</li>
<li><code>tel</code>：用于输入电话号码的控件。</li>
<li><code>time</code>：用于选择时间的控件。</li>
<li><code>url</code>：用于输入URL地址的控件。</li>
<li><code>week</code>：用于选择周数的控件。
实例如下
<a href="https://www.javatpoint.com/html-form-input-types?color=green">https://www.javatpoint.com/html-form-input-types?color=green</a></li>
</ul>
<h2 id="关于插件"><a class="markdownIt-Anchor" href="#关于插件"></a> 关于插件</h2>
<h3 id="chinese-simplified"><a class="markdownIt-Anchor" href="#chinese-simplified"></a> Chinese (Simplified)</h3>
<p>支持中文</p>
<h3 id="auto-rename-tag"><a class="markdownIt-Anchor" href="#auto-rename-tag"></a> Auto Rename Tag</h3>
<p>当修改一个标签的种类时，自动修改另一个对应标签的名称。</p>
<h3 id="live-server"><a class="markdownIt-Anchor" href="#live-server"></a> Live Server</h3>
<p>生成动态网站，实时预览网页效果！</p>
<h3 id="prettier"><a class="markdownIt-Anchor" href="#prettier"></a> Prettier</h3>
<p>每次保存时自动控制代码缩进，属于一用离不开</p>
<h3 id="image-preview"><a class="markdownIt-Anchor" href="#image-preview"></a> Image preview</h3>
<p>图片小窗预览，不用手动找图片了</p>
<h3 id="color-highlight"><a class="markdownIt-Anchor" href="#color-highlight"></a> Color Highlight</h3>
<p>16进制颜色提前预览</p>
<h1 id="css"><a class="markdownIt-Anchor" href="#css"></a> CSS</h1>
<h2 id="结构-2"><a class="markdownIt-Anchor" href="#结构-2"></a> 结构</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选择器+声明*/</span></span><br></pre></td></tr></table></figure>
<p>其中声明为<code>/*属性+值*/</code></p>
<h2 id="基础-2"><a class="markdownIt-Anchor" href="#基础-2"></a> 基础</h2>
<h3 id="注释-2"><a class="markdownIt-Anchor" href="#注释-2"></a> 注释</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*我是一行注释*/</span></span><br></pre></td></tr></table></figure>
<h3 id="样式"><a class="markdownIt-Anchor" href="#样式"></a> 样式</h3>
<p>(内联样式)Inline style &gt; (内部样式)  <strong>(style)</strong>  Internal style sheet &gt;(外部样式)  <strong>(link)</strong>  External style sheet &gt; 浏览器默认样式</p>
<p>也就是说<strong>离源代码越近，优先级越高</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">      <span class="comment">/* 内部样式 */</span></span><br><span class="line">      <span class="selector-tag">h3</span>&#123;<span class="attribute">color</span>:green;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;!-- 外部样式 style<span class="selector-class">.css</span> --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style<span class="selector-class">.css</span>&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
<h3 id="选择器"><a class="markdownIt-Anchor" href="#选择器"></a> 选择器</h3>
<p>按优先度排序</p>
<h4 id="id选择器"><a class="markdownIt-Anchor" href="#id选择器"></a> id选择器</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*假设在html中设置h1为id:uiui*/</span></span><br><span class="line"><span class="comment">/*注意事项*/</span></span><br><span class="line"><span class="comment">/*id唯一，且优先级最高*/</span></span><br><span class="line"><span class="comment">/*id不要以数字开头，在有些浏览器中会失效*/</span></span><br><span class="line"><span class="comment">/*#为id选择器*/</span></span><br><span class="line"><span class="selector-id">#uiui</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="class选择器"><a class="markdownIt-Anchor" href="#class选择器"></a> class选择器</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*假设在html中设置h1为class:uiui*/</span></span><br><span class="line"><span class="comment">/*注意事项*/</span></span><br><span class="line"><span class="comment">/*class不唯一*/</span></span><br><span class="line"><span class="selector-class">.class</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="直接选择元素"><a class="markdownIt-Anchor" href="#直接选择元素"></a> 直接选择元素</h4>
<p>在 CSS3 中包含了四种组合方式:</p>
<ul>
<li>后代选择器(以空格   分隔)</li>
<li>子元素选择器(以大于 <strong>&gt;</strong> 号分隔）</li>
<li>相邻兄弟选择器（以加号 <strong>+</strong> 分隔）</li>
<li>普通兄弟选择器（以波浪号 <strong>～</strong> 分隔）</li>
</ul>
<h2 id="常见属性设置"><a class="markdownIt-Anchor" href="#常见属性设置"></a> 常见属性设置</h2>
<h3 id="背景相关"><a class="markdownIt-Anchor" href="#背景相关"></a> 背景相关</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#6495ed</span>;</span><br><span class="line">	<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;x.jpg&#x27;</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>:repeat-x;<span class="comment">/*水平平铺*/</span></span><br><span class="line">    <span class="attribute">background-position</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;<span class="comment">/*固定背景图片，不随页面滚动而变化*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文本相关"><a class="markdownIt-Anchor" href="#文本相关"></a> 文本相关</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;                     <span class="comment">/*文本颜色*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;           <span class="comment">/*文本的对齐方式*/</span></span><br><span class="line">    text_decration:overline;     <span class="comment">/*上划线*/</span></span><br><span class="line">    text_decration:line-through;<span class="comment">/*删除线*/</span></span><br><span class="line">    text_decration:underline;  <span class="comment">/*下划线*/</span></span><br><span class="line">    <span class="attribute">text-transform</span>:capitalize;<span class="comment">/*首字母大写*/</span></span><br><span class="line">    <span class="attribute">text-indent</span>:<span class="number">50px</span>;        <span class="comment">/*第一行缩进*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字体相关"><a class="markdownIt-Anchor" href="#字体相关"></a> 字体相关</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;Times New Roman&quot;</span>, Times, serif;<span class="comment">/*多出来的为安全字体*/</span></span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">40px</span>;<span class="comment">/*设置字体大小，16px=1em*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链接相关"><a class="markdownIt-Anchor" href="#链接相关"></a> 链接相关</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#000000</span>;&#125;      <span class="comment">/* 未访问链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125;  <span class="comment">/* 已访问链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125;  <span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125;  <span class="comment">/* 鼠标点击时 */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>a:hover 必须跟在 a:link 和 a:visited后面</li>
<li>a:active 必须跟在 a:hover后面</li>
</ul>
<h3 id="盒子模型"><a class="markdownIt-Anchor" href="#盒子模型"></a> 盒子模型</h3>
<p><img src="https://www.runoob.com/images/box-model.gif" alt="" /></p>
<h4 id="border"><a class="markdownIt-Anchor" href="#border"></a> border</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*边框种类*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">border-style</span>:dotted;&#125;<span class="comment">/*虚线*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">border-style</span>:dashed;&#125;<span class="comment">/*虚线*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">border-style</span>:solid;&#125;<span class="comment">/*实线*/</span></span><br><span class="line"><span class="comment">/*边框宽度*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">border-width</span>:<span class="number">5px</span>;&#125;</span><br><span class="line"><span class="comment">/*边框颜色*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">border-color</span>:red;&#125;</span><br><span class="line"><span class="comment">/*单独设置某框*/</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border-top-style</span>:dotted;</span><br><span class="line">    <span class="attribute">border-right-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-bottom-style</span>:dotted;</span><br><span class="line">    <span class="attribute">border-left-style</span>:solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="marginpadding"><a class="markdownIt-Anchor" href="#marginpadding"></a> margin/padding</h4>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/08/VlwVi.png" alt="img" /></p>
<p>如图去指定即可</p>
<h3 id="尺寸相关"><a class="markdownIt-Anchor" href="#尺寸相关"></a> 尺寸相关</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-class">.normal</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">height</span>:auto;</span><br><span class="line">    <span class="attribute">max-height</span>:<span class="number">5px</span>;<span class="comment">/*后以此格式类推*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">4px</span>;<span class="comment">/*行高*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="显示相关"><a class="markdownIt-Anchor" href="#显示相关"></a> 显示相关</h3>
<p>隐藏元素的两种方法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*隐藏某个元素，且不会占用任何空间*/</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*隐藏的元素仍需占用与未隐藏之前一样的空间*/</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外还有<code>li &#123;display:inline;&#125;</code>以及<code>span &#123;display:block;&#125;</code>还没搞懂什么意思</p>
<h3 id="定位相关"><a class="markdownIt-Anchor" href="#定位相关"></a> 定位相关</h3>
<h4 id="static定位"><a class="markdownIt-Anchor" href="#static定位"></a> static定位</h4>
<p>不受到top,bottom,left,right影响</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>:static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="fixed定位"><a class="markdownIt-Anchor" href="#fixed定位"></a> fixed定位</h4>
<p>相对于浏览器的固定位置，窗口滚动也不会移动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="relative定位"><a class="markdownIt-Anchor" href="#relative定位"></a> relative定位</h4>
<p>相对元素的静态定位的位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="absolute定位"><a class="markdownIt-Anchor" href="#absolute定位"></a> absolute定位</h4>
<p>绝对定位的元素的位置相对于最近的已定位父元素。</p>
<p>如果元素没有已定位的父元素，那么它的位置相对于<html>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="sticky定位"><a class="markdownIt-Anchor" href="#sticky定位"></a> sticky定位</h4>
<p>基于用户的滚动位置来定位。</p>
<p>它的行为就像 <strong>position:relative;</strong> 而当页面滚动超出目标区域时，它的表现就像 <strong>position:fixed;</strong>，它会固定在目标位置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: -webkit-sticky; <span class="comment">/* Safari */</span></span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#4CAF50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="z-index处理重叠"><a class="markdownIt-Anchor" href="#z-index处理重叠"></a> z-index处理重叠</h4>
<p>这个官网的互动动画很棒，详见:</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index?retiredLocale=de">z-index - CSS: Cascading Style Sheets | MDN (mozilla.org)</a>`</p>
<h3 id="overflow相关"><a class="markdownIt-Anchor" href="#overflow相关"></a> Overflow相关</h3>
<p>CSS overflow 属性可以控制内容溢出元素框时在对应的元素区间内添加滚动条。</p>
<p>overflow属性有以下值：</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">visible</td>
<td style="text-align:left">默认值。内容不会被修剪，会呈现在元素框之外。</td>
</tr>
<tr>
<td style="text-align:left">hidden</td>
<td style="text-align:left">内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td style="text-align:left">scroll</td>
<td style="text-align:left">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td style="text-align:left">auto</td>
<td style="text-align:left">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td style="text-align:left">inherit</td>
<td style="text-align:left">规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody>
</table>
<h3 id="布局相关"><a class="markdownIt-Anchor" href="#布局相关"></a> 布局相关</h3>
<h4 id="元素居中对齐"><a class="markdownIt-Anchor" href="#元素居中对齐"></a> 元素居中对齐</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*注意: 如果没有设置 width 属性(或者设置 100%)，居中对齐将不起作用。*/</span></span><br><span class="line"><span class="selector-class">.center</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文本居中对齐"><a class="markdownIt-Anchor" href="#文本居中对齐"></a> 文本居中对齐</h4>
<p><code>text-align: center;</code></p>
<h4 id="图片居中对齐"><a class="markdownIt-Anchor" href="#图片居中对齐"></a> 图片居中对齐</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="居中对齐"><a class="markdownIt-Anchor" href="#居中对齐"></a> 居中对齐</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*垂直居中对齐*/</span></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">70px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*水平垂直居中对齐*/</span></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">70px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文字水平居中*/</span></span><br><span class="line"><span class="comment">/*核心是利用line-height与height相同*/</span></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h1>
<h2 id="结构-3"><a class="markdownIt-Anchor" href="#结构-3"></a> 结构</h2>
<p><code>Javascript</code>脚本代码必须位于<code>&lt;script&gt;</code>与<code>&lt;/script&gt;</code>之间</p>
<h3 id="内部"><a class="markdownIt-Anchor" href="#内部"></a> 内部</h3>
<p>脚本代码可位于<code>&lt;body&gt;</code>和<code>&lt;head&gt;</code>之间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个 Web 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;我的第一个 JavaScript 函数&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="外部"><a class="markdownIt-Anchor" href="#外部"></a> 外部</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>且<code>js</code>文件这样显示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> my <span class="title class_">Function</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;lalal&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="语法规范"><a class="markdownIt-Anchor" href="#语法规范"></a> 语法规范</h2>
<h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/08/Javascript-DataType.png" alt="img" /></p>
<ul>
<li>类似<code>Python</code>,具有动态类型。</li>
<li><code>var</code>可定义<strong>字符串，数字，布尔</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x1=<span class="number">34.00</span>;</span><br><span class="line"><span class="keyword">var</span> x2=<span class="number">34</span>;</span><br><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;</span><br><span class="line"><span class="keyword">var</span> x=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>数组定义</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>();<span class="comment">//Type1</span></span><br><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);<span class="comment">//Type2</span></span><br><span class="line"><span class="keyword">var</span> cars=[<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>];<span class="comment">//Type3</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>对象定义</strong>：对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">lastname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="变量与变量作用域"><a class="markdownIt-Anchor" href="#变量与变量作用域"></a> 变量与变量作用域</h3>
<p>关于<strong>变量</strong>的几点</p>
<ul>
<li>以<code>var</code>来定义；</li>
<li>字母开头(一般)；</li>
<li>大小写敏感；</li>
<li>重复定义变量，值不会丢失；</li>
<li>未使用值来声明的变量，其值实际上是 undefined；</li>
<li>支持自增自减,复合运算符和字符串相加</li>
</ul>
<p>关于<strong>变量作用域</strong>的几点</p>
<p><strong>局部变量</strong>：只能在函数内部访问。局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处不能调用 carName 变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> carName = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">    <span class="comment">// 函数内可调用 carName 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>全局变量</strong>：</p>
<ul>
<li>变量在函数外定义，即为全局变量。</li>
<li>变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carName = <span class="string">&quot; Volvo&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 函数内可调用 carName 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    carName = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">    <span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>局部变量在函数执行完毕后销毁。全局变量在页面关闭后销毁。</li>
<li>所有数据变量都属于 window 对象。</li>
</ul>
<h3 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h3>
<h4 id="typeof-操作符"><a class="markdownIt-Anchor" href="#typeof-操作符"></a> typeof 操作符</h4>
<p>你可以使用 <strong>typeof</strong> 操作符来查看 JavaScript 变量的数据类型。
请注意：</p>
<ul>
<li>NaN 的数据类型是 number</li>
<li>数组(Array)的数据类型是 object</li>
<li>日期(Date)的数据类型为 object</li>
<li>null 的数据类型是 object</li>
<li>未定义变量的数据类型为 undefined</li>
</ul>
<h4 id="数字布尔值日期转字符串"><a class="markdownIt-Anchor" href="#数字布尔值日期转字符串"></a> 数字/布尔值/日期转字符串</h4>
<ol>
<li><code>String(x)</code>/<code>String(false)</code>/<code>String(new Date())  </code></li>
<li><code>x.toString()</code>/<code>false.toString()</code>/<code>obj = new Date();obj.toString() </code></li>
</ol>
<h4 id="字符串转数字"><a class="markdownIt-Anchor" href="#字符串转数字"></a> 字符串转数字</h4>
<h5 id="number"><a class="markdownIt-Anchor" href="#number"></a> Number()</h5>
<ul>
<li>
<p>字符串包含数字(如 &quot;3.14&quot;) 转换为数字 (如 3.14).</p>
</li>
<li>
<p>空字符串转换为 0。</p>
</li>
<li>
<p>其他的字符串会转换为 NaN (不是个数字)。</p>
</li>
</ul>
<h5 id="一元运算符"><a class="markdownIt-Anchor" href="#一元运算符"></a> 一元运算符 +</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="string">&quot;5&quot;</span>;      <span class="comment">// y 是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> x = + y;      <span class="comment">// x 是一个数字</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&quot;John&quot;</span>;   <span class="comment">// y 是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> x = + y;      <span class="comment">// x 是一个数字 (NaN)</span></span><br></pre></td></tr></table></figure>
<h2 id="对象"><a class="markdownIt-Anchor" href="#对象"></a> 对象</h2>
<h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionname</span>(<span class="params">var1,var2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 需要执行代码</span></span><br><span class="line">    <span class="keyword">return</span> var1+var2;<span class="comment">//也可以没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3>
<ul>
<li>字符串和字符串对象不等同
也就是说<code>var x = &quot;John&quot;;</code>与<code>var y = new String(&quot;John&quot;);</code>不等同</li>
<li>支持转义字符</li>
<li>可以使用内置属性 <strong>length</strong> 来计算字符串的长度：
<code>var sln = txt.length;</code></li>
<li>支持下标索引</li>
</ul>
<h3 id="注释语句关键字"><a class="markdownIt-Anchor" href="#注释语句关键字"></a> 注释/语句/关键字</h3>
<p>**注释 **  <code>//我不会执行</code>。双斜杠，好文明。</p>
<p><strong>语句</strong>以分号<code>;</code>隔开。</p>
<p><strong>关键字</strong>表格如下:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>abstract</td>
<td>else</td>
<td>instanceof</td>
<td>super</td>
</tr>
<tr>
<td>boolean</td>
<td>enum</td>
<td>int</td>
<td>switch</td>
</tr>
<tr>
<td>break</td>
<td>export</td>
<td>interface</td>
<td>synchronized</td>
</tr>
<tr>
<td>byte</td>
<td>extends</td>
<td>let</td>
<td>this</td>
</tr>
<tr>
<td>case</td>
<td>false</td>
<td>long</td>
<td>throw</td>
</tr>
<tr>
<td>catch</td>
<td>final</td>
<td>native</td>
<td>throws</td>
</tr>
<tr>
<td>char</td>
<td>finally</td>
<td>new</td>
<td>transient</td>
</tr>
<tr>
<td>class</td>
<td>float</td>
<td>null</td>
<td>true</td>
</tr>
<tr>
<td>const</td>
<td>for</td>
<td>package</td>
<td>try</td>
</tr>
<tr>
<td>continue</td>
<td>function</td>
<td>private</td>
<td>typeof</td>
</tr>
<tr>
<td>debugger</td>
<td>goto</td>
<td>protected</td>
<td>var</td>
</tr>
<tr>
<td>default</td>
<td>if</td>
<td>public</td>
<td>void</td>
</tr>
<tr>
<td>delete</td>
<td>implements</td>
<td>return</td>
<td>volatile</td>
</tr>
<tr>
<td>do</td>
<td>import</td>
<td>short</td>
<td>while</td>
</tr>
<tr>
<td>double</td>
<td>in</td>
<td>static</td>
<td>with</td>
</tr>
</tbody>
</table>
<h2 id="jquery"><a class="markdownIt-Anchor" href="#jquery"></a> jQuery</h2>
<ul>
<li>
<p>基本语法格式：<code>$(selector).action()</code></p>
</li>
<li>
<p>大多数情况下<code>jQuery</code>代码要包在：<code>$(document).ready(function()&#123;//jQuery代码&#125;)</code>下</p>
</li>
</ul>
<h3 id="选择器-2"><a class="markdownIt-Anchor" href="#选择器-2"></a> 选择器</h3>
<ul>
<li>
<p>元素选择器<code>$(&quot;p&quot;)</code></p>
</li>
<li>
<p><code>id</code>选择器<code>$(&quot;#test&quot;)</code></p>
</li>
<li>
<p><code>class</code>选择器<code>$(&quot;.test&quot;)</code></p>
</li>
<li>
<p>特殊选择器方式</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;*&quot;</span>) <span class="comment">//选取所有</span></span><br><span class="line">$(<span class="string">&quot;p:first&quot;</span>) <span class="comment">//第一个p元素</span></span><br><span class="line">$(<span class="string">&quot;[href]&quot;</span>) <span class="comment">//所有带有href属性的元素</span></span><br><span class="line">$(<span class="string">&quot;a[target=&#x27;_blank&#x27;]&quot;</span>) <span class="comment">//target属性值等于‘_blank’的值</span></span><br><span class="line">$(<span class="string">&quot;tr:even&quot;</span>) <span class="comment">//选取偶数位置的&lt;tr&gt;元素</span></span><br></pre></td></tr></table></figure>
<h3 id="事件"><a class="markdownIt-Anchor" href="#事件"></a> 事件</h3>
<p>类似于 鼠标点击<code>$(&quot;#btn&quot;).click(function&#123;&#125;)</code>和 鼠标悬挂<code>$(&quot;#btn&quot;).hover(function&#123;&#125;)</code></p>
<table>
<thead>
<tr>
<th>鼠标事件</th>
<th>键盘事件</th>
<th>表单事件</th>
<th>窗口事件</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>click</code></td>
<td><code> keypress</code></td>
<td><code>submit</code></td>
<td><code>load</code></td>
</tr>
<tr>
<td><code> hover</code></td>
<td><code>keydown(up)</code></td>
<td><code>blur</code></td>
<td><code>scroll</code></td>
</tr>
</tbody>
</table>
<p>只列举了我认识的一部分</p>
<h2 id="vue"><a class="markdownIt-Anchor" href="#vue"></a> VUE</h2>
<p>大板块更新中...</p>
<p>本人主写vue，会写的比较详细</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2023/07/15/MySQL/</url>
    <content><![CDATA[<p>一点基本语法的总结，但是也只局限在学了基础的语法，深入还需继续探索，，，，，，，，，，，，，</p>
<span id="more"></span>
<h1 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> MySQL</h1>
<h2 id="基本数据库术语"><a class="markdownIt-Anchor" href="#基本数据库术语"></a> 基本数据库术语</h2>
<ul>
<li>数据库(DATABASE)</li>
<li>数据库管理系统(DBMS)</li>
<li>关联式数据库管理系统(RDBMS) / 关联式数据库(SQL)</li>
<li>非关联式数据库管理系统(NRDBMS) / 非关联式数据库(NoSQL)</li>
</ul>
<h2 id="表格的组成成分"><a class="markdownIt-Anchor" href="#表格的组成成分"></a> 表格的组成成分</h2>
<ul>
<li>行  row</li>
<li>列  col</li>
<li>主键 primary key <strong>唯一区分每一行数据</strong></li>
<li>外键 foreign key <strong>一定要对应到primary key</strong></li>
</ul>
<h2 id="mysql语法"><a class="markdownIt-Anchor" href="#mysql语法"></a> MySQL语法</h2>
<h3 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE `数据库名称`;</span><br><span class="line">-- 列出所有数据库</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">-- 删除数据库</span><br><span class="line">DROP DATABASE `数据库名称`;</span><br><span class="line">-- 使用数据库</span><br><span class="line">USE `数据库名称`;</span><br></pre></td></tr></table></figure>
<h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">INT</td>
<td>整数</td>
</tr>
<tr>
<td style="text-align:center">DECIMAL(m,n)</td>
<td>数字共m位,其中有n位是小数</td>
</tr>
<tr>
<td style="text-align:center">VARCHAR(n)</td>
<td>字符串(最多存放长度)</td>
</tr>
<tr>
<td style="text-align:center">BLOB</td>
<td>二进制</td>
</tr>
<tr>
<td style="text-align:center">DATE</td>
<td>日期 ‘YYYY-MM-DD’</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td>记录时间 'YYYY-MM-DD HH:MM:SS'</td>
</tr>
</tbody>
</table>
<h3 id="数据表"><a class="markdownIt-Anchor" href="#数据表"></a> 数据表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建数据表</span><br><span class="line">CREATE TABLE `student`(</span><br><span class="line">	`student_id` INT PRIMARY KEY,</span><br><span class="line">    `name` VARCHAR(20),</span><br><span class="line">    `major` VARCHAR(20)</span><br><span class="line">    -- 手动设置primary key</span><br><span class="line">    -- PRIMARY KEY(&#x27;student_id&#x27;);</span><br><span class="line">); </span><br><span class="line">-- 显示数据表属性</span><br><span class="line">DESCRIBE `student`;</span><br><span class="line">-- 增加数据表属性</span><br><span class="line">ALTER TABLE `student` ADD `gpa` DECIMAL(3,2);</span><br><span class="line">-- 删除数据表属性</span><br><span class="line">ALTER TABLE `student` DROP COLUMN gpa;</span><br><span class="line">-- 删除数据表中的所有值</span><br><span class="line">TRUNCATE TABLE `student`;</span><br><span class="line">-- 删除数据表</span><br><span class="line">DROP TABLE `student`;</span><br></pre></td></tr></table></figure>
<h4 id="创建表格属性常见限制"><a class="markdownIt-Anchor" href="#创建表格属性常见限制"></a> 创建表格属性常见限制</h4>
<ul>
<li><code>NOT NULL</code> 存入数据不能为空</li>
<li><code>UNIQUE</code> 存入数据唯一</li>
<li><code>DEFAULT</code> 默认值</li>
<li><code>AUTO_INCREMENT</code> 自动增1填充</li>
</ul>
<h3 id="存入资料"><a class="markdownIt-Anchor" href="#存入资料"></a> 存入资料</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 存入资料</span><br><span class="line">-- 方法一</span><br><span class="line">INSERT INTO `student` VALUES(1,&#x27;小白&#x27;,&#x27;历史&#x27;);</span><br><span class="line">-- 方法二</span><br><span class="line">INSERT INTO`student`</span><br><span class="line">(`major`,`student_id`,`name`) </span><br><span class="line">VALUES</span><br><span class="line">(&#x27;历史&#x27;,1,&#x27;小白&#x27;);</span><br></pre></td></tr></table></figure>
<h3 id="修改删除资料"><a class="markdownIt-Anchor" href="#修改删除资料"></a> 修改/删除资料</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 关闭自动更新</span><br><span class="line">SET SQL_SAFE_UPDATES = 0;</span><br><span class="line">-- 更新资料</span><br><span class="line">UPDATE `student`</span><br><span class="line">SET `major`=&#x27;英语&#x27;</span><br><span class="line">WHERE `major`=&#x27;化学&#x27;; -- ‘AND’和,&#x27;OR&#x27;或</span><br><span class="line">-- 删除资料</span><br><span class="line">DELETE FROM `student`</span><br><span class="line">WHERE `name`=&#x27;小黑&#x27; AND `major`=`物理`;-- ‘&lt;&gt;’为不等于</span><br></pre></td></tr></table></figure>
<h3 id="取得资料"><a class="markdownIt-Anchor" href="#取得资料"></a> 取得资料</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 获取所有资料</span><br><span class="line">SELECT * FROM `student`;</span><br><span class="line">-- 获取多个属性</span><br><span class="line">SELECT `name`,`major`as `majorr` FROM `student`;-- as用于更名</span><br><span class="line">-- 获取资料并做排序(升序)</span><br><span class="line">SELECT *</span><br><span class="line">FROM `student`</span><br><span class="line">ORDER BY `score`;</span><br><span class="line">-- 获取资料并做排序(降序)</span><br><span class="line">SELECT *</span><br><span class="line">FROM `student`</span><br><span class="line">ORDER BY `score` DESC;</span><br><span class="line">-- 限制回传资料数量</span><br><span class="line">SELECT *</span><br><span class="line">FROM `student`</span><br><span class="line">LIMIT 2;</span><br><span class="line">-- 具体bool类(Where)</span><br><span class="line">SELECT *</span><br><span class="line">FROM `student`</span><br><span class="line">WHERE `major` IN(&#x27;历史&#x27;,&#x27;英语&#x27;,&#x27;生物&#x27;)</span><br><span class="line">-- 若为否定</span><br><span class="line">SELECT *</span><br><span class="line">FROM `student`</span><br><span class="line">WHERE NOT `major` IN(&#x27;历史&#x27;,&#x27;英语&#x27;,&#x27;生物&#x27;)</span><br><span class="line">-- 限制回传资料唯一</span><br><span class="line">SELECT DISTINCT `name` FROM `employee`;</span><br><span class="line">-- 嵌套查询subquery</span><br><span class="line">SELECT *</span><br><span class="line">FROM `student`</span><br><span class="line">WHERE `major` = (`另外一个SELECT查询语句`);</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM `student`</span><br><span class="line">WHERE `major` IN(`另外一个SELECT查询语句`);</span><br><span class="line">-- in/between</span><br><span class="line">where xxx in +(`列表`);</span><br><span class="line">where xxx between a and b;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="关联表格"><a class="markdownIt-Anchor" href="#关联表格"></a> 关联表格</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在创建表格时对已有表格设立外键</span><br><span class="line">CREATE TABLE `branch`(</span><br><span class="line">	`branch_id` INT PRIMARY KEY,</span><br><span class="line">    `branch_name` VARCHAR(20),</span><br><span class="line">    `manager_id` INT,</span><br><span class="line">	FOREIGN KEY (`当前表格外键名称`) REFERENCES `所对应表格名称`(`连接的主键`) ON DELETE SET NULL</span><br><span class="line">   );</span><br><span class="line">-- 后续增加外键属性</span><br><span class="line">ALTER TABLE `employee`</span><br><span class="line">ADD FOREIGN KEY(`branch_id`)</span><br><span class="line">REFERENCES `employee`(`emp_id`)</span><br><span class="line">ON DELETE SET NULL;</span><br></pre></td></tr></table></figure>
<p><code>ON DELETE SET NULL</code> 如果查询不到就设成<code>NULL</code>
<code>ON DELETE CASCADE</code> 如果查询不到就删掉当前记录</p>
<h3 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数"></a> 聚合函数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 取得资料总数</span><br><span class="line">SELECT COUNT(*) FROM `employee`;</span><br><span class="line">-- 取得平均数</span><br><span class="line">SELECT AVG(`salary`) FROM `employee`;</span><br><span class="line">-- 取得总数</span><br><span class="line">SELECT SUM(`salary`) FROM `employee`;</span><br><span class="line">-- 取得最大值</span><br><span class="line">SELECT MAX(`salary`) FROM `employee`;</span><br><span class="line">-- 取得最小值</span><br><span class="line">SELECT MIN(`salary`) FROM `employee`;</span><br><span class="line">-- groupby 函数</span><br><span class="line">SELECT COUNT(CustomerID),Country</span><br><span class="line">FROM Customers</span><br><span class="line">GROUP BY Country;-- 以country为索引，记录用户数量</span><br></pre></td></tr></table></figure>
<h3 id="万用字符"><a class="markdownIt-Anchor" href="#万用字符"></a> 万用字符</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- wildcards 万用字符 %代表任意多个字符 _代表任意一个字符</span><br><span class="line">-- LIKE 为模糊查询</span><br><span class="line">-- 例如取得电话尾号是335的客户</span><br><span class="line">SELECT *</span><br><span class="line">FROM `client`</span><br><span class="line">WHERE `phone` LIKE &#x27;%335&#x27;;</span><br><span class="line">-- 获取以a或c或s开头的字符串</span><br><span class="line">SELECT * FROM Customers</span><br><span class="line">WHERE City LIKE &#x27;[acs]%&#x27;;</span><br><span class="line">-- 获取以a-f字母开头的字符串</span><br><span class="line">SELECT * FROM Customers</span><br><span class="line">WHERE City LIKE &#x27;[a-f]%&#x27;;</span><br><span class="line">-- 获取不以a或c或s开头的字符串</span><br><span class="line">SELECT * FROM Customers</span><br><span class="line">WHERE City LIKE &#x27;[!acs]%&#x27;;</span><br></pre></td></tr></table></figure>
<h3 id="并集-union"><a class="markdownIt-Anchor" href="#并集-union"></a> 并集 UNION</h3>
<p>竖着拼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT `name`</span><br><span class="line">FROM `employee`</span><br><span class="line">UNION</span><br><span class="line">SELECT `client_name`</span><br><span class="line">FROM `client`;</span><br></pre></td></tr></table></figure>
<p>能做并集需要满足的条件</p>
<ul>
<li>合并的两者包含的<strong>数据类型</strong>要一样</li>
<li>合并的两者包含的<strong>元素数量</strong>要一样</li>
</ul>
<h3 id="连接-join"><a class="markdownIt-Anchor" href="#连接-join"></a> 连接 JOIN</h3>
<p>横着拼，涉及到外键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT `emp_id`,`name`,`branch_name`</span><br><span class="line">FROM `employee`</span><br><span class="line">JOIN `branch`</span><br><span class="line">ON `employee`.`emp_id`=`branch`.`manager_id`;</span><br><span class="line">-- 全都回传，不存在用null</span><br><span class="line">-- 使用 LEFT JOIN 左侧全有，不够用null补</span><br><span class="line">-- 使用 RIGHT JOIN 右侧全有，不够用null补</span><br><span class="line">-- INNER JOIN 与join相同</span><br></pre></td></tr></table></figure>
<h4 id="python连接mysql"><a class="markdownIt-Anchor" href="#python连接mysql"></a> Python连接MySQL</h4>
<h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4>
<p>研究中~~~~</p>
<ol>
<li>datediff(日期1, 日期2)： 得到的结果是日期1与日期2相差的天数。 如果日期1比日期2大，结果为正；如果日期1比日期2小，结果为负。</li>
<li><strong>having和group by必须一起使用</strong></li>
<li><code>!=</code>连用，无空格</li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>基础算法(c++)</title>
    <url>/2023/01/29/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>写在前面：这是一份<strong>还不完善</strong>的笔记，<strong>参考了acwing中yxc大大算法思想</strong>，日后还会提供更加详细的图片解释*（小白hexo摸索中）*以及更加清晰的代码解释，蒟蒻一枚~</p>
<span id="more"></span>
<h2 id="快排模板"><a class="markdownIt-Anchor" href="#快排模板"></a> 快排模板</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//虽然实际应用直接使用&quot;#include&lt;algorithm&gt; + sort(a,a+n,cmp)&quot;</span></span><br><span class="line"><span class="comment">//但是快排中所用的“递归分治思想”应用广泛</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">( <span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r)</span><span class="comment">//注意参数的选取</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;<span class="comment">//结束递归</span></span><br><span class="line">	<span class="type">int</span> i= l<span class="number">-1</span>,j= r+<span class="number">1</span>,x=a[ (l+r) /<span class="number">2</span>]; <span class="comment">//每次选取中间点为基准数（可更改）但注意边界问题</span></span><br><span class="line">    <span class="comment">//并且以下使用的是do-while循环，故先让i，j往两边各自移动一格</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">&#123;   <span class="keyword">do</span> i++;  <span class="keyword">while</span> (a[i]&lt;x) ;<span class="comment">//让i停在左侧第一个大于x的数上</span></span><br><span class="line">	<span class="keyword">do</span> j--;  <span class="keyword">while</span> (a[j]&gt;x) ;<span class="comment">//让j停在右侧第一个小于x的数上</span></span><br><span class="line">	<span class="keyword">if</span>(i&lt;j)  <span class="built_in">swap</span>(a[i],a[j])<span class="comment">//交换left与right</span></span><br><span class="line">&#125;<span class="comment">//当i与j相遇时，所对应的数不一定为x，但left&lt;=x，right&gt;=x</span></span><br><span class="line">    <span class="built_in">quicksort</span>(a, l, j) ;</span><br><span class="line">	<span class="built_in">quicksort</span>(a, j+<span class="number">1</span>, r) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">quicksort</span>( a, <span class="number">0</span>, n<span class="number">-1</span>);<span class="comment">//递归处理0到n-1的数</span></span><br><span class="line">	<span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第k个数快排例题"><a class="markdownIt-Anchor" href="#第k个数快排例题"></a> 第k个数（快排例题）</h3>
<p>​	<strong>给定一个长度为 n的整数数列，以及一个整数 k，请用快速选择算法求出数列从小到大排序后的第 k 个数。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">krd</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span><span class="comment">//注意参数k的变化即可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> a[l];</span><br><span class="line">	<span class="type">int</span> x = a[ (l + r)/<span class="number">2</span>], i = l<span class="number">-1</span> ,j = r+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i&lt;j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> i++; <span class="keyword">while</span> (a[i]&lt;x);</span><br><span class="line">		<span class="keyword">do</span> j--; <span class="keyword">while</span> (a[j]&gt;x);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;j) <span class="built_in">swap</span> (a[i],a[j]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sl= j - l +<span class="number">1</span>;<span class="comment">//sl为相遇点到头的距离</span></span><br><span class="line">	<span class="keyword">if</span>(k&lt;=sl) <span class="keyword">return</span> <span class="built_in">krd</span>(l,j,k);</span><br><span class="line">    <span class="comment">//若k&lt;=sl,左侧点每一个数都小于右侧点，则k必在相遇点左侧，并且为第k-0个数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">krd</span>(j+<span class="number">1</span>,r,k-sl) ;</span><br><span class="line">    <span class="comment">//若k&gt;=sl,右侧点每一个都要大于左侧，则k必在相遇点右侧，并且为第k-sl个数</span></span><br><span class="line">    <span class="comment">//思想：每次舍弃一边进行递归</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) cin&gt;&gt;a[i];</span><br><span class="line">	cout&lt;&lt; <span class="built_in">krd</span>(<span class="number">0</span>,n<span class="number">-1</span>,k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同样的，归并排序最出色的也是它巧妙的递归分治思想</span></span><br><span class="line"><span class="comment">//不同的，快排是先排再分，归并是先分再合</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],temp[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;<span class="comment">//不能再分</span></span><br><span class="line">	<span class="type">int</span> mid =(l+r)/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">mergesort</span>(a,l,mid),<span class="built_in">mergesort</span>(a,mid+<span class="number">1</span>,r);<span class="comment">//核心：拆</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">//双指针算法分别将两端最小值导入temp临时数组</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>,i = l,j = mid+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span>( a[i] &lt; a[j] ) temp [k++] = a [i++] ;</span><br><span class="line">    	<span class="keyword">else</span> temp [k++] = a [j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理剩余的长度</span></span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid) temp [k++]=a [i++];</span><br><span class="line">	<span class="keyword">while</span>(j&lt;=r) temp [k++]=a [j++];</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//将临时数组赋值到原数组</span></span><br><span class="line">	<span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++) a[i]=temp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//个人理解由于temp数组会重复赋值，则不用初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">mergesort</span>(a,<span class="number">0</span>,n<span class="number">-1</span>);<span class="comment">//递归处理</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="逆序对的数量归并排序例题"><a class="markdownIt-Anchor" href="#逆序对的数量归并排序例题"></a> 逆序对的数量（归并排序例题）</h3>
<p>给定一个长度为 n的整数数列，请你计算数列中的逆序对的数量。</p>
<p>逆序对的定义如下：对于数列的第 i 个和第 j个元素，如果满足 i&lt;j 且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p>
<p>此外，存在<code>l&lt;=mid&lt;=r</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以理解排序就是消除逆序对的算法</span></span><br><span class="line"><span class="comment">//当数组倒序时逆序对最多，即若原数组为n，n-1，n-2...1；</span></span><br><span class="line"><span class="comment">//则逆序对数量为（n-1+n-1+...+1+0)=(n*(n-1))/2大概就是5e9的样子，所以res要开long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;<span class="comment">//long long重命名 </span></span><br><span class="line"><span class="type">int</span> a [N] ,n,temp[N];</span><br><span class="line"><span class="function">LL <span class="title">mergesort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>( l&gt;=r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid=( l+r )/<span class="number">2</span>;</span><br><span class="line">	LL res=<span class="built_in">mergesort</span>( l,mid )+<span class="built_in">mergesort</span>( mid+<span class="number">1</span>,r );<span class="comment">//将左侧的逆序对加上右侧的逆序对</span></span><br><span class="line">	<span class="type">int</span> k=<span class="number">0</span>, i=l, j=mid+<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>( i&lt;=mid &amp;&amp; j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[ i ]&lt;=a[ j ]) temp[ k++]=a[ i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			temp[ k++]=a[ j++];</span><br><span class="line">			res+=mid -i+<span class="number">1</span>;<span class="comment">//若a[i]&gt;a[j],则(i~mid)的数都可以与此时的j构成逆序对</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">while</span>( i&lt;=mid ) temp [ k++]=a [ i++];</span><br><span class="line">	<span class="keyword">while</span>( j&lt;=r ) temp[k++]=a[j++];</span><br><span class="line">	<span class="keyword">for</span>( i=l, j=<span class="number">0</span> ; i&lt;=r ;i++, j++) a [ i ]= temp [ j ] ;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	cout&lt;&lt;<span class="built_in">mergesort</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数的范围二分例题"><a class="markdownIt-Anchor" href="#数的范围二分例题"></a> 数的范围（二分例题)</h2>
<p>给定一个<strong>按照升序排列的长度为 n</strong>的整数数组，以及 q 个查询。</p>
<p>对于每个查询，返回一个元素 k的起始位置和终止位置（位置从 <code>0 0</code> 开始计数）。</p>
<p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此算法为整数二分查找</span></span><br><span class="line"><span class="comment">//注意！！！！要升序！！！</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,mid;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">while</span>(k--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,x=<span class="number">0</span>;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r)<span class="comment">//查找靠左的x</span></span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)/<span class="number">2</span>;<span class="comment">//每次会偏向l</span></span><br><span class="line">			<span class="keyword">if</span>(x&lt;=a[mid]) r=mid;</span><br><span class="line">			<span class="keyword">else</span> l=mid+<span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//若x不存在，则l为第一个大于等于x的数的下标值</span></span><br><span class="line"><span class="comment">//对此我的理解是：先假设x为5，若最后锁定在4 6之间（最后一定会锁定在一个小于x的数和一个大于x的数之间，边界另外讨论），由于mid偏向l的原因，a[mid]&lt;x,则l=1，最后指向6;</span></span><br><span class="line"><span class="comment">//更加简便的方式理解：当x！=a[mid]时，l=mid+1，从而指向&gt;x的第一个整数</span></span><br><span class="line">	<span class="keyword">if</span>(a[l]!=x) cout&lt;&lt;<span class="string">&quot;-1 -1&quot;</span>&lt;&lt;endl;<span class="comment">//若第一次查找都没有，则该数不存在于该数组</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r)<span class="comment">//查找靠右的x</span></span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r+<span class="number">1</span>)/<span class="number">2</span>;<span class="comment">//每次偏向时会偏向r</span></span><br><span class="line">			<span class="keyword">if</span>(x&gt;=a[mid]) l=mid;</span><br><span class="line">			<span class="keyword">else</span> r=mid<span class="number">-1</span>; <span class="comment">//不减1会死循环</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//同上可得，若此处绕过“-1 -1”输出，则l为第一个小于等于x的数的下标值</span></span><br><span class="line"><span class="comment">//当x！=a[mid]时，r=mid-1，从而指向&lt;x的第一个整数</span></span><br><span class="line">        </span><br><span class="line">		cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数的3次方根二分例题"><a class="markdownIt-Anchor" href="#数的3次方根二分例题"></a> 数的3次方根(二分例题)</h3>
<p>给定一个浮点数 n，求它的三次方根。（保留6位小数）</p>
<p>−10000≤n≤10000</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处为浮点数的二分</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;n);</span><br><span class="line">	<span class="type">double</span> l=<span class="number">-10000</span>,r=<span class="number">10000</span>;<span class="comment">//题中所给范围即为查找范围</span></span><br><span class="line">	<span class="keyword">while</span>(r-l&gt;<span class="number">1e-8</span>)<span class="comment">//一般为比精确值高两位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(mid*mid*mid&gt;=n) r=mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,l);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度"><a class="markdownIt-Anchor" href="#高精度"></a> 高精度</h2>
<h3 id="高精度加法"><a class="markdownIt-Anchor" href="#高精度加法"></a> 高精度加法</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A,B,C;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>()||i&lt;B.<span class="built_in">size</span>();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;A.<span class="built_in">size</span>()) t+=A[i];</span><br><span class="line">		<span class="keyword">if</span>(i&lt;B.<span class="built_in">size</span>()) t+=B[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">		t/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);<span class="comment">//因为是加法，所以最多进1</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//将a，b以字符串的形式读入后再转化到vector容器中倒序存储</span></span><br><span class="line">    <span class="comment">//倒序是为了方便进位</span></span><br><span class="line">	string a,b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=b.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) B.<span class="built_in">push_back</span>(b[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	C=<span class="built_in">add</span>(A,B);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度减法"><a class="markdownIt-Anchor" href="#高精度减法"></a> 高精度减法</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cmp函数用于判断A,B大小，若A&gt;B,输出(A-B),若A&lt;B,输出-(B-A)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(A.<span class="built_in">size</span>()!=B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>()&gt;B.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i=A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(A[i]!=B[i]) <span class="keyword">return</span> A[i]&gt;B[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//t可以看作中间变量</span></span><br><span class="line">        t=A[i]-t;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;B.<span class="built_in">size</span>()) t-=B[i];</span><br><span class="line">        <span class="comment">//若t&lt;0,则要退位</span></span><br><span class="line">        <span class="comment">//（t+10）%10为一种巧妙做法，若t&gt;0,则值为t，若t&lt;0,则为(10-t)</span></span><br><span class="line">		C.<span class="built_in">push_back</span>((t+<span class="number">10</span>)%<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(t&lt;<span class="number">0</span>) t=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> t=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">	<span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A,B,C;</span><br><span class="line">	string a,b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=b.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) B.<span class="built_in">push_back</span>(b[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">cmp</span>(A,B)) </span><br><span class="line">	&#123;</span><br><span class="line">		C=<span class="built_in">sub</span>(A,B);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		C=<span class="built_in">sub</span>(B,A);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度乘法高精度乘以单精度"><a class="markdownIt-Anchor" href="#高精度乘法高精度乘以单精度"></a> 高精度乘法（高精度乘以单精度）</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>()||t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;A.<span class="built_in">size</span>()) t+=A[i]*b;</span><br><span class="line">		C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">		t/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A,C;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	 <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//乘法一般不会有前导0，除非其中一个数为0</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	C=<span class="built_in">mul</span>(A,b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度乘法高精度乘以高精度"><a class="markdownIt-Anchor" href="#高精度乘法高精度乘以高精度"></a> 高精度乘法（高精度乘以高精度）</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; A,B,C;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="comment">//先计算再进位，较为稳妥</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A,vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;B.size;j++)</span><br><span class="line">            c[i+j+<span class="number">1</span>]+=A[i]*B[j];<span class="comment">//错位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=A.size+B.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]&gt;<span class="number">9</span>) c[i+<span class="number">1</span>]+=c[i]/<span class="number">10</span>;</span><br><span class="line">        C.<span class="built_in">push_back</span>(c[i]%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度除法"><a class="markdownIt-Anchor" href="#高精度除法"></a> 高精度除法</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,<span class="type">int</span> b,<span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">//为从高位开始算</span></span><br><span class="line">	&#123;</span><br><span class="line">		r=r*<span class="number">10</span>+A[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>(r/b);</span><br><span class="line">		r%=b;<span class="comment">//r为余数</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//注意除法得到的结果为正序，需要reverse</span></span><br><span class="line">	<span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(),C.<span class="built_in">end</span>());<span class="comment">//</span></span><br><span class="line">	<span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A,C;</span><br><span class="line">	<span class="type">int</span> b,r=<span class="number">0</span>;</span><br><span class="line">	string a;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	C=<span class="built_in">div</span>(A,b,r);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) cout&lt;&lt;C[i];</span><br><span class="line">	cout&lt;&lt;endl&lt;&lt;r;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前缀与差分"><a class="markdownIt-Anchor" href="#前缀与差分"></a> 前缀与差分</h2>
<h3 id="一维前缀和"><a class="markdownIt-Anchor" href="#一维前缀和"></a> 一维前缀和</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="comment">//构造前缀和数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">//输出l，r一段区间的和</span></span><br><span class="line">		<span class="type">int</span> l,r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[r]-s[l<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二维前缀和"><a class="markdownIt-Anchor" href="#二维前缀和"></a> 二维前缀和</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],s[N][N];</span><br><span class="line"><span class="type">int</span> m,n,q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="comment">//前缀和从1开始读入</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) </span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="comment">//构造前缀和数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) </span><br><span class="line">			s[i][j]=s[i<span class="number">-1</span>][j]+s[i][j<span class="number">-1</span>]-s[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">	<span class="comment">//利用前缀和数组o(1)计算在矩阵(x1,y1,x2,y2)中的和</span></span><br><span class="line">	<span class="keyword">while</span>(q--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">		cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[x2][y2]-s[x1<span class="number">-1</span>][y2]-s[x2][y1<span class="number">-1</span>]+s[x1<span class="number">-1</span>][y1<span class="number">-1</span>]);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,n,l,r,c;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	b[l]+=c;</span><br><span class="line">	b[r+<span class="number">1</span>]-=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="comment">//插入操作（初始化）</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">insert</span>(i,i,a[i]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class="line">		<span class="built_in">insert</span>(l,r,c);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//求差分数组的前缀和即得到原数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="矩阵差分"><a class="markdownIt-Anchor" href="#矩阵差分"></a> 矩阵差分</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],b[N][N];</span><br><span class="line"><span class="type">int</span> x1,y1,x2,y2,c;</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	b[x1][y1]+=c;</span><br><span class="line">	b[x2+<span class="number">1</span>][y1]-=c;</span><br><span class="line">	b[x1][y2+<span class="number">1</span>]-=c;</span><br><span class="line">	b[x2+<span class="number">1</span>][y2+<span class="number">1</span>]+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">	  		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="comment">//同理插入操作</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">	 		<span class="built_in">insert</span>(i,j,i,j,a[i][j]);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">while</span>(q--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</span><br><span class="line">		<span class="built_in">insert</span>(x1,y1,x2,y2,c);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//求二维前缀和</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            b[i][j]+=b[i<span class="number">-1</span>][j]+b[i][j<span class="number">-1</span>]-b[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双指针算法"><a class="markdownIt-Anchor" href="#双指针算法"></a> 双指针算法</h2>
<h3 id="分隔字符串"><a class="markdownIt-Anchor" href="#分隔字符串"></a> 分隔字符串</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">1000</span>];</span><br><span class="line">	<span class="built_in">gets</span>(str);</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">strlen</span>(str);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j=i;</span><br><span class="line">		<span class="keyword">while</span>(j&lt;n&amp;&amp;str[j]!=<span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++) cout&lt;&lt;str[k];</span><br><span class="line">		cout&lt;&lt;endl ;</span><br><span class="line">		i=j;<span class="comment">//更新区间</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长连续不重复子序列"><a class="markdownIt-Anchor" href="#最长连续不重复子序列"></a> 最长连续不重复子序列</h3>
<p>给定一个长度为 n的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="type">int</span> res,j;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="comment">//桶排序思想</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">	&#123;</span><br><span class="line">		s[a[i]]++;</span><br><span class="line">		<span class="keyword">while</span>(j&lt;=i&amp;&amp;s[a[i]]&gt;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			s[a[j]]--;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		res=<span class="built_in">max</span>(res,i-j+<span class="number">1</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组元素的目标和"><a class="markdownIt-Anchor" href="#数组元素的目标和"></a> 数组元素的目标和</h3>
<p>给定两个升序排序的<strong>有序数组</strong> A 和 B，以及一个目标值 x。</p>
<p>数组下标从 <code>0 0</code> 开始。</p>
<p>请你求出满足 A[i]+B[j]=x的数对 (i,j)。</p>
<p>数据保证有唯一解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x,j;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=m<span class="number">-1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;a[i]+b[j]&gt;x) j--;</span><br><span class="line">        <span class="comment">//整个过程中j单调递减</span></span><br><span class="line">		<span class="keyword">if</span>(a[i]+b[j]==x) 	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断子序列"><a class="markdownIt-Anchor" href="#判断子序列"></a> 判断子序列</h3>
<p>给定一个长度为 n 的整数序列 a1,a2,…,an1,an2,…, 以及一个长度为 m 的整数序列 b1,b2,…,bm1,2,…,。</p>
<p>请你判断 a 序列是否为 b序列的子序列。</p>
<p>子序列指序列的一部分项按<strong>原有次序排列</strong>而得的序列，例如序列 {a1,a3,a5}{1,3,5} 是序列 {a1,a2,a3,a4,a5}{1,2,3,4,5} 的一个子序列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> n,m,j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class="line">	j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) </span><br><span class="line">        <span class="keyword">if</span>(b[i]==a[j]) </span><br><span class="line">		&#123;</span><br><span class="line">			j++;</span><br><span class="line">			<span class="keyword">if</span>(j==n) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(j==n) <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二进制中1的个数"><a class="markdownIt-Anchor" href="#二进制中1的个数"></a> 二进制中1的个数</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  关于lowbit原理</span></span><br><span class="line"><span class="comment">//  x&amp;（-x）=x&amp;（~x+1）</span></span><br><span class="line"><span class="comment">//        x=10100</span></span><br><span class="line"><span class="comment">//       ~x=01011</span></span><br><span class="line"><span class="comment">//     ~x+1=01100</span></span><br><span class="line"><span class="comment">// x&amp;(~x+1)=00100</span></span><br><span class="line">即寻找到了最后一位<span class="number">1</span>；</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(x) x-=<span class="built_in">lowbit</span>(x),res++;</span><br><span class="line">		cout&lt;&lt;res&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="离散化区间和"><a class="markdownIt-Anchor" href="#离散化区间和"></a> 离散化(区间和)</h2>
<p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 <code>0 0</code>。</p>
<p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。</p>
<p>接下来，进行 m 次询问，每个询问包含两个整数 l和 r，你需要求出在区间<code> [l r]</code> 之间的所有数的和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有一种说法是离散化是有序的哈希表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> x,c,l,r;</span><br><span class="line"><span class="comment">//alls存储所有要用到的下标，x/l/r</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"><span class="comment">// nums类型存储(l,r)数对 adds类型存储(x,c)数对</span></span><br><span class="line">vector&lt;PII&gt; nums,adds;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,r=alls.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(alls[mid]&gt;=x) r=mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;c;</span><br><span class="line">		alls.<span class="built_in">push_back</span>(x);</span><br><span class="line">		adds.<span class="built_in">push_back</span>(&#123;x,c&#125;);		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">		alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">		nums.<span class="built_in">push_back</span>(&#123;l,r&#125;);	</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//去重</span></span><br><span class="line">    alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item:adds)</span><br><span class="line">	&#123;</span><br><span class="line">		a[<span class="built_in">find</span>(item.first)]+=item.second;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//构造前缀和数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=alls.<span class="built_in">size</span>();i++) s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	<span class="comment">//输出对应区间的值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item:nums)</span><br><span class="line">	&#123;</span><br><span class="line">		l=<span class="built_in">find</span>(item.first);</span><br><span class="line">		r=<span class="built_in">find</span>(item.second);</span><br><span class="line">		cout&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区间合并"><a class="markdownIt-Anchor" href="#区间合并"></a> 区间合并</h2>
<p>给定 n个区间 <code>li ri</code>，要求合并所有有交集的区间。</p>
<p>注意如果在端点处相交，也算有交集。</p>
<p>输出合并完成后的区间个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line">vector&lt;PII&gt; a;<span class="comment">//nums类型存储(l,r)数对</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt;&amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;PII&gt; res;</span><br><span class="line">    <span class="comment">//默认按照l的大小排序</span></span><br><span class="line">	<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> st=<span class="number">-2e9</span>,ed=<span class="number">-2e9</span>;</span><br><span class="line">    <span class="comment">//共三种情况（见图片）</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> item:a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ed&lt;item.first)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(item.first!=<span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st,ed&#125;);</span><br><span class="line">			st=item.first,ed=item.second;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> ed=<span class="built_in">max</span>(item.second,ed);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(st!=<span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st,ed&#125;);</span><br><span class="line">	a=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l,r;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		a.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">		<span class="built_in">merge</span>(a);	</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;a.<span class="built_in">size</span>()<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第一期(C语言简洁版)</title>
    <url>/2023/01/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(C%E8%AF%AD%E8%A8%80%E7%AE%80%E6%B4%81%E7%89%88)/</url>
    <content><![CDATA[<p>更新中....</p>
<p>均有完整代码，应试用，借鉴了浙江大学<code>mooc</code>网课，这里附上链接<a href="https://www.icourse163.org/course/ZJU-93001">数据结构_浙江大学_中国大学MOOC(慕课) (icourse163.org)</a></p>
<span id="more"></span>
<h1 id="数据结构第一期c语言简洁版"><a class="markdownIt-Anchor" href="#数据结构第一期c语言简洁版"></a> 数据结构第一期(C语言简洁版)</h1>
<p>算法的时间复杂度</p>
<h1 id="线性表链表栈队列"><a class="markdownIt-Anchor" href="#线性表链表栈队列"></a> 线性表/链表/栈/队列</h1>
<h2 id="线性表"><a class="markdownIt-Anchor" href="#线性表"></a> 线性表</h2>
<p>类似于自带长度的一种数组, <code>P-&gt;last</code>与从<code>0</code>开始的数组元素下标保持一致</p>
<p>地址计算方法<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">LOC(a_i)=LOC(a_i)+(i-1)*c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span></p>
<img src="file:///C:\Users\35226\Documents\Tencent Files\3522696647\Image\C2C\Image2\08DCC1789BA54C23F6331D90B4E55F6F.png" alt="img" style="zoom: 67%;" />
<h3 id="定义及初始化"><a class="markdownIt-Anchor" href="#定义及初始化"></a> 定义及初始化</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">List</span>;</span><span class="comment">//将&quot;Node *&quot;重命名为List</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> Data[N];</span><br><span class="line">	<span class="type">int</span> last;<span class="comment">//data[last]为最后一个元素，线性表长度为last+1</span></span><br><span class="line">&#125;;<span class="comment">//单个结构体就是一个线性表</span></span><br><span class="line">List <span class="title function_">Empty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	List L;</span><br><span class="line">	L=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));<span class="comment">//新建一个线性表并分配地址</span></span><br><span class="line">	L-&gt;last=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增"><a class="markdownIt-Anchor" href="#增"></a> 增</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(List L,<span class="type">int</span> x,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">if</span>(L-&gt;last+<span class="number">1</span>==N)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;full\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="comment">//线性表满</span></span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=L-&gt;last+<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">/*L-&gt;last+1即在末尾进行插入,L-&gt;last+2即会出现空元素的情况*/</span></span><br><span class="line">	<span class="keyword">for</span>(j=L-&gt;last;j&gt;=i;j--) L-&gt;Data[j+<span class="number">1</span>]=L-&gt;Data[j];<span class="comment">//全往后一位</span></span><br><span class="line">	L-&gt;Data[i]=x;</span><br><span class="line">	L-&gt;last++;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删"><a class="markdownIt-Anchor" href="#删"></a> 删</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(List L,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;L-&gt;last)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="comment">//删除空元素，引发错误</span></span><br><span class="line">	<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=L-&gt;last;j++) L-&gt;Data[j<span class="number">-1</span>]=L-&gt;Data[j];<span class="comment">//全往前一位</span></span><br><span class="line">	L-&gt;last--;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查"><a class="markdownIt-Anchor" href="#查"></a> 查</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Find</span><span class="params">(List L,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=L-&gt;last&amp;&amp;L-&gt;Data[i]!=x) i++;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;L-&gt;last) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打印以及测试数据"><a class="markdownIt-Anchor" href="#打印以及测试数据"></a> 打印以及测试数据</h3>
<h4 id="打印"><a class="markdownIt-Anchor" href="#打印"></a> 打印</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=L-&gt;last;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L-&gt;Data[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试数据1"><a class="markdownIt-Anchor" href="#测试数据1"></a> 测试数据#1</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List L=empty();</span><br><span class="line">Insert(L,<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">Insert(L,<span class="number">6</span>,<span class="number">0</span>);</span><br><span class="line">Insert(L,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">Insert(L,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">print(L);<span class="comment">//预期结果 1 2 6 3</span></span><br><span class="line">Delete(L,<span class="number">0</span>);</span><br><span class="line">print(L);<span class="comment">//预期结果 2 6 3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Find(L,<span class="number">3</span>));<span class="comment">//预期结果 2</span></span><br></pre></td></tr></table></figure>
<h4 id="测试数据2"><a class="markdownIt-Anchor" href="#测试数据2"></a> 测试数据#2</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List X=Empty();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) Insert(X,i,<span class="number">0</span>); </span><br><span class="line">print(X);</span><br><span class="line">Delete(X,<span class="number">1</span>);</span><br><span class="line">print(X);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Find(X,<span class="number">0</span>)); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*此处不再详解，可以看上述拆分*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">List</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> Data[N];</span><br><span class="line">	<span class="type">int</span> last;</span><br><span class="line">&#125;;</span><br><span class="line">List <span class="title function_">Empty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	List L;</span><br><span class="line">	L=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">	L-&gt;last=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Find</span><span class="params">(List L,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=L-&gt;last&amp;&amp;L-&gt;Data[i]!=x) i++;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;L-&gt;last) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(List L,<span class="type">int</span> x,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">if</span>(L-&gt;last==N<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;full\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=L-&gt;last+<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(j=L-&gt;last;j&gt;=i;j--) L-&gt;Data[j+<span class="number">1</span>]=L-&gt;Data[j];</span><br><span class="line">	L-&gt;Data[i]=x;</span><br><span class="line">	L-&gt;last++;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(List L,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;L-&gt;last)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=L-&gt;last;j++) L-&gt;Data[j<span class="number">-1</span>]=L-&gt;Data[j];</span><br><span class="line">	L-&gt;last--;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=L-&gt;last;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L-&gt;Data[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	List X=Empty();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) Insert(X,i,<span class="number">0</span>); </span><br><span class="line">	print(X);</span><br><span class="line">	Delete(X,<span class="number">1</span>);</span><br><span class="line">	print(X);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Find(X,<span class="number">0</span>)); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h2>
<img src="file:///C:\Users\35226\Documents\Tencent Files\3522696647\Image\C2C\Image2\3D887FAEF2C2D501AC698E1D525F12D4.png" alt="img" style="zoom: 67%;" />
<p>下述代码为不带<strong>head</strong>(头指针)的版本</p>
<p>如果需要带头指针的话只需要第一个头节点不存值就好了(<strong>doge</strong>)</p>
<h3 id="定义与初始化"><a class="markdownIt-Anchor" href="#定义与初始化"></a> 定义与初始化</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	List next;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//以某个值创建链表节点</span></span><br><span class="line">List <span class="title function_">create</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List head=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head-&gt;data=x;</span><br><span class="line">	head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插"><a class="markdownIt-Anchor" href="#插"></a> 插</h3>
<h4 id="尾插"><a class="markdownIt-Anchor" href="#尾插"></a> 尾插</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">inserttail</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List newnode=create(x);<span class="comment">//用上述创建头结点的方式创建一个新的节点</span></span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> newnode;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		List temp=head;</span><br><span class="line">		<span class="keyword">while</span>(temp-&gt;next!=<span class="literal">NULL</span>) temp=temp-&gt;next;<span class="comment">//如果不是尾节点，就跳到下一个，直到尾节点</span></span><br><span class="line">		temp-&gt;next=newnode;</span><br><span class="line">        newnode-&gt;next=null;</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="头插"><a class="markdownIt-Anchor" href="#头插"></a> 头插</h4>
<p>（这里指的是在头结点的后面进行插入）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">inserthead</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List newnode=create(x);</span><br><span class="line">	newnode-&gt;next=head-&gt;next;</span><br><span class="line">	head-&gt;next=newnode;</span><br><span class="line">	newnode-&gt;data=x;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取表长"><a class="markdownIt-Anchor" href="#获取表长"></a> 获取表长</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">len</span><span class="params">(List head)</span></span><br><span class="line">&#123;</span><br><span class="line">    List temp=head;<span class="comment">//备份头指针，防止销毁链表</span></span><br><span class="line">	<span class="keyword">if</span>(temp==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(temp!=<span class="literal">NULL</span>) i++,temp=temp-&gt;next;</span><br><span class="line">		<span class="keyword">return</span> i; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删-2"><a class="markdownIt-Anchor" href="#删-2"></a> 删</h3>
<p>（删除第i个节点）</p>
<p>小提一下删除节点（c语言特供）</p>
<blockquote>
<ol>
<li>停在第i-1个节点上</li>
<li>用temp别名第i个需要删除的节点</li>
<li>让第i-1个节点的下一位等于第i个节点的下一位</li>
<li>释放temp</li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">Delete</span><span class="params">(List head,<span class="type">int</span> ith)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(ith&gt;=len(head)||ith&lt;<span class="number">0</span>)<span class="comment">//注意这里用了上面的函数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> head; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ith==<span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			List temp=head;</span><br><span class="line">			head=head-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(temp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			List temp=head;</span><br><span class="line">			<span class="type">int</span> j=<span class="number">0</span>; </span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;ith<span class="number">-1</span>;j++) temp=temp-&gt;next;<span class="comment">//停在要删除节点的前一个节点</span></span><br><span class="line">			List todelete=temp-&gt;next;</span><br><span class="line">			temp-&gt;next=(temp-&gt;next)-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(todelete);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查-2"><a class="markdownIt-Anchor" href="#查-2"></a> 查</h3>
<p>其实这些都是一个遍历罢了</p>
<h4 id="根据次序查找"><a class="markdownIt-Anchor" href="#根据次序查找"></a> 根据次序查找</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FindByOrder</span><span class="params">(List head,<span class="type">int</span> ith)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(ith&lt;<span class="number">0</span>||ith&gt;=len(head)) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	List temp=head;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;ith;j++) temp=temp-&gt;next;</span><br><span class="line">	<span class="keyword">return</span> temp-&gt;data;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="根据值大小查找"><a class="markdownIt-Anchor" href="#根据值大小查找"></a> 根据值大小查找</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FindByValue</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	List temp=head;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len(head);j++) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;data==x)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> j;</span><br><span class="line">		&#125;</span><br><span class="line">		temp=temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="打印与测试数据"><a class="markdownIt-Anchor" href="#打印与测试数据"></a> 打印与测试数据</h3>
<h4 id="打印-2"><a class="markdownIt-Anchor" href="#打印-2"></a> 打印</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(List head)</span></span><br><span class="line">&#123;</span><br><span class="line">    List temp=head;</span><br><span class="line">	<span class="keyword">while</span>(temp) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,temp-&gt;data);</span><br><span class="line">		temp=temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试数据1-2"><a class="markdownIt-Anchor" href="#测试数据1-2"></a> 测试数据#1</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List test = create(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) test=inserttail(test, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Length of the test list: %d\n&quot;</span>, len(test));</span><br><span class="line">    print(test);</span><br><span class="line">    test=Delete(test, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Length of the test list: %d\n&quot;</span>, len(test));</span><br><span class="line">    print(test);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FindByOrder(test,<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FindByValue(test,<span class="number">6</span>));</span><br></pre></td></tr></table></figure>
<h4 id="测试数据2-2"><a class="markdownIt-Anchor" href="#测试数据2-2"></a> 测试数据#2</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List example = create(<span class="number">7</span>);</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">2</span>; j&lt;<span class="number">15</span>; j+=<span class="number">2</span>) example=inserttail(example, j);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Length of the example list: %d\n&quot;</span>, len(example));</span><br><span class="line">	print(example);</span><br><span class="line">	example=Delete(example, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Length of the example list: %d\n&quot;</span>, len(example));</span><br><span class="line">	print(example);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FindByOrder(example,<span class="number">2</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FindByValue(example,<span class="number">10</span>));</span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span> <span class="number">12</span> <span class="number">14</span></span><br></pre></td></tr></table></figure>
<h3 id="完整代码-2"><a class="markdownIt-Anchor" href="#完整代码-2"></a> 完整代码</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	List next;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//以某个值创建链表 </span></span><br><span class="line">List <span class="title function_">create</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List head=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head-&gt;data=x;</span><br><span class="line">	head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插 </span></span><br><span class="line">List <span class="title function_">inserttail</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List newnode=create(x);</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> newnode;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		List temp=head;</span><br><span class="line">		<span class="keyword">while</span>(temp-&gt;next!=<span class="literal">NULL</span>) temp=temp-&gt;next;</span><br><span class="line">		temp-&gt;next=newnode;</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">List <span class="title function_">inserthead</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List newnode=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	newnode-&gt;next=head-&gt;next;</span><br><span class="line">	head-&gt;next=newnode;</span><br><span class="line">	newnode-&gt;data=x;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取表长</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">len</span><span class="params">(List head)</span></span><br><span class="line">&#123;</span><br><span class="line">    List temp=head;<span class="comment">//备份头指针，防止销毁链表</span></span><br><span class="line">	<span class="keyword">if</span>(temp==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(temp!=<span class="literal">NULL</span>) i++,temp=temp-&gt;next;</span><br><span class="line">		<span class="keyword">return</span> i; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line">List <span class="title function_">Delete</span><span class="params">(List head,<span class="type">int</span> ith)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(ith&gt;=len(head)||ith&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> head; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ith==<span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			List temp=head;</span><br><span class="line">			head=head-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(temp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			List temp=head;</span><br><span class="line">			<span class="type">int</span> j=<span class="number">0</span>; </span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;ith<span class="number">-1</span>;j++) temp=temp-&gt;next;</span><br><span class="line">			List todelete=temp-&gt;next;</span><br><span class="line">			temp-&gt;next=(temp-&gt;next)-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(todelete);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按次序查找结点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindByOrder</span><span class="params">(List head,<span class="type">int</span> ith)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(ith&lt;<span class="number">0</span>||ith&gt;=len(head)) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	List temp=head;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;ith;j++) temp=temp-&gt;next;</span><br><span class="line">	<span class="keyword">return</span> temp-&gt;data;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//按值查找结点 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindByValue</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	List temp=head;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len(head);j++) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;data==x)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> j;</span><br><span class="line">		&#125;</span><br><span class="line">		temp=temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(List head)</span></span><br><span class="line">&#123;</span><br><span class="line">    List temp=head;</span><br><span class="line">	<span class="keyword">while</span>(temp) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,temp-&gt;data);</span><br><span class="line">		temp=temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List example = create(<span class="number">7</span>);</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">2</span>; j&lt;<span class="number">15</span>; j+=<span class="number">2</span>) example=inserttail(example, j);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Length of the example list: %d\n&quot;</span>, len(example));</span><br><span class="line">	print(example);</span><br><span class="line">	example=Delete(example, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Length of the example list: %d\n&quot;</span>, len(example));</span><br><span class="line">	print(example);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FindByOrder(example,<span class="number">2</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FindByValue(example,<span class="number">10</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="静态链表"><a class="markdownIt-Anchor" href="#静态链表"></a> 静态链表</h2>
<p>已通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>c</mi><mi>w</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">acwing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>评测，核心思想是用数组模拟链表，用下标代替指针，评测链接<a href="https://www.acwing.com/problem/content/828/">826. 单链表 - AcWing题库</a></p>
<p>优雅，真的是太优雅了</p>
<p>![img](file:///C:\Users\35226\Documents\Tencent Files\3522696647\Image\C2C\Image2\0FD3F7983DA41A3866C69863A0DF0EF9.png)</p>
<h3 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h3>
<h3 id="增-2"><a class="markdownIt-Anchor" href="#增-2"></a> 增</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head=<span class="number">-1</span>;</span><br><span class="line">	idx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删-3"><a class="markdownIt-Anchor" href="#删-3"></a> 删</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k]=ne[ne[k]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="改"><a class="markdownIt-Anchor" href="#改"></a> 改</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=head;</span><br><span class="line">	head=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在第k个元素后面加元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=ne[k];</span><br><span class="line">	ne[k]=idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环遍历"><a class="markdownIt-Anchor" href="#循环遍历"></a> 循环遍历</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head;i!=<span class="number">-1</span>;i=ne[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="完整代码-3"><a class="markdownIt-Anchor" href="#完整代码-3"></a> 完整代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> idx,head;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> e[N],ne[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head=<span class="number">-1</span>;</span><br><span class="line">	idx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=head;</span><br><span class="line">	head=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=ne[k];</span><br><span class="line">	ne[k]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=head;</span><br><span class="line">	<span class="keyword">while</span>(k--&amp;&amp;x!=<span class="number">-1</span>) x=ne[x];</span><br><span class="line">	<span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k]=ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="built_in">add_to_head</span>(x); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">0</span>) head=ne[head];</span><br><span class="line">            <span class="built_in">remove</span>(k<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k,x;</span><br><span class="line">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">            <span class="built_in">add</span>(k<span class="number">-1</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head;i!=<span class="number">-1</span>;i=ne[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环链表"><a class="markdownIt-Anchor" href="#循环链表"></a> 循环链表</h2>
<p>优点：从哪里开始都可以遍历整个链表</p>
<p>缺点：停止条件不明确容易造成死循环</p>
<p>常见停止条件：<code>p-&gt;next=head</code>,个人觉得自己选取就好了，毕竟这样做优点就丧失了</p>
<img src="file:///C:\Users\35226\Documents\Tencent Files\3522696647\Image\C2C\Image2\B773B868371DABDB353D49F11D12E24D.png" alt="img" style="zoom:67%;" />
<h3 id="循环链表合并操作"><a class="markdownIt-Anchor" href="#循环链表合并操作"></a> 循环链表合并操作</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用尾节点 即rear，并且有rear-&gt;next=head</span></span><br><span class="line">p=rearA-&gt;next;<span class="comment">//把后面随着第二条更改可能会丢失的节点存下来</span></span><br><span class="line">rearA-&gt;next=rearB-&gt;next-&gt;next;</span><br><span class="line">q=rearB-&gt;next;<span class="comment">//把要删除的节点存下来</span></span><br><span class="line">rearB-&gt;next=p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure>
<h2 id="双向链表"><a class="markdownIt-Anchor" href="#双向链表"></a> 双向链表</h2>
<img src="file:///C:\Users\35226\Documents\Tencent Files\3522696647\Image\C2C\Image2\ED03062EC7173D6CFC0F599A7879F44B.png" alt="img" style="zoom:67%;" />
<h3 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">insert</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List newnode=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">	<span class="keyword">if</span>(newnode==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	newnode-&gt;data=x;</span><br><span class="line">	<span class="keyword">if</span>(head-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		newnode-&gt;right=head-&gt;right;</span><br><span class="line">		newnode-&gt;left=head;</span><br><span class="line">		head-&gt;right-&gt;left=newnode;</span><br><span class="line">		head-&gt;right=newnode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		newnode-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">		newnode-&gt;left=head;</span><br><span class="line">		head-&gt;right=newnode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="获取表长-2"><a class="markdownIt-Anchor" href="#获取表长-2"></a> 获取表长</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">len</span><span class="params">(List head)</span></span><br><span class="line">&#123;</span><br><span class="line">	List temp=head;<span class="comment">//备份头指针，防止销毁链表</span></span><br><span class="line">	<span class="keyword">if</span>(temp==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(temp-&gt;right!=<span class="literal">NULL</span>) i++,temp=temp-&gt;right;</span><br><span class="line">		<span class="keyword">return</span> i; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">delet</span><span class="params">(List head,<span class="type">int</span> ith)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(ith&lt;<span class="number">0</span>||ith&gt;=len(head))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	List temp=head;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;ith;j++) temp=temp-&gt;right;</span><br><span class="line">	List op=temp;</span><br><span class="line">	temp-&gt;left-&gt;right=temp-&gt;right;</span><br><span class="line">	temp-&gt;right-&gt;left=temp-&gt;left;</span><br><span class="line">	<span class="built_in">free</span>(op);</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整代码-4"><a class="markdownIt-Anchor" href="#完整代码-4"></a> 完整代码</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	List left;</span><br><span class="line">	List right;	</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//带头结点 </span></span><br><span class="line">List <span class="title function_">Create</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List head=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head-&gt;left=<span class="literal">NULL</span>;</span><br><span class="line">	head-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">	head-&gt;data=x;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">List <span class="title function_">insert</span><span class="params">(List head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	List newnode=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">	<span class="keyword">if</span>(newnode==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed!!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	newnode-&gt;data=x;</span><br><span class="line">	<span class="keyword">if</span>(head-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		newnode-&gt;right=head-&gt;right;</span><br><span class="line">		newnode-&gt;left=head;</span><br><span class="line">		head-&gt;right-&gt;left=newnode;</span><br><span class="line">		head-&gt;right=newnode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		newnode-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">		newnode-&gt;left=head;</span><br><span class="line">		head-&gt;right=newnode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">len</span><span class="params">(List head)</span></span><br><span class="line">&#123;</span><br><span class="line">	List temp=head;<span class="comment">//备份头指针，防止销毁链表</span></span><br><span class="line">	<span class="keyword">if</span>(temp==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(temp-&gt;right!=<span class="literal">NULL</span>) i++,temp=temp-&gt;right;</span><br><span class="line">		<span class="keyword">return</span> i; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">List <span class="title function_">delet</span><span class="params">(List head,<span class="type">int</span> ith)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(ith&lt;<span class="number">0</span>||ith&gt;=len(head))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;illegal\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	List temp=head;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;ith;j++) temp=temp-&gt;right;</span><br><span class="line">	List op=temp;</span><br><span class="line">	temp-&gt;left-&gt;right=temp-&gt;right;</span><br><span class="line">	temp-&gt;right-&gt;left=temp-&gt;left;</span><br><span class="line">	<span class="built_in">free</span>(op);</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	List head = Create(<span class="number">0</span>); <span class="comment">// 创建头结点，数据为0</span></span><br><span class="line">	head = insert(head, <span class="number">1</span>); <span class="comment">// 在头结点后插入节点，数据为1</span></span><br><span class="line">	head = insert(head, <span class="number">2</span>); <span class="comment">// 在头结点后插入节点，数据为2</span></span><br><span class="line">	head = insert(head, <span class="number">3</span>); <span class="comment">// 在头结点后插入节点，数据为3</span></span><br><span class="line">	<span class="comment">// 打印链表</span></span><br><span class="line">	List temp = head;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, temp-&gt;data);</span><br><span class="line">		temp = temp-&gt;right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	head = delet(head, <span class="number">1</span>); <span class="comment">// 删除第1个节点</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印链表</span></span><br><span class="line">	temp = head;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, temp-&gt;data);</span><br><span class="line">		temp = temp-&gt;right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h2>
<img src="C:/Users/35226/AppData/Roaming/Typora/typora-user-images/image-20231001112610692.png" alt="image-20231001112610692" style="zoom:67%;" />
<h3 id="线性表实现版"><a class="markdownIt-Anchor" href="#线性表实现版"></a> 线性表实现版</h3>
<p>顺序栈显然更加贴合栈先进后出的特点，故这里重点放在顺序栈</p>
<h4 id="初始化-2"><a class="markdownIt-Anchor" href="#初始化-2"></a> 初始化</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">	<span class="type">int</span> data[N];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//用第一个数x来建栈 </span></span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> s=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">	s-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="push"><a class="markdownIt-Anchor" href="#push"></a> PUSH</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(s-&gt;top&gt;=N) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;FULL\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;data[++s-&gt;top]=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="pop"><a class="markdownIt-Anchor" href="#pop"></a> POP</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出并返回栈顶元素 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(s-&gt;top==<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;EMPTY\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> x=s-&gt;data[s-&gt;top];</span><br><span class="line">	s-&gt;top--;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试数据"><a class="markdownIt-Anchor" href="#测试数据"></a> 测试数据</h4>
<p>已通过</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span> s1 = create();</span><br><span class="line">    push(s1, <span class="number">10</span>);</span><br><span class="line">    push(s1, <span class="number">20</span>);</span><br><span class="line">    push(s1, <span class="number">30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试数据2</span></span><br><span class="line">    <span class="built_in">stack</span> s2 = create();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        push(s2, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h4 id="完整代码-5"><a class="markdownIt-Anchor" href="#完整代码-5"></a> 完整代码</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">	<span class="type">int</span> data[N];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//用第一个数x来建栈 </span></span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> s=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">	s-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(s-&gt;top&gt;=N<span class="number">-1</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;FULL\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;data[++s-&gt;top]=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//弹出并返回栈顶元素 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(s-&gt;top==<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;EMPTY\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> x=s-&gt;data[s-&gt;top];</span><br><span class="line">	s-&gt;top--;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> s1 = create();</span><br><span class="line">    push(s1, <span class="number">10</span>);</span><br><span class="line">    push(s1, <span class="number">20</span>);</span><br><span class="line">    push(s1, <span class="number">30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试数据2</span></span><br><span class="line">    <span class="built_in">stack</span> s2 = create();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        push(s2, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表实现版"><a class="markdownIt-Anchor" href="#链表实现版"></a> 链表实现版</h3>
<h4 id="初始化-3"><a class="markdownIt-Anchor" href="#初始化-3"></a> 初始化</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="built_in">stack</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">create</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> top=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	<span class="keyword">if</span>(top==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	top-&gt;data=x;</span><br><span class="line">	top-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="push-2"><a class="markdownIt-Anchor" href="#push-2"></a> PUSH</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> top,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> newnode=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	newnode-&gt;data=x;</span><br><span class="line">	newnode-&gt;next=top;</span><br><span class="line">	top=newnode;</span><br><span class="line">	<span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="pop-2"><a class="markdownIt-Anchor" href="#pop-2"></a> POP</h4>
<p>注意，俺在这里调了超级久</p>
<p>因为在函数内部，我们通过解引用 <code>top</code> 来获取原始的栈顶指针，并对其进行修改。所以！！！要用stack*去传递参数，用人话来说就是指向指针的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span>* top)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(*top==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> x=(*top)-&gt;data;</span><br><span class="line">	<span class="built_in">stack</span> temp=(*top);</span><br><span class="line">	(*top)=(*top)-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(temp);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="完整代码-6"><a class="markdownIt-Anchor" href="#完整代码-6"></a> 完整代码</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="built_in">stack</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">create</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> top=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	<span class="keyword">if</span>(top==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	top-&gt;data=x;</span><br><span class="line">	top-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> top,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> newnode=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Node));</span><br><span class="line">	newnode-&gt;data=x;</span><br><span class="line">	newnode-&gt;next=top;</span><br><span class="line">	top=newnode;</span><br><span class="line">	<span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span>* top)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(*top==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> x=(*top)-&gt;data;</span><br><span class="line">	<span class="built_in">stack</span> temp=(*top);</span><br><span class="line">	(*top)=(*top)-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(temp);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span> s1 = create(<span class="number">2</span>);</span><br><span class="line">    s1=push(s1, <span class="number">10</span>);</span><br><span class="line">    s1=push(s1, <span class="number">20</span>);</span><br><span class="line">    s1=push(s1, <span class="number">30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试数据2</span></span><br><span class="line">    <span class="built_in">stack</span> s2 = create(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        s2=push(s2, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(&amp;s2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用递归"><a class="markdownIt-Anchor" href="#应用递归"></a> 应用：递归</h3>
<p>学过java会对栈帧这个概念牢记于心</p>
<h4 id="斐波那契数列"><a class="markdownIt-Anchor" href="#斐波那契数列"></a> 斐波那契数列</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> f(x<span class="number">-1</span>)+f(x<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f(i));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="表达式求值"><a class="markdownIt-Anchor" href="#表达式求值"></a> 表达式求值</h4>
<p>建议大家都可以去acwing上看这道题<a href="https://www.acwing.com/problem/content/3305/">3302. 表达式求值 - AcWing题库</a></p>
<p>这里贴上ac代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; num;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">char</span>&gt; op;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">char</span>,<span class="type">int</span>&gt; h=&#123;&#123;<span class="string">&#x27;+&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;-&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;*&#x27;</span>,<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;/&#x27;</span>,<span class="number">2</span>&#125;&#125;;<span class="comment">//建立字典</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">eval</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=num.top();num.pop();</span><br><span class="line">    <span class="type">int</span> b=num.top();num.pop();</span><br><span class="line">    <span class="type">char</span> p=op.top();op.pop();</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="string">&#x27;+&#x27;</span>) r=b+a;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="string">&#x27;-&#x27;</span>) r=b-a;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="string">&#x27;*&#x27;</span>) r=b*a;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="string">&#x27;/&#x27;</span>) r=b/a;</span><br><span class="line">    num.push(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.size();i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(a[i]))<span class="comment">//如果a[i]是数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="number">0</span>,j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;a.size()&amp;&amp;<span class="built_in">isdigit</span>(a[j])) x=x*<span class="number">10</span>+a[j]-<span class="string">&#x27;0&#x27;</span>,j++;</span><br><span class="line">            num.push(x);</span><br><span class="line">            i=j<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            op.push(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(op.top()!=<span class="string">&#x27;(&#x27;</span>) eval();</span><br><span class="line">            op.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(op.size()&amp;&amp;h[op.top()]&gt;=h[a[i]]) eval();</span><br><span class="line">            op.push(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(op.size()) eval();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num.top()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h2>
]]></content>
      <tags>
        <tag>408</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷被带刷100题第一期</title>
    <url>/2023/07/15/%E6%B4%9B%E8%B0%B7%E8%A2%AB%E5%B8%A6%E5%88%B7100%E9%A2%98%E7%AC%AC%E4%B8%80%E6%9C%9F/</url>
    <content><![CDATA[<p>被鼓励写写题解，在混沌之中简单写写思路，题目数量不定，看到其他平台的也会放上来，不局限与题单</p>
<p>题单链接：<a href="https://www.luogu.com.cn/training/367773#problems">洛谷带刷100题（1~50） - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p>(<span id="more"></span></p>
<h1 id="洛谷被带刷100题1"><a class="markdownIt-Anchor" href="#洛谷被带刷100题1"></a> 洛谷被带刷100题#1</h1>
<h2 id="p1002-过河卒"><a class="markdownIt-Anchor" href="#p1002-过河卒"></a> P1002 过河卒</h2>
<p><code>dp</code>做法：把棋盘向右下移动一格，然后初始化<code>dp[1][1]=1</code>,以及遇到马所在点和马控制点<code>dp[i][j]=0</code>就<code>continue</code>掉，再去更新<code>dp[i][j]=dp[i-1][j]+dp[i][j-1]</code>即可</p>
<p>记得写偏移量数组<code>dx[]=&#123;-2,-1,1,2,2,1,-1,-2,0&#125;,dy[]=&#123;1,2,2,1,-1,-2,-2,-1,0&#125;</code>和开<code>LL</code></p>
<h2 id="p1003-铺地毯"><a class="markdownIt-Anchor" href="#p1003-铺地毯"></a> P1003 铺地毯</h2>
<p>一开始傻啦吧唧的看到就是一个前缀和，但是题目问的是地毯编号，所以从后往前扫一遍就好了</p>
<h2 id="p1008-三连击"><a class="markdownIt-Anchor" href="#p1008-三连击"></a> P1008 三连击</h2>
<p>设<code>x,2*x,3*x</code>再判断是否符合条件</p>
<h2 id="p1028-数的计算"><a class="markdownIt-Anchor" href="#p1028-数的计算"></a> P1028 数的计算</h2>
<p><em>递推</em> 较为简单 初始化<code>f[1]=1</code>(注意不要被更新掉)，若为偶数<code>f[i]=f[i-1]+f[i/2]</code>，若为奇数<code>f[i]=f[i-1]</code></p>
<p><em>记忆化搜索</em>  搜了好久是个啥玩意，感觉跟递推好像，看到网上佬这样描述 <code>dp</code>是一种算法，有记忆化搜索和递推两种表达形式，其中记忆化搜索从上往下，递推从下往上，记忆化搜索其实还是把数存在数组里，用递归的方式，若被更新过就直接取用，若未被更新过就更新,这里贴一下代码，思路跟递推一样的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(f[n]) <span class="keyword">return</span> f[n];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			f[n]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">fun</span>(n<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) f[n]=<span class="built_in">fun</span>(n<span class="number">-1</span>)+<span class="built_in">fun</span>(n/<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="p1029最大公约数和最小公倍数问题"><a class="markdownIt-Anchor" href="#p1029最大公约数和最小公倍数问题"></a> P1029最大公约数和最小公倍数问题</h2>
<p>记得用<code>__gcd(a,b)</code></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析之Numpy</title>
    <url>/2023/07/08/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BNumpy/</url>
    <content><![CDATA[<p>啊，课业要求，顾名思义，就是作业嗷嗷嗷！！<code>Numpy</code>是数据科学的基础吧，所以非常重要呢，<code>matplotlib</code>建议看官方<code>cheat</code>？<code>pandas</code>要好好学呢！！怎样才能凑字数但不被看出来呢？怎样才能凑字数但不被看出来呢？</p>
<span id="more"></span>
<h1 id="numpy知识点总结"><a class="markdownIt-Anchor" href="#numpy知识点总结"></a> Numpy知识点总结</h1>
<h2 id="1关于导入库"><a class="markdownIt-Anchor" href="#1关于导入库"></a> 1.关于导入库</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#最常用</span></span><br><span class="line">n1=np.array(a)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4 5]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span>*</span><br><span class="line">n2=array(a)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4 5]
</code></pre>
<h2 id="2使用numpy创建数组的方法"><a class="markdownIt-Anchor" href="#2使用numpy创建数组的方法"></a> 2.使用Numpy创建数组的方法</h2>
<h3 id="array函数nparray"><a class="markdownIt-Anchor" href="#array函数nparray"></a> array函数(np.array())</h3>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>p</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mo stretchy="false">(</mo><mi>o</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo separator="true">,</mo><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo separator="true">,</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>o</mi><mi>k</mi><mo separator="true">,</mo><mi>n</mi><mi>d</mi><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">numpy.array( object ,dtype ,copy ,order ,subok ,ndmin )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">o</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p>
<p>参数列表:</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">dtype</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span>:数据类型</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>p</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">copy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>:复制的深浅问题</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">order</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>:创建数组的样式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>K</mi><mo separator="true">,</mo><mi>A</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(K,A,C,F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>为行方向,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>为列方向,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>为任意方向
(默认)</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>o</mi><mi>k</mi></mrow><annotation encoding="application/x-tex">subok</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>:如果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">True</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span>,则将传递子类,否则,返回的数组将被强制为基类数组</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>a</mi><mi>m</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">namin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span></span></span></span>:生成数组的最小维数,不足就在外面套方括号</p>
<p><img src="https://www.programsbuzz.com/sites/default/files/inline-images/3D-Banner.jpg" alt="" /></p>
<p><em>引申关于轴的概念(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mi>i</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">axis</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span></span></span></span>)</em></p>
<p>一维数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mi>i</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">axis</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span></span></span></span>=0 (列)</p>
<p>二维数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mi>i</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">axis</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span></span></span></span>=0,1 (行,列)</p>
<p>三维数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mi>i</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">axis</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span></span></span></span>=0,1,2 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>z</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(z,y,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p>
<p>使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>i</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">ndim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span></span></span></span>获取轴数！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dtype示例</span></span><br><span class="line">n2=array(n1,dtype=<span class="built_in">complex</span>)<span class="comment">#将数据类型设置为复数</span></span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[1.+0.j 2.+0.j 3.+0.j 4.+0.j 5.+0.j]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#copy示例</span></span><br><span class="line">n3=np.array(n1,copy=<span class="literal">True</span>)</span><br><span class="line">n4=np.array(n1,copy=<span class="literal">False</span>)<span class="comment">#注意这里是对array对象的复制</span></span><br><span class="line"><span class="comment"># copy的意思是副本，可以理解为&quot;是否创建副本&quot;</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line">n1[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n3) <span class="comment">#copy=True,不会随着改变</span></span><br><span class="line"><span class="built_in">print</span>(n4) <span class="comment">#copy=False,会随着改变</span></span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4 5]
[1 2 3 4 5]
[1 2 3 4 5]
[9 2 3 4 5]
[1 2 3 4 5]
[9 2 3 4 5]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#namin举例</span></span><br><span class="line">n1=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n2=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],ndmin=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[1 2 3 4]
[1 2 3 4]
[[1 2 3 4]]
</code></pre>
<h3 id="特殊类型数组"><a class="markdownIt-Anchor" href="#特殊类型数组"></a> 特殊类型数组</h3>
<p>1.随机数数组(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>e</mi><mi>m</mi><mi>p</mi><mi>t</mi><mi>y</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.empty()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)(可用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">dtype</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span>指定生成类型)</p>
<p>2.全零数组(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>z</mi><mi>e</mi><mi>r</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.zeros()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)(默认浮点型)</p>
<p>3.全一数组(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>s</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.ones()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)(默认浮点型)</p>
<p>4.以指定值填充的数组(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>f</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.full()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<p>5.创建对角矩阵(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>i</mi><mi>a</mi><mi>g</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.diag()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随机数数组 np.empty()</span></span><br><span class="line"><span class="comment">#维数以列表形式输入！</span></span><br><span class="line">n=np.empty([<span class="number">2</span>,<span class="number">3</span>])<span class="comment">#行数+列数</span></span><br><span class="line"><span class="comment"># 默认为浮点数类型</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.empty([<span class="number">4</span>,<span class="number">3</span>],dtype=<span class="built_in">int</span>)<span class="comment">#可通过dtype类型限制</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[0. 0. 0.]
 [0. 0. 0.]]
[[0 0 0]
 [0 0 0]
 [0 0 0]
 [0 0 0]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全零数组 np.zeros()</span></span><br><span class="line"><span class="comment">#维数以列表形式输入！</span></span><br><span class="line">n=np.zeros([<span class="number">4</span>,<span class="number">4</span>])<span class="comment">#行数+列数</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.zeros(<span class="number">4</span>)<span class="comment">#列数</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
[0. 0. 0. 0.]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全一数组 np.ones()</span></span><br><span class="line">n=np.ones([<span class="number">4</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.ones(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
[1. 1. 1. 1.]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#full数组 np.full()</span></span><br><span class="line"><span class="comment">#维数以元组表示</span></span><br><span class="line">n = np.full((<span class="number">3</span>,<span class="number">3</span>), <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment">#若创建相同行元素的矩阵</span></span><br><span class="line">n = np.full((<span class="number">4</span>,<span class="number">5</span>),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[8 8 8]
 [8 8 8]
 [8 8 8]]
[[1 2 3 4 5]
 [1 2 3 4 5]
 [1 2 3 4 5]
 [1 2 3 4 5]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对角矩阵 np.diag([])</span></span><br><span class="line">n=np.diag([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 0 0 0]
 [0 2 0 0]
 [0 0 3 0]
 [0 0 0 4]]
</code></pre>
<h3 id="由数值范围创建数组"><a class="markdownIt-Anchor" href="#由数值范围创建数组"></a> 由数值范围创建数组</h3>
<p>1.由范围(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.arange()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<p>2.等差数列的创建(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.linspace()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<p>3.等比数列的创建(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>s</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.logspace()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由范围 np.arange()</span></span><br><span class="line"><span class="comment"># (起始，终止，步长)</span></span><br><span class="line">n=np.arange(<span class="number">1</span>,<span class="number">12</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[ 1  3  5  7  9 11]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等差数列的创建(np.linspace(起点，终点，步长))</span></span><br><span class="line">n1 = np.linspace(<span class="number">7500</span>,<span class="number">10000</span>,<span class="number">6</span>)</span><br><span class="line">n2 = np.linspace(<span class="number">7500</span>,<span class="number">10000</span>,<span class="number">6</span>,endpoint=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[ 7500.  8000.  8500.  9000.  9500. 10000.]
[7500.         7916.66666667 8333.33333333 8750.         9166.66666667
 9583.33333333]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等比数列的创建 np.logspace()</span></span><br><span class="line">n = np.logspace(<span class="number">0</span>,<span class="number">63</span>,<span class="number">64</span>,base=<span class="number">2</span>,dtype=<span class="string">&#x27;uint64&#x27;</span>)<span class="comment"># 不然会爆int</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(n.reshape(<span class="number">8</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<pre><code>[                  1                   2                   4
                   8                  16                  32
                  64                 128                 256
                 512                1024                2048
                4096                8192               16384
               32768               65536              131072
              262144              524288             1048576
             2097152             4194304             8388608
            16777216            33554432            67108864
           134217728           268435456           536870912
          1073741824          2147483648          4294967296
          8589934592         17179869184         34359738368
         68719476736        137438953472        274877906944
        549755813888       1099511627776       2199023255552
       4398046511104       8796093022208      17592186044416
      35184372088832      70368744177664     140737488355328
     281474976710656     562949953421312    1125899906842624
    2251799813685248    4503599627370496    9007199254740992
   18014398509481984   36028797018963968   72057594037927936
  144115188075855872  288230376151711744  576460752303423488
 1152921504606846976 2305843009213693952 4611686018427387904
 9223372036854775808]
[[                  1                   2                   4
                    8                  16                  32
                   64                 128]
 [                256                 512                1024
                 2048                4096                8192
                16384               32768]
 [              65536              131072              262144
               524288             1048576             2097152
              4194304             8388608]
 [           16777216            33554432            67108864
            134217728           268435456           536870912
           1073741824          2147483648]
 [         4294967296          8589934592         17179869184
          34359738368         68719476736        137438953472
         274877906944        549755813888]
 [      1099511627776       2199023255552       4398046511104
        8796093022208      17592186044416      35184372088832
       70368744177664     140737488355328]
 [    281474976710656     562949953421312    1125899906842624
     2251799813685248    4503599627370496    9007199254740992
    18014398509481984   36028797018963968]
 [  72057594037927936  144115188075855872  288230376151711744
   576460752303423488 1152921504606846976 2305843009213693952
  4611686018427387904 9223372036854775808]]
</code></pre>
<h3 id="随机数组的创建random模块"><a class="markdownIt-Anchor" href="#随机数组的创建random模块"></a> 随机数组的创建(random模块)</h3>
<p>1.创建<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>之间的随机数(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.random.rand()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<p>2.从正态分布中返回随机生成的数组(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.random.randn()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<p>3.生成一定范围内的随机数组(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.random.randint()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<p>4.生成正态分布的随机数(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.random.normal()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord">.</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建0-1之间的随机数</span></span><br><span class="line">n=np.random.rand(<span class="number">5</span>)<span class="comment">#维数</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.random.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[0.96516288 0.24682269 0.66936546 0.85283307 0.47118698]
[[0.59920682 0.40625209 0.18340696 0.90613633]
 [0.10098238 0.0781746  0.02856576 0.85747123]
 [0.47102612 0.38726455 0.4349197  0.63686956]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从正态分布中返回随机生成的数组</span></span><br><span class="line">n=np.random.randn(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.random.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[ 0.74211452 -0.29730306 -1.16421314  1.81939644 -0.68400508]
[[-2.17052662  0.25479841  0.91881829  0.96251497]
 [-0.28614674 -1.8932509   2.58457647 -1.28645721]
 [-0.02763578 -0.15577567 -0.74777201  1.12820765]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一定范围内的随机数组</span></span><br><span class="line"><span class="comment"># 产生的数是正整数！！！</span></span><br><span class="line"><span class="comment"># low: int</span></span><br><span class="line"><span class="comment">#（high = None时，生成的数值要在[0, low)区间内）</span></span><br><span class="line"><span class="comment"># high: int (可选)</span></span><br><span class="line"><span class="comment"># size: int or tuple of ints(可选)</span></span><br><span class="line"><span class="comment"># dtype: dtype(可选)</span></span><br><span class="line">n=np.random.randint(<span class="number">1</span>,<span class="number">5</span>,(<span class="number">2</span>,<span class="number">4</span>))<span class="comment">#1-5左闭右开</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">n=np.random.randint(<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">4</span>))<span class="comment"># 0-5左闭右开</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 1 1 4]
 [3 2 2 3]]
[[0 2 4 1]
 [3 4 3 4]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成正态分布的随机数</span></span><br><span class="line"><span class="comment">#可指定均值，标准差，维数！！</span></span><br><span class="line">n = np.random.normal(<span class="number">0</span>, <span class="number">0.1</span>, (<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#(均值，标准差，维数)</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<pre><code>[[-0.10621183 -0.05465658  0.00068895  0.01082762]
 [-0.09779584  0.1248368  -0.09974623  0.04407646]
 [ 0.03004638 -0.03053372  0.02065726 -0.25012571]]
</code></pre>
<h3 id="根据已有数组创建"><a class="markdownIt-Anchor" href="#根据已有数组创建"></a> 根据已有数组创建</h3>
<p>1.由已有列表创建 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>s</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">asarray()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>2.由已有列表形状创建 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi>e</mi><mi>r</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">zeros</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span></span></span></span>__<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><mi>k</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">like</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span></span></span></span>()/<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>n</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">ones</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span></span></span></span> _ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><mi>k</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">like()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#asarray与array的区别</span></span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>]]</span><br><span class="line">temp = np.array(a)              <span class="comment">#通过列表创建数组</span></span><br><span class="line">n1= np.asarray(temp)</span><br><span class="line">n2= np.array(temp)</span><br><span class="line">n3= np.zeros_like(a)</span><br><span class="line">n4= np.ones_like(a)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line">temp[<span class="number">0</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 2 3]
 [2 4 3]
 [2 8 7]]
[[1 2 3]
 [2 4 3]
 [2 8 7]]
[[0 0 0]
 [0 0 0]
 [0 0 0]]
[[1 1 1]
 [1 1 1]
 [1 1 1]]
[[2 2 2]
 [2 4 3]
 [2 8 7]]
[[1 2 3]
 [2 4 3]
 [2 8 7]]
</code></pre>
<h2 id="3数组属性"><a class="markdownIt-Anchor" href="#3数组属性"></a> 3.数组属性</h2>
<p>1.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>h</mi><mi>a</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">ndarry.shape</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span>  元组形式输出</p>
<p>2.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">ndarry.dtype</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span>  数据类型</p>
<p>3.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">ndarry.size</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span></span></span></span>  数据总个数</p>
<p>4.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">ndarry.ndim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span></span></span></span>  轴数</p>
<p>5.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">ndarry.T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>    转置</p>
<p>6.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>f</mi><mi>l</mi><mi>a</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">ndarry.flat</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span></span></span></span>  压平(并且支持切片压平)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(n.shape)</span><br><span class="line"><span class="built_in">print</span>(n.dtype)</span><br><span class="line"><span class="built_in">print</span>(n.size)</span><br><span class="line"><span class="built_in">print</span>(n.ndim)</span><br><span class="line"><span class="built_in">print</span>(n.T)</span><br><span class="line"><span class="built_in">print</span>(n.flat[<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[-0.10621183 -0.05465658  0.00068895  0.01082762]
 [-0.09779584  0.1248368  -0.09974623  0.04407646]
 [ 0.03004638 -0.03053372  0.02065726 -0.25012571]]
(3, 4)
float64
12
2
[[-0.10621183 -0.09779584  0.03004638]
 [-0.05465658  0.1248368  -0.03053372]
 [ 0.00068895 -0.09974623  0.02065726]
 [ 0.01082762  0.04407646 -0.25012571]]
[-0.05465658  0.00068895]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n5=array(a)</span><br><span class="line"><span class="built_in">print</span>(n5)</span><br><span class="line"><span class="built_in">print</span>(n5.size)</span><br><span class="line"><span class="built_in">print</span>(n5.itemsize)</span><br><span class="line"><span class="built_in">print</span>(n5.nbytes)</span><br><span class="line"><span class="comment">##nbytes=size*itemsize</span></span><br></pre></td></tr></table></figure>
<pre><code>[[1 2 3]
 [2 4 3]
 [2 8 7]]
9
4
36
</code></pre>
<h2 id="4切片与索引"><a class="markdownIt-Anchor" href="#4切片与索引"></a> 4.切片与索引</h2>
<h3 id="普通索引"><a class="markdownIt-Anchor" href="#普通索引"></a> 普通索引</h3>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">ndarray</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 数组可以基于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">len( ndarray ) - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的下标进行索引</p>
<p>切片后,生成一个新的数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array01=np.arange(<span class="number">1</span>,<span class="number">8</span>)</span><br><span class="line">array02=array01[<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array01))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array02))</span><br></pre></td></tr></table></figure>
<pre><code>2416398960272
2416398970640
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二维数组的切片</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(array02[<span class="number">0</span>:<span class="number">2</span>])<span class="comment">#只有一个数字默认为行数进行切片</span></span><br><span class="line"><span class="built_in">print</span>(array02[<span class="number">0</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#索引对象是数字！</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
[[1 2 3 4]
 [5 6 7 8]]
[[2 3]
 [6 7]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多维数组的切片</span></span><br><span class="line"><span class="comment">#数组对象</span></span><br><span class="line"><span class="comment">#[ 页号 , 行号 , 列号 ]</span></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">28</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, :, :])</span><br><span class="line"><span class="comment"># 切出0页</span></span><br><span class="line"><span class="built_in">print</span>(a[:, <span class="number">1</span>, :])</span><br><span class="line"><span class="comment"># 切出所有页的1行，并存到一个列表当中</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, :, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># 切出0页的1列</span></span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br></pre></td></tr></table></figure>
<pre><code>[[[ 1  2  3]
  [ 4  5  6]
  [ 7  8  9]]

 [[10 11 12]
  [13 14 15]
  [16 17 18]]

 [[19 20 21]
  [22 23 24]
  [25 26 27]]]
[[1 2 3]
 [4 5 6]
 [7 8 9]]
[[ 4  5  6]
 [13 14 15]
 [22 23 24]]
[2 5 8]
(3, 3, 3)
</code></pre>
<h3 id="高级索引"><a class="markdownIt-Anchor" href="#高级索引"></a> 高级索引</h3>
<h4 id="整数数组索引"><a class="markdownIt-Anchor" href="#整数数组索引"></a> 整数数组索引</h4>
<p>元素下标一一对应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一种整数索引</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]<span class="comment">#索引对象是列表</span></span><br><span class="line"><span class="comment"># (0,0)(1,1)(2,0)</span></span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3]
 [ 5  6  7]
 [ 9 10 11]
 [12 13 14]
 [15 16 17]]
[1 6 9]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第二种整数索引</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">rows=np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]])</span><br><span class="line">cols=np.array([[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line"><span class="comment"># (0,0)(0,2)(1,1)</span></span><br><span class="line"><span class="comment">#(1,1)(2,0)(2,2)</span></span><br><span class="line">b=array02[rows,cols]</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3]
 [ 5  6  7]
 [ 9 10 11]]
[[ 1  3  6]
 [ 6  9 11]]
</code></pre>
<h4 id="布尔运算"><a class="markdownIt-Anchor" href="#布尔运算"></a> 布尔运算</h4>
<p>把所有符合条件的数生成一维数组(类似于筛选，即列表生成式)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[array02&gt;<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[ 3  5  6  7  9 10 11]
</code></pre>
<h4 id="花式索引"><a class="markdownIt-Anchor" href="#花式索引"></a> 花式索引</h4>
<p>利用整数数组进行索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一维数组</span></span><br><span class="line">list02=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[ 6  3  2 10]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二维数组</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1  2  3]
 [ 9 10 11]
 [ 5  6  7]
 [12 13 14]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[ 2  9  7 13]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多个索引数组</span></span><br><span class="line"><span class="comment">#按照笛卡尔积顺序</span></span><br><span class="line">list02=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">array02=np.array(list02)</span><br><span class="line">b=array02[np.ix_([<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>])]</span><br><span class="line"><span class="comment">#(0,1)(0,0)(0,2)(0,1)</span></span><br><span class="line"><span class="comment">#(2,1)(2,0)(2,2)(2,1)</span></span><br><span class="line"><span class="comment">#(1,1)(1,0)(1,2)(1,1)</span></span><br><span class="line"><span class="comment">#(3,1)(3,0)(3,2)(3,1)</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 2  1  3  2]
 [10  9 11 10]
 [ 6  5  7  6]
 [13 12 14 13]]
</code></pre>
<h2 id="5数组操作"><a class="markdownIt-Anchor" href="#5数组操作"></a> 5.数组操作</h2>
<p>1.数组形状修改 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>h</mi><mi>a</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>f</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>h</mi><mi>a</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">np.shape()/np.resize()/naddary.flatten()/ndarray.reshape()/np.ravel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span></p>
<p>2.数组数值修改 (索引切片方式)</p>
<p>3.添加/删除/裁剪 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>l</mi><mi>i</mi><mi>p</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.append()/np.insert()//np.delete()/np.clip()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>4.数组去重 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>p</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>u</mi><mi>n</mi><mi>i</mi><mi>q</mi><mi>u</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">numpy.unique()/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span></span></span></span></p>
<p>5.裁剪数组元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>l</mi><mi>i</mi><mi>p</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.clip()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>6.行列交换操作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo stretchy="false">[</mo><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mo>:</mo><mo stretchy="false">]</mo><mo>=</mo><mi>t</mi><mo stretchy="false">[</mo><mo stretchy="false">[</mo><mi>y</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mo>:</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">t[[x,y],:]=t[[y,x],:]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span></span></span></span></p>
<p>7.数组转置 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">ndarray.T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></p>
<p>8.迭代数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">for</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></p>
<p>9.连接数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.concatenate()/np.stack()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>10.数组分割 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.split()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组形状修改之就地变维 np.shape=()/np.resize()</span></span><br><span class="line">n1=np.arange(<span class="number">0</span>,<span class="number">20</span>).reshape(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1.shape=(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n1.resize(<span class="number">2</span>,<span class="number">10</span>))<span class="comment">#更改n1后返回值为None</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
None
[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组形状修改之复制变维 naddary.flatten()</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n2=n1.flatten()</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="comment">#此外，还有类似的操作</span></span><br><span class="line"><span class="built_in">print</span>(n1.flat)</span><br><span class="line"><span class="built_in">print</span>(n1.flat[<span class="number">2</span>:<span class="number">6</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]
&lt;numpy.flatiter object at 0x000002329C09E390&gt;
[2 3 4 5]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组形状修改之视图变维 naddary.reshape()/np.ravel</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n1.reshape(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(np.ravel(n1,order=<span class="string">&quot;C&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(np.ravel(n1,order=<span class="string">&quot;F&quot;</span>))<span class="comment">#返回副本并不对n1进行改变</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]]
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]
[ 0 10  1 11  2 12  3 13  4 14  5 15  6 16  7 17  8 18  9 19]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组数值修改(通过索引切片)</span></span><br><span class="line">n1=np.arange(<span class="number">24</span>).reshape(<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[<span class="number">0</span>,:]=<span class="number">0</span> <span class="comment">#把第0行改成0</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[:,<span class="number">1</span>]=<span class="number">0</span> <span class="comment">#修改第0列为0</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[<span class="number">1</span>:<span class="number">3</span>,:]=<span class="number">0</span><span class="comment">#修改多行</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[:,<span class="number">2</span>:<span class="number">5</span>]=<span class="number">0</span> <span class="comment">#修改多列</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n1[[<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">0</span>]]=<span class="number">0</span> <span class="comment">#修改点</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 6  0  8  9 10 11]
 [12  0 14 15 16 17]
 [18  0 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [18  0 20 21 22 23]]
[[ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [ 0  0  0  0  0  0]
 [18  0  0  0  0 23]]
[[0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组的添加 np.append()</span></span><br><span class="line"><span class="comment">#一维添加</span></span><br><span class="line">array01 = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="comment"># 加单个数字就展开</span></span><br><span class="line">array02=np.append(array01,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="comment"># 若不同维，则必须相同shape,此时即可指定维数(axis=?)</span></span><br><span class="line">array02=np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">array03=np.append(array01,array02,axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line">array03=np.append(array01,array02,axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3]
 [4 5 6 7]]
[ 0  1  2  3  4  5  6  7 20]
[[0 1 2 3]
 [4 5 6 7]
 [0 1 2 3]
 [4 5 6 7]]
[[0 1 2 3 0 1 2 3]
 [4 5 6 7 4 5 6 7]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加数组元素 insert()</span></span><br><span class="line"><span class="comment">#相比append条件更加宽松</span></span><br><span class="line">array01 = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">array02=np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">array03=np.insert(array01,<span class="number">1</span>,array02,axis=<span class="number">0</span>)<span class="comment">#axis=0时为按行插入，要求行数相同</span></span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line">array02=np.arange(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">array03=np.insert(array01,<span class="number">2</span>,array02,axis=<span class="number">1</span>)<span class="comment">#axis=1时为按列插入，要求列数相同</span></span><br><span class="line"><span class="built_in">print</span>(array03)</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3]
 [4 5 6 7]]
[[0 1 2 3]
 [0 1 2 3]
 [4 5 6 7]]
[[0 1 2 3]
 [4 5 6 7]]
[[0 1 0 2 3]
 [4 5 1 6 7]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1=np.arange(<span class="number">0</span>,<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">arr=np.delete(n1,[<span class="number">2</span>,<span class="number">4</span>])<span class="comment">#展开后删除对应下标元素</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">arr=np.delete(n1,<span class="number">1</span>,axis=<span class="number">0</span>)<span class="comment">#删除一行</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="comment"># 注意！二维数组删完以后仍然是二维数组！</span></span><br><span class="line">arr=np.delete(n1,<span class="number">2</span>,axis=<span class="number">1</span>)<span class="comment">#删除一列</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3 4]
 [5 6 7 8 9]]
[0 1 3 5 6 7 8 9]
[[0 1 2 3 4]]
[[0 1 3 4]
 [5 6 8 9]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组元素去重</span></span><br><span class="line"><span class="comment"># numpy.unique(arr, return_index=False, return_inverse=False,return_counts=False, axis=None)</span></span><br><span class="line"><span class="comment"># return_index：   如果为True，返回新列表元素在旧列表中的位置（下标），并以列表形式储</span></span><br><span class="line"><span class="comment"># return_inverse：如果为True，返回旧列表元素在新列表中的位置（下标），并以列表形式储</span></span><br><span class="line"><span class="comment"># return_counts：如果为True，返回去重数组中的元素在原数组中的出现次数</span></span><br><span class="line"><span class="comment"># axis：     轴,如果为None，则arr将被展平</span></span><br><span class="line">array01 = np.array([[<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">10</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]])<span class="comment">#不是一维将会展开</span></span><br><span class="line">n=np.unique(array01)</span><br><span class="line">n1=np.unique(array01,return_counts=<span class="literal">True</span>,axis=<span class="number">0</span>)<span class="comment">#axis=0去除相同行</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">array01[:,<span class="number">1</span>]=[<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">n1=np.unique(array01,return_counts=<span class="literal">True</span>,axis=<span class="number">1</span>)<span class="comment">#axis=1去除相同列</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure>
<pre><code>[ 0  2  4  5  6  7  8  9 10 11]
(array([[ 0, 11,  2, 10],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]]), array([1, 2, 1], dtype=int64))
[[ 0  0  2 10]
 [ 4  4  6  7]
 [ 8  8 10 11]
 [ 4  4  6  7]]
(array([[ 0,  2, 10],
       [ 4,  6,  7],
       [ 8, 10, 11],
       [ 4,  6,  7]]), array([2, 1, 1], dtype=int64))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#裁剪数组元素(以数值大小为基础)</span></span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="built_in">print</span>(np.clip(array01,<span class="number">4</span>,<span class="number">10</span>))<span class="comment">#把小于4变成4，大于10的变成10</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  0  2 10]
 [ 4  4  6  7]
 [ 8  8 10 11]
 [ 4  4  6  7]]
[[ 4  4  4 10]
 [ 4  4  6  7]
 [ 8  8 10 10]
 [ 4  4  6  7]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#行列交换</span></span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line">t=array01.copy()</span><br><span class="line">t[[<span class="number">0</span>,<span class="number">1</span>],:]=t[[<span class="number">1</span>,<span class="number">0</span>],:]<span class="comment">#交换两行</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">t[:,[<span class="number">0</span>,<span class="number">2</span>]]=t[:,[<span class="number">2</span>,<span class="number">0</span>]]<span class="comment">#交换两列</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  0  2 10]
 [ 4  4  6  7]
 [ 8  8 10 11]
 [ 4  4  6  7]]
[[ 4  4  6  7]
 [ 0  0  2 10]
 [ 8  8 10 11]
 [ 4  4  6  7]]
[[ 6  4  4  7]
 [ 2  0  0 10]
 [10  8  8 11]
 [ 6  4  4  7]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#迭代数组</span></span><br><span class="line"><span class="comment">#一维数组迭代-&gt;直接遍历</span></span><br><span class="line">array01=np.arange(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array01:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#二维数组迭代-&gt;1.使用flat属性2.使用numpy.nditer()3.双层for循环</span></span><br><span class="line">array01=array01.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="comment">#思路一:转化为一维</span></span><br><span class="line"><span class="comment"># narray.flat</span></span><br><span class="line">array02=array01.flat</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array02:</span><br><span class="line">    <span class="built_in">print</span>(i+<span class="number">3</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#np.nditer(ndarray)</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> np.nditer(array01):</span><br><span class="line">    <span class="built_in">print</span>(item+<span class="number">3</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#思路二：两重循环</span></span><br><span class="line"><span class="keyword">for</span> items <span class="keyword">in</span> array01:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>0 1 2 3 4 5 6 7 8 9 10 11 
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
3 4 5 6 7 8 9 10 11 12 13 14 
3 4 5 6 7 8 9 10 11 12 13 14 
0 1 2 3 4 5 6 7 8 9 10 11 
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组转置(ndarray.T)</span></span><br><span class="line"><span class="built_in">print</span>(array01)</span><br><span class="line"><span class="built_in">print</span>(array01.T)</span><br><span class="line"><span class="built_in">print</span>(np.transpose(array01))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接数组(不增加新维)</span></span><br><span class="line"><span class="comment"># np.concatenate((a1,a2,...),axis) #axis默认为0</span></span><br><span class="line">array01=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array02=np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">array03=np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((array01,array02),axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((array02,array03),axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># np.column_stack(()) 按列连接</span></span><br><span class="line"><span class="comment"># np.row_stack(()) 按行列连接</span></span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2]
 [3 4 5]
 [0 1 2]
 [3 4 5]
 [6 7 8]]
[[0 1 2 0 1]
 [3 4 5 2 3]
 [6 7 8 4 5]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接数组(增加新维)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.stack()</span></span><br><span class="line"></span><br><span class="line">array01=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array02=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array03=np.stack((array01,array02),axis=<span class="number">0</span>)<span class="comment">#此处01和02一定是相同形状的</span></span><br><span class="line"><span class="built_in">print</span>(array01.ndim)</span><br><span class="line"><span class="built_in">print</span>(array03.ndim)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line"><span class="comment"># 水平堆叠 np.hstack()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直堆叠 np.vstack()</span></span><br></pre></td></tr></table></figure>
<pre><code>2
3
[[[0 1 2]
  [3 4 5]]

 [[0 1 2]
  [3 4 5]]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分割数组 np.split()</span></span><br><span class="line">n1=np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">n3=np.split(n1,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="comment"># 水平切割 np.hsplit()</span></span><br><span class="line"><span class="comment"># 竖直切割 np.vsplit()</span></span><br><span class="line"><span class="comment"># 三维以上 np.dsplit()</span></span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2 3]
 [4 5 6 7]]
[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]])]
</code></pre>
<h2 id="6数组运算"><a class="markdownIt-Anchor" href="#6数组运算"></a> 6.数组运算</h2>
<p>• 广播机制(boardcast)</p>
<p>• 数组的算术运算</p>
<p>• 矩阵运算</p>
<p>• 数学函数</p>
<p>• 统计函数</p>
<p>• 字符串函数</p>
<p>• 排序函数</p>
<p>• 条件筛选函数</p>
<h3 id="广播机制"><a class="markdownIt-Anchor" href="#广播机制"></a> 广播机制</h3>
<p>1.数组+数字</p>
<p>2.一维数组+二维数组(列数相同，行数不同)</p>
<p>3.二维数组+二维数组(行数相同，列数不同)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">n1=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">n2=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(n1+n2)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">n3=np.arange(<span class="number">4</span>)</span><br><span class="line">n4=np.arange(<span class="number">3</span>).reshape(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line"><span class="built_in">print</span>(n1+n3)</span><br><span class="line"><span class="built_in">print</span>(n1+n4)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[[ 0  2  4  6]
 [ 8 10 12 14]
 [16 18 20 22]]
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[0 1 2 3]
[[0]
 [1]
 [2]]
[[ 0  2  4  6]
 [ 4  6  8 10]
 [ 8 10 12 14]]
[[ 0  1  2  3]
 [ 5  6  7  8]
 [10 11 12 13]]
</code></pre>
<h3 id="矩阵运算"><a class="markdownIt-Anchor" href="#矩阵运算"></a> 矩阵运算</h3>
<p>1.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a*b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span> 数组的乘积(对应位置相乘)</p>
<p>2.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">@</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a@b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord">@</span><span class="mord mathnormal">b</span></span></span></span> 矩阵乘积</p>
<p>3.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a.dot(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">.</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 矩阵的乘法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="built_in">print</span>(a*b)<span class="comment">#数组对应元素相乘</span></span><br><span class="line"><span class="built_in">print</span>(a@b)<span class="comment">#矩阵相乘</span></span><br><span class="line"><span class="built_in">print</span>(a.dot(b))<span class="comment">#矩阵相乘</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 5 12]
 [21 32]]
[[19 22]
 [43 50]]
[[19 22]
 [43 50]]
</code></pre>
<h3 id="数学函数"><a class="markdownIt-Anchor" href="#数学函数"></a> 数学函数</h3>
<p>1.三角函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sin()/cos()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>2.四舍五入函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>l</mi><mi>s</mi><mo>=</mo><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.around(decimals=(int))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>/向下取整<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.floor()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>/向上取整 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.ceil()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>3.算术运算(数组的加减乘除)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(cos(<span class="number">0</span>))<span class="comment">#返回浮点数类型</span></span><br><span class="line"><span class="built_in">print</span>(sin(np.pi/<span class="number">2</span>))</span><br><span class="line">n = np.arange(<span class="number">6</span>,dtype=np.float_).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">a = np.array([<span class="number">1.0</span>,<span class="number">5.55</span>,<span class="number">12.9</span>,<span class="number">0.567</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.around(a))            <span class="comment">#以小数点为基准</span></span><br><span class="line"><span class="built_in">print</span>(np.around(a,decimals=<span class="number">1</span>)) <span class="comment">#对小数点右一位</span></span><br><span class="line"><span class="built_in">print</span>(np.around(a,decimals=-<span class="number">1</span>))<span class="comment">#对小数点左一位</span></span><br></pre></td></tr></table></figure>
<pre><code>1.0
1.0
[[0. 1. 2.]
 [3. 4. 5.]]
[ 1.     5.55  12.9    0.567]
[ 1.  6. 13.  1.]
[ 1.   5.6 12.9  0.6]
[ 0. 10. 10.  0.]
</code></pre>
<h3 id="统计函数"><a class="markdownIt-Anchor" href="#统计函数"></a> 统计函数</h3>
<p>• 最大值/最小值：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.max()/np.min()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 极值：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>t</mi><mi>p</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.ptp()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 中位数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>m</mi><mi>e</mi><mi>d</mi><mi>i</mi><mi>a</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.median()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 求和：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np. sum()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 算术平均数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.mean()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 加权平均数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>g</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.average()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 标准差：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>t</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.std()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 方差：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>a</mi><mi>r</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.var()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<p>• 协方差：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>v</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np.cov()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最大值/最小值/极值/中位数/std/sverage均可指定轴</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">min</span>(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">max</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(np.ptp(a))<span class="comment">#最大值-最小值</span></span><br><span class="line"><span class="built_in">print</span>(np.median(a))</span><br><span class="line"><span class="built_in">print</span>(np.std(a))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a=np.delete(a,<span class="number">1</span>,axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">weights=np.array([<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.8</span>])</span><br><span class="line">a=a.flat</span><br><span class="line"><span class="built_in">print</span>(np.average(a,weights=weights))</span><br></pre></td></tr></table></figure>
<pre><code>[[0 1 2]
 [3 4 5]]
[0 1 2]
[2 5]
5
2.5
1.707825127659933
[[0 1 2]
 [3 4 5]]
[[0 1 2]]
1.4615384615384617
</code></pre>
<h3 id="排序函数"><a class="markdownIt-Anchor" href="#排序函数"></a> 排序函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.sort()</span></span><br><span class="line"><span class="comment"># 特点:沿最后的轴排序</span></span><br><span class="line">a=np.array([[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.sort(a))</span><br><span class="line"><span class="built_in">print</span>(np.sort(a,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(np.sort(a,<span class="number">0</span>))</span><br><span class="line"><span class="comment"># numpy.argsort()</span></span><br><span class="line"><span class="comment"># 返回将对数组进行排序的索引</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b=np.argsort(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a[b])</span><br></pre></td></tr></table></figure>
<pre><code>[[3 7]
 [9 1]]
[[3 7]
 [1 9]]
[[3 7]
 [1 9]]
[[3 1]
 [9 7]]
[[3 7]
 [9 1]]
[[0 1]
 [1 0]]
[[[3 7]
  [9 1]]

 [[9 1]
  [3 7]]]
</code></pre>
<h3 id="条件筛选函数"><a class="markdownIt-Anchor" href="#条件筛选函数"></a> 条件筛选函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.argmax(a,axis=<span class="number">1</span>))<span class="comment">#按列方向</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(a,axis=<span class="number">0</span>))<span class="comment">#按行方向</span></span><br><span class="line"><span class="comment"># 返回满足指定条件的元素下标</span></span><br><span class="line"><span class="comment"># print(np.where(a&gt;2),x,y) #若指定条件，满足则返回x，不满足则返回y</span></span><br><span class="line"><span class="built_in">print</span>(np.where(a&gt;<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<pre><code>[[3 7]
 [9 1]]
[1 0]
[1 0]
(array([0, 0, 1], dtype=int64), array([0, 1, 0], dtype=int64))
</code></pre>
<h2 id="7视图与副本"><a class="markdownIt-Anchor" href="#7视图与副本"></a> 7.视图与副本</h2>
<p>即关于复制的深浅问题</p>
<p>1.深复制(直接赋值)</p>
<p>2.浅复制(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ndarray.copy()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>/<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ndarray.view()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array01=np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">array02=array01 <span class="comment">#相当于c++当中创建了一个引用</span></span><br><span class="line">array03=array01.view()</span><br><span class="line">array04=array01.copy()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array01))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array02))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array03))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(array04))</span><br><span class="line">array03.shape=(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array04.shape=(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array03)</span><br><span class="line"><span class="built_in">print</span>(array04)</span><br><span class="line"><span class="built_in">print</span>(array01)<span class="comment">#不改变原有</span></span><br><span class="line">array02.shape=(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array02)</span><br><span class="line"><span class="built_in">print</span>(array01)<span class="comment">#改变原有</span></span><br></pre></td></tr></table></figure>
<pre><code>2416398891312
2416398891312
2416398920624
2416398920720
[[0 1]
 [2 3]
 [4 5]]
[[0 1]
 [2 3]
 [4 5]]
[[0 1 2]
 [3 4 5]]
[[0 1]
 [2 3]
 [4 5]]
[[0 1]
 [2 3]
 [4 5]]
</code></pre>
<p><code>matplotlib</code>官方<code>cheatcheet</code></p>
<p><img src="https://matplotlib.org/cheatsheets/_images/cheatsheets-1.png" alt="img" /><img src="https://matplotlib.org/cheatsheets/_images/cheatsheets-2.png" alt="image of second page of cheatsheets" /></p>
]]></content>
      <tags>
        <tag>Data science</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛中的数据结构(c++)</title>
    <url>/2023/01/28/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(c++)/</url>
    <content><![CDATA[<p>写在前面：这是一份<strong>还不完善</strong>的笔记，<strong>参考了acwing中yxc大大算法思想</strong>，日后还会提供更加详细的图片解释<em>（小白hexo摸索中）</em>以及更加清晰的代码解释，蒟蒻一枚~</p>
<span id="more"></span>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> head,idx;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> e[N],ne[N];<span class="comment">//e数组存值，ne数组存下一个指向的下标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head=<span class="number">-1</span>;</span><br><span class="line">	idx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//增加头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=head;</span><br><span class="line">	head=idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span><span class="comment">//在第k个数后插入一个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=ne[k];</span><br><span class="line">	ne[k]=idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span>删掉第k个数</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k]=ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add_to_head</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			<span class="keyword">if</span>(k==<span class="number">0</span>) head=ne[head];<span class="comment">//k从1开始，当k=0时代表删除头结点</span></span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">remove</span>(k<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(k<span class="number">-1</span>,x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head;i!=<span class="number">-1</span>;i=ne[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//按照指向顺序依次输出</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> e[N],l[N],r[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//head为0，tail为1；</span></span><br><span class="line">	<span class="comment">//初始时head的右边指向1，tail的左边指向0；</span></span><br><span class="line">	r[<span class="number">0</span>]=<span class="number">1</span>,l[<span class="number">1</span>]=<span class="number">0</span>; </span><br><span class="line">	idx=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span><span class="comment">//在第k个数的右边插入一个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	r[idx]=r[k];</span><br><span class="line">	l[idx]=k;</span><br><span class="line">	l[r[k]]=idx;</span><br><span class="line">	r[k]=idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span><span class="comment">//删除第k个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[l[k]]=r[k];</span><br><span class="line">	l[r[k]]=l[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		string op;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;L&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(<span class="number">0</span>,x);</span><br><span class="line">		&#125;<span class="comment">//头部插入</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;R&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(l[<span class="number">1</span>],x);</span><br><span class="line">		&#125;<span class="comment">//尾部插入</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;D&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			<span class="built_in">remove</span>(k+<span class="number">1</span>);</span><br><span class="line">		&#125;<span class="comment">//k从1开始，idx从2开始，故为（k-1）+2=k+1</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;IL&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(l[k+<span class="number">1</span>],x);</span><br><span class="line">		&#125;<span class="comment">//在第k个数左侧插入即指向第k个数的右侧插入</span></span><br><span class="line">		<span class="keyword">if</span>(op==<span class="string">&quot;IR&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			<span class="built_in">add</span>(k+<span class="number">1</span>,x);</span><br><span class="line">		&#125;<span class="comment">//在第k个数右侧插入</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r[<span class="number">0</span>];i!=<span class="number">1</span>;i=r[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈（先进后出）"><a href="#栈（先进后出）" class="headerlink" title="栈（先进后出）"></a>栈（先进后出）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt=<span class="number">-1</span>,m;<span class="comment">//栈的下标从‘-1’开始</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		string a;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;push&quot;</span>)<span class="comment">//插入元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			stk[++tt]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;pop&quot;</span>)<span class="comment">//弹出栈顶元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			tt--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;empty&quot;</span>)<span class="comment">//判断栈是否为空</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tt==<span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;query&quot;</span>)<span class="comment">//查询栈顶元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;stk[tt]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="中缀表达式求值-栈例题）"><a href="#中缀表达式求值-栈例题）" class="headerlink" title="中缀表达式求值(栈例题）"></a>中缀表达式求值(栈例题）</h3><p><img src="C:\Users\35226\Pictures\表达式.png" alt="表达式"><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span><span class="comment">//哈希表</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; num;<span class="comment">//数字栈</span></span><br><span class="line">stack&lt;<span class="type">char</span>&gt; op;<span class="comment">//符号栈</span></span><br><span class="line">unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; h=&#123;&#123;<span class="string">&#x27;+&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;-&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;*&#x27;</span>,<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;/&#x27;</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">()</span><span class="comment">//求值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a=num.<span class="built_in">top</span>();num.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="type">int</span> b=num.<span class="built_in">top</span>();num.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="type">char</span> p=op.<span class="built_in">top</span>();op.<span class="built_in">pop</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;+&#x27;</span>) r=b+a;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;-&#x27;</span>) r=b-a;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;*&#x27;</span>) r=b*a;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="string">&#x27;/&#x27;</span>) r=b/a;</span><br><span class="line">	</span><br><span class="line">	num.<span class="built_in">push</span>(r);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a;</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">isdigit</span>(a[i]))<span class="comment">//如果是数字的话则判断位数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x=<span class="number">0</span>,j=i;</span><br><span class="line">			<span class="keyword">while</span>(j&lt;a.<span class="built_in">size</span>()&amp;&amp;<span class="built_in">isdigit</span>(a[j])) x=x*<span class="number">10</span>+a[j]-<span class="string">&#x27;0&#x27;</span>,j++;</span><br><span class="line">			num.<span class="built_in">push</span>(x);</span><br><span class="line">			i=j<span class="number">-1</span>;<span class="comment">//更新i</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			op.<span class="built_in">push</span>(a[i]);</span><br><span class="line">		&#125;<span class="comment">//左括号直接存起来</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(op.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>) <span class="built_in">eval</span>();</span><br><span class="line">			op.<span class="built_in">pop</span>();<span class="comment">//记得把左括号弹出来</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(op.<span class="built_in">size</span>()&amp;&amp;h[op.<span class="built_in">top</span>()]&gt;=h[a[i]]) <span class="built_in">eval</span>();<span class="comment">//新来的优先级小于等于之前的则计算之前的</span></span><br><span class="line">			op.<span class="built_in">push</span>(a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(op.<span class="built_in">size</span>()) <span class="built_in">eval</span>();<span class="comment">//num.top一定有值，通过判断符号栈来知晓是否结束</span></span><br><span class="line">	cout&lt;&lt;num.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="队列（先入先出）"><a href="#队列（先入先出）" class="headerlink" title="队列（先入先出）"></a>队列（先入先出）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q[N],hh,tt=<span class="number">-1</span>;<span class="comment">//队列初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		string a;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;push&quot;</span>)<span class="comment">//在队尾加入</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			q[++tt]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;pop&quot;</span>)<span class="comment">//队头前移</span></span><br><span class="line">		&#123;</span><br><span class="line">			hh++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;empty&quot;</span>)<span class="comment">//查询是否为空</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tt&gt;=hh) cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;query&quot;</span>)<span class="comment">//查询队头</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;q[hh]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调数据结构"><a href="#单调数据结构" class="headerlink" title="单调数据结构"></a>单调数据结构</h2><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/nmq91e7g.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,x;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="keyword">while</span>(tt&amp;&amp;stk[tt]&gt;=x) tt--;<span class="comment">//若右边出现了更小的数，则较大数不可能为答案，则出栈，注意等于号</span></span><br><span class="line">		<span class="keyword">if</span>(tt) cout&lt;&lt;stk[tt]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		stk[++tt]=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zuqla3ih.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],q[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];<span class="comment">//a数组存的是值，q数组是一个队列，存的是下标</span></span><br><span class="line">	<span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//求每个窗口中的最小值</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(hh&lt;=tt&amp;&amp;q[hh]&lt;i-k+<span class="number">1</span>) hh++;<span class="comment">//hh是队头，q[hh]是下标，当i增大时，q[hh]不在范围内，则出列，队头前移</span></span><br><span class="line">		<span class="keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&gt;a[i]) tt--;<span class="comment">//单调队列核心，同理当新来的小于之前的，则之前的就会被删掉</span></span><br><span class="line">		q[++tt]=i;<span class="comment">//存下标</span></span><br><span class="line">		<span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout&lt;&lt;a[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//除了一开始，其他每次都要输出</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	hh=<span class="number">0</span>,tt=<span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//对称求每个窗口的最大值</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(hh&lt;=tt&amp;&amp;q[hh]&lt;i-k+<span class="number">1</span>) hh++;</span><br><span class="line">		<span class="keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&lt;a[i]) tt--;<span class="comment">//单调队列核心，同理当新来的大于之前的，则之前的就会被删掉</span></span><br><span class="line">		q[++tt]=i;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout&lt;&lt;a[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="KMP字符串"><a href="#KMP字符串" class="headerlink" title="KMP字符串"></a>KMP字符串</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> p[N],s[M];<span class="comment">//p字符串为模板串，s字符串为原串</span></span><br><span class="line"><span class="type">int</span> ne[N];<span class="comment">//next数组存的是从开头匹配的最大数量</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p+<span class="number">1</span>&gt;&gt;m&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//双指针构造next数组 </span></span><br><span class="line">    <span class="comment">//思想：利用双指针将p数组同时看成模板链和原链</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="number">1</span>]) j=ne[j];<span class="comment">//应用kmp思想节省步数的一直后退，直到匹配</span></span><br><span class="line">        <span class="keyword">if</span>(p[i]==p[j+<span class="number">1</span>]) j++;<span class="comment">//一一对应</span></span><br><span class="line">        ne[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始kmp</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==p[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j==n) </span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i-n&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//已完全匹配，输出起始下标</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>],str[N];</span><br><span class="line"><span class="type">int</span> cnt[N],son[N][<span class="number">26</span>],idx=<span class="number">0</span>;<span class="comment">//26个字母,26个分支，cnt为标记结尾数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;<span class="comment">//初始化根节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=str[i]-<span class="string">&#x27;a&#x27;</span>;<span class="comment">//26个字母对应0到25这26个数字</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) son[p][u]=++idx;<span class="comment">//如果没有这个节点，则新建</span></span><br><span class="line">        p=son[p][u];<span class="comment">//跳到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++;<span class="comment">//标记结尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qur</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> p=son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];<span class="comment">//返回以这个节点已打上的标记数量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)<span class="comment">//插入一个字符串</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;str;</span><br><span class="line">            <span class="built_in">insert</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)<span class="comment">//查询一个字符串是否其中</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;str;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">qur</span>(str)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大异或对（二进制Trie树）"><a href="#最大异或对（二进制Trie树）" class="headerlink" title="最大异或对（二进制Trie树）"></a>最大异或对（二进制Trie树）</h3><p>//异或：即二进制数1^0=1，1^1=0，0^0=0</p>
<p><strong>在给定的 N个整数 A1，A2……AN中选出两个进行 xor（异或）运算，得到的结果最大是多少？</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">3e6</span>+<span class="number">10</span>;<span class="comment">//题目数据保证数字大小不会超过2的31次方</span></span><br><span class="line"><span class="type">int</span> son[M][<span class="number">2</span>];<span class="comment">//两个节点，不是0就是1</span></span><br><span class="line"><span class="type">int</span> a[N],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;~i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=x&gt;&gt;i&amp;<span class="number">1</span>;<span class="comment">//取出x的第i位数字</span></span><br><span class="line">		<span class="keyword">if</span>(!son[p][u]) son[p][u]=++idx;</span><br><span class="line">		p=son[p][u];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> u=<span class="number">0</span>,p=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;~i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		u=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(son[p][!u])<span class="comment">//如果不一样，则异或值为1</span></span><br><span class="line">		&#123;</span><br><span class="line">			res=(res&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;<span class="comment">//每次都要左移i位</span></span><br><span class="line">			p=son[p][!u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			res=(res&lt;&lt;<span class="number">1</span>)+<span class="number">0</span>;<span class="comment">//每次都要左移i位</span></span><br><span class="line">			p=son[p][u];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">		<span class="built_in">insert</span>(a[i]);<span class="comment">//构建数</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		res=<span class="built_in">max</span>(res,<span class="built_in">search</span>(a[i]));<span class="comment">//最大异或值</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;res;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并查集-合并集合）"><a href="#并查集-合并集合）" class="headerlink" title="并查集(合并集合）"></a>并查集(合并集合）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//返回x的祖宗节点+路径压缩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p[x]!=x) p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">	<span class="keyword">return</span> p[x];<span class="comment">//p[x]实际上还是父节点，只不过在经过路径压缩后，父节点就是祖宗节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">	<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)<span class="comment">//合并集合</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			p[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);<span class="comment">//让a祖宗节点的父节点等于b的祖宗节点</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)<span class="comment">//查询是否在同一集合</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="连通块中点的数量-并查集例题）"><a href="#连通块中点的数量-并查集例题）" class="headerlink" title="连通块中点的数量(并查集例题）"></a>连通块中点的数量(并查集例题）</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5zqu7qjc.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p[x]!=x) p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i]=i;</span><br><span class="line">		s[i]=<span class="number">1</span>;<span class="comment">//初始化distance为1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> op[<span class="number">3</span>];</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;op;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) <span class="keyword">continue</span>;</span><br><span class="line">			s[<span class="built_in">find</span>(b)]+=s[<span class="built_in">find</span>(a)];<span class="comment">//b(假设b为最后的祖宗节点)的数量为a与b之和</span></span><br><span class="line">			p[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);<span class="comment">//让a祖宗节点的父节点等于b的祖宗节点</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">				<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cin&gt;&gt;a;</span><br><span class="line">				cout&lt;&lt;s[<span class="built_in">find</span>(a)]&lt;&lt;endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="食物链-并查集例题"><a href="#食物链-并查集例题" class="headerlink" title="食物链(并查集例题)"></a>食物链(并查集例题)</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/kufv6iwu.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  n,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N],d[N];<span class="comment">//d[x]指到父节点的距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p[x]!=x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">find</span>(p[x]);</span><br><span class="line">		d[x]+=d[p[x]];<span class="comment">//递归求总长度然后路径压缩，一路相加</span></span><br><span class="line">		p[x]=u;</span><br><span class="line">      &#125;</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(k--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> t,x,y;</span><br><span class="line">		cin&gt;&gt;t&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;n||y&gt;n) res++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> px=<span class="built_in">find</span>(x);</span><br><span class="line">		<span class="type">int</span> py=<span class="built_in">find</span>(y);</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(px==py&amp;&amp;(d[x]-d[y])%<span class="number">3</span>) res++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(px!=py)</span><br><span class="line">			&#123;</span><br><span class="line">				p[px]=py;</span><br><span class="line">				d[px]=d[y]-d[x];<span class="comment">//x与y是同类，恒有d[x]+d[px]=d[y]</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(px==py&amp;&amp;(d[x]-d[y]<span class="number">-1</span>)%<span class="number">3</span>) res++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(px!=py)</span><br><span class="line">			&#123;</span><br><span class="line">				p[px]=py;</span><br><span class="line">				d[px]=d[y]-d[x]+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="堆排序（完全二叉树实现排序）"><a href="#堆排序（完全二叉树实现排序）" class="headerlink" title="堆排序（完全二叉树实现排序）"></a>堆排序（完全二叉树实现排序）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> u=x;</span><br><span class="line">	<span class="keyword">if</span>(x*<span class="number">2</span>&lt;=s&amp;&amp;a[x*<span class="number">2</span>]&lt;a[u]) u=<span class="number">2</span>*x;</span><br><span class="line">	<span class="keyword">if</span>(x*<span class="number">2</span>+<span class="number">1</span>&lt;=s&amp;&amp;a[x*<span class="number">2</span>+<span class="number">1</span>]&lt;a[u]) u=x*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x!=u)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(a[x],a[u]);</span><br><span class="line">		<span class="built_in">down</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="comment">//o(n)的时间复杂度 </span></span><br><span class="line">	s=n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>;i;i--) <span class="built_in">down</span>(i);<span class="comment">//要满足左右节点都为堆的性质才可以用</span></span><br><span class="line"><span class="comment">//因为n是最大子节点，n/2为它的父节点，即倒数第二排的最后一个</span></span><br><span class="line"><span class="comment">//构建堆</span></span><br><span class="line">	<span class="keyword">while</span>(m--)<span class="comment">//每次删除头结点并输出</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[<span class="number">1</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		a[<span class="number">1</span>]=a[s];</span><br><span class="line">		s--;</span><br><span class="line">		<span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模拟堆（小根堆）"><a href="#模拟堆（小根堆）" class="headerlink" title="模拟堆（小根堆）"></a>模拟堆（小根堆）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N],ph[N],hp[N];</span><br><span class="line"><span class="type">int</span> n,s,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">head_swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">	<span class="built_in">swap</span>(hp[a],hp[b]);</span><br><span class="line">	<span class="built_in">swap</span>(h[a],h[b]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(u/<span class="number">2</span>&amp;&amp;h[u]&lt;h[u/<span class="number">2</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">head_swap</span>(u,u/<span class="number">2</span>);</span><br><span class="line">		u&gt;&gt;=<span class="number">1</span>;<span class="comment">//记得上移一层</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=u;</span><br><span class="line">	<span class="keyword">if</span>(u*<span class="number">2</span>&lt;=s&amp;&amp;h[t]&gt;h[u*<span class="number">2</span>]) t=u*<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(u*<span class="number">2</span>+<span class="number">1</span>&lt;=s&amp;&amp;h[t]&gt;h[u*<span class="number">2</span>+<span class="number">1</span>]) t=u*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(t!=u)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">head_swap</span>(t,u);</span><br><span class="line">		<span class="built_in">down</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//巧妙</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;I&quot;</span>)<span class="comment">//插入一个数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			h[++s]=k;</span><br><span class="line">			hp[s]=++m;</span><br><span class="line">			ph[m]=s;</span><br><span class="line">			<span class="built_in">up</span>(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;PM&quot;</span>)<span class="comment">//输出最小值</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;h[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;DM&quot;</span>)<span class="comment">// 删除根节点</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">head_swap</span>(<span class="number">1</span>,s);</span><br><span class="line">			s--;</span><br><span class="line">			<span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;D&quot;</span>)<span class="comment">//删除第k个数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			cin&gt;&gt;k;</span><br><span class="line">			k=ph[k];</span><br><span class="line">			<span class="built_in">head_swap</span>(k,s);</span><br><span class="line">			s--;</span><br><span class="line">			<span class="built_in">up</span>(k);</span><br><span class="line">                  <span class="built_in">down</span>(k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">&quot;C&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k,x;</span><br><span class="line">			cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">			k=ph[k];</span><br><span class="line">			h[k]=x;</span><br><span class="line">			<span class="built_in">up</span>(k);</span><br><span class="line">			<span class="built_in">down</span>(k);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模拟散列表（hash哈希）"><a href="#模拟散列表（hash哈希）" class="headerlink" title="模拟散列表（hash哈希）"></a>模拟散列表（hash哈希）</h2><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200003</span>,null=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k=(x%N+N)%N;</span><br><span class="line">	<span class="keyword">while</span>(h[k]!=null&amp;&amp;h[k]!=x)</span><br><span class="line">	&#123;</span><br><span class="line">		k++;</span><br><span class="line">		<span class="keyword">if</span>(k==N) k=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(h,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class="line">		<span class="type">int</span> t=<span class="built_in">find</span>(x);</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			h[t]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(h[t]==x) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100003</span>;</span><br><span class="line"><span class="type">int</span> a[N],e[N],ne[N],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k=(x%N+N)%N;</span><br><span class="line">	e[idx]=x;</span><br><span class="line">	ne[idx]=a[k];</span><br><span class="line">	a[k]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k=(x%N+N)%N;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=a[k];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==e[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin&gt;&gt;op&gt;&gt;x;</span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">insert</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">find</span>(x)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P=<span class="number">131</span>,N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ULL p[N],h[N];</span><br><span class="line"><span class="type">int</span> m,n,l1,r1,l2,r2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;str+<span class="number">1</span>;</span><br><span class="line">	p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		h[i]=h[i<span class="number">-1</span>]*P+str[i];</span><br><span class="line">		p[i]=p[i<span class="number">-1</span>]*P;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;l1&gt;&gt;r1&gt;&gt;l2&gt;&gt;r2;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">get</span>(l1,r1)==<span class="built_in">get</span>(l2,r2)) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2023/07/15/Git/</url>
    <content><![CDATA[<p>Git更新持续中~~~~我会分享从小白开始的学习记录</p>
<span id="more"></span>
<h1 id="git"><a class="markdownIt-Anchor" href="#git"></a> Git</h1>
<p>git是一个分布式版本控制系统</p>
<p><a href="https://www.bilibili.com/video/BV1pX4y1S7Dq/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0af75e3c4c1fc1b5e15f5048a70b0a6d">30分钟弄懂所有工作Git必备操作 / Git 入门教程_哔哩哔哩_bilibili</a></p>
<p>安装  <a href="https://git-scm.com/download/">Git - Downloads (git-scm.com)</a></p>
<h2 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h2>
<h3 id="创建仓库"><a class="markdownIt-Anchor" href="#创建仓库"></a> <strong>创建仓库</strong></h3>
<ul>
<li>在本地创建：在文件夹里<code>$ git init </code></li>
<li>去网上找：<code>$ git clone +url</code></li>
</ul>
<h2 id="从创建到日常使用"><a class="markdownIt-Anchor" href="#从创建到日常使用"></a> 从创建到日常使用</h2>
<h3 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h3>
<ul>
<li>安装<code>git</code></li>
<li><code>cmd</code>操作获取ssh</li>
</ul>
<blockquote>
<ol>
<li>若之前没有执行过GitHub密钥操作，网上有很多教程十分详细，我这里不多加赘述<a href="https://blog.csdn.net/linxinfa/article/details/108709835?ops_request_misc=%7B%22request%5Fid%22%3A%22169468027716800213019760%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169468027716800213019760&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108709835-null-null.142%5Ev94%5Einsert_down28v1&amp;utm_term=gitee&amp;spm=1018.2226.3001.4187">gitee使用教程，创建项目仓库并上传代码_gitee创建仓库上传代码_林新发的博客-CSDN博客</a></li>
<li>如果已经已经执行过GitHub密钥操作，并且github与gitee采用同一邮箱，即配置了<code>ssh</code>，那么进入<code>cd ~/.ssh</code>（也可手动进入），反正在此目录下的<code>cmd</code>即可，后直接<code>$ cat ~/.ssh/id_rsa.pub</code>，查看<code>ssh</code>密钥再去配置即可</li>
<li>检测是否成功<code>$ ssh -T git@gitee.com/$ ssh -T git@github.com</code>
<strong>连接操作</strong></li>
</ol>
</blockquote>
<p>完全部署ssh后的一套操作（创建仓库者）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git clone ssh</span><br><span class="line">git add .</span><br><span class="line">git status</span><br><span class="line">git commit -m &quot;描述&quot;</span><br><span class="line">git remote add 仓库名 地址</span><br><span class="line">git push -u 仓库名 master</span><br></pre></td></tr></table></figure>
<h3 id="基操"><a class="markdownIt-Anchor" href="#基操"></a> <strong>基操</strong></h3>
<p><strong>增加</strong>：<code>$ git add</code></p>
<p><strong>删除</strong>：<code>$ git rm</code></p>
<p><strong>上传</strong>：<code>$ git commit</code></p>
<p><img src="C:/Users/35226/AppData/Roaming/Typora/typora-user-images/image-20230914192324993.png" alt="image-20230914192324993" /></p>
<p><strong>查看修改</strong>：<code>$ git diff</code></p>
<p><strong>查看历史提交</strong>：<code>$ git log</code></p>
<p><strong>连接远程仓库</strong>：<code>$ git remote add +仓库名 +url</code>+<code>$ git push +仓库名</code>后续跟操作走就好了,去找token就好了
在项目文件夹下的一套操作</p>
<p><a href="https://blog.csdn.net/linxinfa/article/details/108709835?ops_request_misc=%7B%22request_id%22%3A%22169468027716800213019760%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169468027716800213019760&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108709835-null-null.142%5Ev94%5Einsert_down28v1&amp;utm_term=gitee&amp;spm=1018.2226.3001.4187">gitee使用教程，创建项目仓库并上传代码_gitee创建仓库上传代码_林新发的博客-CSDN博客</a></p>
<h2 id="连接成功后平日里的操作"><a class="markdownIt-Anchor" href="#连接成功后平日里的操作"></a> 连接成功后平日里的操作</h2>
<h4 id="上传"><a class="markdownIt-Anchor" href="#上传"></a> 上传</h4>
<p><code>$ git add .</code>(tips：若已设置监听，可以省去此步骤)</p>
<p><code>$ git commit -m 描述</code></p>
<p><code>$ git remote add http</code></p>
<p><code>$ git push 仓库名 要推送的分支名</code></p>
<h4 id="下拉"><a class="markdownIt-Anchor" href="#下拉"></a> 下拉</h4>
<p><code>$ git pull 仓库名 分支名</code></p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2023/07/15/Java/</url>
    <content><![CDATA[<p>Java更新持续中~~~~我会分享从小白开始的学习记录</p>
<span id="more"></span>
<h1 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h1>
<h2 id="基础原理"><a class="markdownIt-Anchor" href="#基础原理"></a> 基础原理</h2>
<h3 id="编译原理"><a class="markdownIt-Anchor" href="#编译原理"></a> 编译原理</h3>
<p>关于<code>java</code>文件的编译原理，可以详见这篇文章<a href="https://zhuanlan.zhihu.com/p/165944292">https://zhuanlan.zhihu.com/p/165944292</a></p>
<p>在这里只提几个小点：</p>
<ol>
<li>所有的程序并不是直接运行在操作系统上，而是通过<code>JVM</code>执行.<code>JVM</code>虚拟机是一个由软件或硬件模拟出来的计算机. 它的存在，实现了<code>java</code>的<strong>可移植性</strong>.</li>
<li>在<code>cmd</code>中执行编译命令使用<code>javac 源文件.java</code>,编译生成的字节码文件的文件名对应java源文件中的类名, 与<code>java</code>源文件的文件名是不一致的。在<code>cmd</code>中执行运行命令使用<code>javac class.java</code></li>
<li>当一个声明了多个类的源文件经过编译之后会生成<strong>多个字节码</strong>文件.</li>
<li>程序的入口是<code>main()方法</code>，格式是<strong>固定不变</strong>的。</li>
</ol>
<p><img src="https://s3.ananas.chaoxing.com/sv-w8/doc/31/98/56/ee2f08346ae103d1437f6bc0853f463e/thumb/9.png" alt="img" /></p>
<h3 id="path与classpath"><a class="markdownIt-Anchor" href="#path与classpath"></a> PATH与CLASSPATH</h3>
<p>环境变量，用于指定类文件位置</p>
<p>此外，基本语法不多做赘述，c语言母胎，懂得都懂</p>
<h2 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h2>
<h3 id="对象实例化"><a class="markdownIt-Anchor" href="#对象实例化"></a> 对象实例化</h3>
<p>java里有类似隐形指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Book</span>();</span><br></pre></td></tr></table></figure>
<p>这里<code>new Book()</code>会在堆内存中分配空间用于存储<code>Book</code>类型的对象，然后<code>Book book=</code>则是在栈当中去新建一个指针，指向堆所在的对象空间。</p>
<p>当堆当中的对象没有被指向的时候，会变成垃圾空间，<code>java</code>有自带的垃圾回收装置</p>
<h3 id="java栈"><a class="markdownIt-Anchor" href="#java栈"></a> Java栈</h3>
<p>被称为java虚拟机栈，如图所示</p>
<img src="https://s3.ananas.chaoxing.com/sv-w9/doc/e1/a4/65/0eb26a07109c80dca0fef8dfa64b4cb0/thumb/21.png" alt="img" style="zoom: 80%;" />
<h3 id="属性封装"><a class="markdownIt-Anchor" href="#属性封装"></a> 属性封装</h3>
<p><code>private</code>修饰符（防止数据错误更改）</p>
<ol>
<li>外部对象访问成员属性需通过<code>setter()</code>,<code>getter()</code>方法</li>
<li>在对象内部用方法更改</li>
</ol>
<h3 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法</h3>
<ol>
<li>构造函数名称必须与类名相同.</li>
<li>若参数不对等且存在多个构造方法时，自动匹配参数个数与构造函数相等的一个</li>
<li>若缺省，默认自动追加一个无参且无返回值的构造<code>public Book()&#123;&#125;</code></li>
</ol>
<h3 id="方法调用"><a class="markdownIt-Anchor" href="#方法调用"></a> 方法调用</h3>
<ol>
<li>类外调用</li>
<li>类内调用（节省代码）<code>this</code>为关键字</li>
</ol>
<p><img src="https://s3.ananas.chaoxing.com/sv-w9/doc/e1/a4/65/0eb26a07109c80dca0fef8dfa64b4cb0/thumb/38.png" alt="img" /></p>
<h3 id="修饰词"><a class="markdownIt-Anchor" href="#修饰词"></a> 修饰词</h3>
<h1 id="javaweb"><a class="markdownIt-Anchor" href="#javaweb"></a> JavaWeb</h1>
<p>前端：<code>HTML,CSS,JS</code>-&gt;<code>Ajax,Axios</code>-&gt;<code>vue Element</code>-&gt;<code>前端工程化</code>-&gt;<code>Maven</code>-&gt;<code>SpringBoot基础</code>-&gt;<code>SpringBoot SpringMVC基础</code>-&gt;<code>MySQL</code>-&gt;<code>JDBC Mybatis</code>-&gt;<code>Web案例</code>-&gt;<code>会话跟踪技术</code>-&gt;<code>Filter Interceptor </code>-&gt;<code>AOP</code>-&gt;<code>SpringBoot原理</code></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/15/Pandas/</url>
    <content><![CDATA[<h1 id="pandas"><a class="markdownIt-Anchor" href="#pandas"></a> Pandas</h1>
<p>更新中....感觉跟数据库的操作无异，更完数据库再回来更新</p>
<span id="more"></span>
<p>导入<code>import pandas as pd</code></p>
<h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2>
<h3 id="series"><a class="markdownIt-Anchor" href="#series"></a> Series</h3>
<p>组成：由两部分组成，一个是<code>value</code>,一个是<code>index</code></p>
<p><strong><code>value</code>即源数据</strong></p>
<ul>
<li><code>python</code>字典</li>
<li>多维数组</li>
<li>标量值（即单个数字）</li>
</ul>
<p><strong><code>index</code>即轴标签列表</strong></p>
<blockquote>
<p>index 长度需与data一致，没有指定index时，创建数值型索引-&gt;[0,...,len(data)-1]
pandas 值索引可以重复</p>
</blockquote>
<h4 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 用numpy数组建立</span></span><br><span class="line">s1=pd.Series(np.random.randn(<span class="number">5</span>),index=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1=pd.Series(np.random.randn(<span class="number">5</span>))<span class="comment"># 无索引以数字为索引</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># 用字典创立</span></span><br><span class="line">dictionary=&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">s2=pd.Series(dictionary)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line">dictionary=&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">s2=pd.Series(dictionary,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])<span class="comment"># 缺失值用NAN代替</span></span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure>
<h4 id="series的基础操作"><a class="markdownIt-Anchor" href="#series的基础操作"></a> Series的基础操作</h4>
<ul>
<li>索引切片: 与<code>numpy</code>差不多，贴连接<a href="https://czaxx.github.io/2023/07/08/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BNumpy/">数据分析之Numpy | Vera-Blog (czaxx.github.io)</a></li>
<li>支持<code>dtype</code></li>
<li>可以取值<code>Series.values</code>和<code>Series.index</code></li>
<li>可以直接索引值<code>s['a']</code>，若没有此标签，会触发异常，或者指定默认值，<code>s.get('a',np.nan)</code></li>
<li>支持<code>name</code>属性+<code>rename</code>操作</li>
</ul>
<h3 id="dataframe"><a class="markdownIt-Anchor" href="#dataframe"></a> Dataframe</h3>
<p>二维表标签数据结构</p>
<p><strong>支持多种数据类型的输入</strong></p>
<ul>
<li>一维<code>ndarray</code>,列表，字典，<code>Series</code>字典</li>
<li>二维<code>numpy.ndarray</code></li>
<li>结构多维数组或记录多维数组</li>
<li><code>Series</code></li>
<li><code>DataFrame</code></li>
</ul>
<p><strong>&lt;选择性输入&gt;</strong></p>
<ul>
<li>行标签：<code>index</code></li>
<li>列标签：<code>columns</code></li>
</ul>
<p>举例：用<code>Series</code>字典或字典生成<code>DataFrame</code></p>
]]></content>
  </entry>
  <entry>
    <title>一个实例看懂mysql操作流程</title>
    <url>/2023/09/28/%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9C%8B%E6%87%82mysql%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>在写这篇文章时，我感觉之前学的一些<code>mysql</code>基础操作只浮于表面，只告诉你了可以怎么做，但是没有教会你应该怎么做，本文将从学生成绩表这个切入点开始，从基本配置到增删改查到各类选择，学生党比较忙，尽力更新....</p>
<span id="more"></span>
<h1 id="一个实例看懂mysql操作流程"><a class="markdownIt-Anchor" href="#一个实例看懂mysql操作流程"></a> 一个实例看懂MySql操作流程</h1>
<h2 id="初始准备"><a class="markdownIt-Anchor" href="#初始准备"></a> 初始准备</h2>
<h3 id="查看配置文件myini"><a class="markdownIt-Anchor" href="#查看配置文件myini"></a> 查看配置文件my.ini</h3>
<p>在这里可以配置mysql的很多东西，一般在mysql的安装路径下，在这里提几个重要的</p>
<h4 id="端口"><a class="markdownIt-Anchor" href="#端口"></a> 端口</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">port<span class="operator">=</span><span class="number">3306</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>3306为默认端口；</p>
<p>本地和远程连接协议：TCP/IP</p>
</blockquote>
<p>如果提示3306端口已被占用</p>
<p>方法一:</p>
<ul>
<li>使用<code>netstat -ano</code>查看所有连接的端口占用情况及PID</li>
<li>在任务管理器中找到这个PID所对应的程序</li>
</ul>
<p>方法二:</p>
<p><code>netstat -aon|findstr &quot;3306&quot;</code>找到tening, 后<code>tasklist|findstr &quot;tening&quot;</code>找到对应占着的程序</p>
<h4 id="mysql安装目录与数据存放目录"><a class="markdownIt-Anchor" href="#mysql安装目录与数据存放目录"></a> mysql安装目录与数据存放目录</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">basedir<span class="operator">=</span>&quot;C:/Program Files/MySQL/MySQL Server 8.0/&quot;</span><br><span class="line">datadir<span class="operator">=</span>C:<span class="operator">/</span>ProgramData<span class="operator">/</span>MySQL<span class="operator">/</span>MySQL Server <span class="number">8.0</span>\Data</span><br></pre></td></tr></table></figure>
<p>此外,你还可以在这里找到,允许最大连接次数,允许连接失败的最大连接数,默认字符集,默认存储引擎等等</p>
<h3 id="环境变量的配置"><a class="markdownIt-Anchor" href="#环境变量的配置"></a> 环境变量的配置</h3>
<p>啊,这个网上教程太多了,这里不多加赘述</p>
<p>判断环境变量是否配好的方式是...查看是否能够接入mysql服务QAQ</p>
<p>首先,我们进入安装目录下的bin,打开命令行,如果命令行打开失败,记得<strong>以管理员权限</strong>打开命令行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql -u root –p</span><br></pre></td></tr></table></figure>
<p>若成功出现输入密码等,则配置成功</p>
<h3 id="忘了密码怎么办"><a class="markdownIt-Anchor" href="#忘了密码怎么办"></a> 忘了密码怎么办</h3>
<p>我第一次也一脸懵,看到繁琐的操作十分后悔自己没把密码记下来的愚蠢操作</p>
<p>但其实并不复杂QAQ,网上教程很多,这里贴上我使用的<a href="https://www.bilibili.com/video/BV1F24y1Q7JX/?spm_id_from=333.337.search-card.all.click">MySQL密码忘了解决方案_哔哩哔哩_bilibili</a></p>
<p>大概操作是关闭mysql服务,在配置文件取消密码,然后登陆后重设密码这一套逻辑</p>
<h3 id="连接mysql"><a class="markdownIt-Anchor" href="#连接mysql"></a> 连接mysql</h3>
<p><strong>以管理员权限</strong>打开命令行:</p>
<ul>
<li>连接本地:<code>mysql -u root –p</code></li>
<li>连接远程
我还未尝试,等会试一下</li>
</ul>
<h2 id="趋势云数据库"><a class="markdownIt-Anchor" href="#趋势云数据库"></a> 趋势:云数据库</h2>
<p>在本地也可以连接,非常好</p>
<p>mysql -uroot -p --default-character-set=utf8mb4  &lt; D:\aliases.sql</p>
<p>mysql -uroot -p<password> --default-character-set=utf8mb4 -h &lt;host_name&gt; -P &lt;port_number&gt; &lt;database_name&gt; &lt; D:\aliases.sql</p>
]]></content>
  </entry>
</search>
